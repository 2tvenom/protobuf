// Code generated by fieldpath-gen.
// source: code.google.com/p/gogoprotobuf/fieldpath/fieldpath-gen/template.go
// DO NOT EDIT!

package fieldpath_test

import (
	"bytes"
	"code.google.com/p/gogoprotobuf/fieldpath"
	"code.google.com/p/gogoprotobuf/proto"
	"code.google.com/p/gogoprotobuf/test"
	"fmt"
	math_rand "math/rand"
	"reflect"
	"sort"
	"testing"
	"time"
)

var _ = bytes.MinRead
var pseudo int64 = time.Now().UnixNano()

type FuncHandler struct {
	Float64Func
	Float32Func
	Int64Func
	Int32Func
	Uint64Func
	Uint32Func
	BoolFunc
	BytesFunc
	StringFunc
}

type Float64Func func(float64)
type Float32Func func(float32)
type Int64Func func(int64)
type Int32Func func(int32)
type Uint64Func func(uint64)
type Uint32Func func(uint32)
type BoolFunc func(bool)
type BytesFunc func([]byte)
type StringFunc func(string)

func (this Float64Func) Float64(v float64) { this(v) }
func (this Float32Func) Float32(v float32) { this(v) }
func (this Int64Func) Int64(v int64)       { this(v) }
func (this Int32Func) Int32(v int32)       { this(v) }
func (this Uint64Func) Uint64(v uint64)    { this(v) }
func (this Uint32Func) Uint32(v uint32)    { this(v) }
func (this BoolFunc) Bool(v bool)          { this(v) }
func (this BytesFunc) Bytes(v []byte)      { this(v) }
func (this StringFunc) String(v string)    { this(v) }

type sortable struct {
	list [][]byte
}

func (this *sortable) Len() int {
	return len(this.list)
}

func (this *sortable) Swap(i, j int) {
	this.list[i], this.list[j] = this.list[j], this.list[i]
}

func (this *sortable) Get(index int) []byte {
	return this.list[index]
}

func TestUnmarshalFirstNinOptNativeFloat64(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewFloat64SinglePath("test", "NinOptNative", test.ThetestDescription(), "Field1")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinOptNative(r, false)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	unmarshalled, err := fp.UnmarshalFirst(buf)
	if err != nil {
		panic(err)
	}
	if !(p.Field1 != nil) {
		if unmarshalled != nil {
			t.Fatalf("unmarshalled != nil")
		}
		return
	}
	if unmarshalled == nil {
		t.Fatalf("ummarshalled == nil")
	}
	if *unmarshalled != *p.Field1 {
		t.Fatalf("%v != %v", *unmarshalled, *p.Field1)
	}
}

func TestUnmarshalNinOptNativeFloat64(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewFloat64SinglePath("test", "NinOptNative", test.ThetestDescription(), "Field1")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinOptNative(r, false)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	unmarshalled, err := fp.Unmarshal(buf)
	if err != nil {
		panic(err)
	}
	if !(p.Field1 != nil) {
		if unmarshalled != nil {
			t.Fatalf("unmarshalled != nil")
		}
		return
	}
	if unmarshalled == nil {
		t.Fatalf("ummarshalled == nil")
	}
	if *unmarshalled != *p.Field1 {
		t.Fatalf("%v != %v", *unmarshalled, *p.Field1)
	}
}

func TestCompiledNinOptNativeFloat64(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewFloat64Path("test", "NinOptNative", test.ThetestDescription(), "Field1")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinOptNative(r, false)
	var unmarshalled []float64
	f := FuncHandler{
		Float64Func: func(v float64) {
			unmarshalled = append(unmarshalled, v)
		},
	}
	unmarshaler := fieldpath.NewFloat64Unmarshaler(fp, f)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	compiled := fieldpath.Compile(unmarshaler)
	err = compiled.Unmarshal(buf)
	if err != nil {
		panic(err)
	}

	if len(unmarshalled) > 0 {
		if !reflect.DeepEqual(unmarshalled[0], *p.Field1) {
			panic(fmt.Errorf("unmarshalled %v != p.Field1 %v", unmarshalled[0], *p.Field1))
		}
	} else {
		if p.Field1 != nil {
			t.Fatalf("Expected nil")
		}
	}

}

type sorterNinOptNativeFloat64 []*test.NinOptNative

func (this sorterNinOptNativeFloat64) Less(i, j int) bool {
	if !(this[i].Field1 != nil) {
		return true
	}
	if !(this[j].Field1 != nil) {
		return false
	}

	return *this[i].Field1 < *this[j].Field1

}

func (this sorterNinOptNativeFloat64) Len() int {
	return len(this)
}

func (this sorterNinOptNativeFloat64) Swap(i, j int) {
	this[i], this[j] = this[j], this[i]
}

func TestSortNinOptNativeFloat64(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	l := r.Intn(1000)
	unmarshalled := make(sorterNinOptNativeFloat64, l)
	marshalled := make([][]byte, l)
	var err error
	for i := 0; i < l; i++ {
		unmarshalled[i] = test.NewPopulatedNinOptNative(r, false)
		marshalled[i], err = proto.Marshal(unmarshalled[i])
		if err != nil {
			panic(err)
		}
	}
	sort.Sort(unmarshalled)
	fp, err := fieldpath.NewFloat64SinglePath("test", "NinOptNative", test.ThetestDescription(), "Field1")
	if err != nil {
		panic(err)
	}
	fpsorter := fieldpath.NewFloat64Sorter(&sortable{marshalled}, fp)
	sort.Sort(fpsorter)
	struct2 := &test.NinOptNative{}
	for i := 0; i < l; i++ {
		err = proto.Unmarshal(marshalled[i], struct2)
		if err != nil {
			panic(err)
		}
		if err := unmarshalled[i].VerboseEqual(struct2); err != nil {
			panic(err)
		}
	}
}

func TestUnmarshalFirstNinOptStructFloat64(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewFloat64SinglePath("test", "NinOptStruct", test.ThetestDescription(), "Field4.Field1")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinOptStruct(r, false)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	unmarshalled, err := fp.UnmarshalFirst(buf)
	if err != nil {
		panic(err)
	}
	if !(p.Field4 != nil && p.Field4.Field1 != nil) {
		if unmarshalled != nil {
			t.Fatalf("unmarshalled != nil")
		}
		return
	}
	if unmarshalled == nil {
		t.Fatalf("ummarshalled == nil")
	}
	if *unmarshalled != *p.Field4.Field1 {
		t.Fatalf("%v != %v", *unmarshalled, *p.Field4.Field1)
	}
}

func TestUnmarshalNinOptStructFloat64(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewFloat64SinglePath("test", "NinOptStruct", test.ThetestDescription(), "Field4.Field1")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinOptStruct(r, false)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	unmarshalled, err := fp.Unmarshal(buf)
	if err != nil {
		panic(err)
	}
	if !(p.Field4 != nil && p.Field4.Field1 != nil) {
		if unmarshalled != nil {
			t.Fatalf("unmarshalled != nil")
		}
		return
	}
	if unmarshalled == nil {
		t.Fatalf("ummarshalled == nil")
	}
	if *unmarshalled != *p.Field4.Field1 {
		t.Fatalf("%v != %v", *unmarshalled, *p.Field4.Field1)
	}
}

func TestCompiledNinOptStructFloat64(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewFloat64Path("test", "NinOptStruct", test.ThetestDescription(), "Field4.Field1")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinOptStruct(r, false)
	var unmarshalled []float64
	f := FuncHandler{
		Float64Func: func(v float64) {
			unmarshalled = append(unmarshalled, v)
		},
	}
	unmarshaler := fieldpath.NewFloat64Unmarshaler(fp, f)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	compiled := fieldpath.Compile(unmarshaler)
	err = compiled.Unmarshal(buf)
	if err != nil {
		panic(err)
	}

	if len(unmarshalled) > 0 {
		if !reflect.DeepEqual(unmarshalled[0], *p.Field4.Field1) {
			panic(fmt.Errorf("unmarshalled %v != p.Field4.Field1 %v", unmarshalled[0], *p.Field4.Field1))
		}
	} else {
		if p.Field4 != nil && p.Field4.Field1 != nil {
			t.Fatalf("Expected nil")
		}
	}

}

type sorterNinOptStructFloat64 []*test.NinOptStruct

func (this sorterNinOptStructFloat64) Less(i, j int) bool {
	if !(this[i].Field4 != nil && this[i].Field4.Field1 != nil) {
		return true
	}
	if !(this[j].Field4 != nil && this[j].Field4.Field1 != nil) {
		return false
	}

	return *this[i].Field4.Field1 < *this[j].Field4.Field1

}

func (this sorterNinOptStructFloat64) Len() int {
	return len(this)
}

func (this sorterNinOptStructFloat64) Swap(i, j int) {
	this[i], this[j] = this[j], this[i]
}

func TestSortNinOptStructFloat64(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	l := r.Intn(1000)
	unmarshalled := make(sorterNinOptStructFloat64, l)
	marshalled := make([][]byte, l)
	var err error
	for i := 0; i < l; i++ {
		unmarshalled[i] = test.NewPopulatedNinOptStruct(r, false)
		marshalled[i], err = proto.Marshal(unmarshalled[i])
		if err != nil {
			panic(err)
		}
	}
	sort.Sort(unmarshalled)
	fp, err := fieldpath.NewFloat64SinglePath("test", "NinOptStruct", test.ThetestDescription(), "Field4.Field1")
	if err != nil {
		panic(err)
	}
	fpsorter := fieldpath.NewFloat64Sorter(&sortable{marshalled}, fp)
	sort.Sort(fpsorter)
	struct2 := &test.NinOptStruct{}
	for i := 0; i < l; i++ {
		err = proto.Unmarshal(marshalled[i], struct2)
		if err != nil {
			panic(err)
		}
		if err := unmarshalled[i].VerboseEqual(struct2); err != nil {
			panic(err)
		}
	}
}

func TestCompiledNinRepPackedNativeFloat64(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewPackedFloat64Path("test", "NinRepPackedNative", test.ThetestDescription(), "Field1")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinRepPackedNative(r, false)
	var unmarshalled []float64
	f := FuncHandler{
		Float64Func: func(v float64) {
			unmarshalled = append(unmarshalled, v)
		},
	}
	unmarshaler := fieldpath.NewPackedFloat64Unmarshaler(fp, f)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	compiled := fieldpath.Compile(unmarshaler)
	err = compiled.Unmarshal(buf)
	if err != nil {
		panic(err)
	}

	if !reflect.DeepEqual(unmarshalled, p.Field1) {
		if len(unmarshalled) == 0 && len(p.Field1) == 0 {
			return
		}
		panic(fmt.Errorf("unmarshalled %#v != p.Field1 %#v", unmarshalled, p.Field1))
	}

}

func TestCompiledNinRepNativeFloat64(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewFloat64Path("test", "NinRepNative", test.ThetestDescription(), "Field1")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinRepNative(r, false)
	var unmarshalled []float64
	f := FuncHandler{
		Float64Func: func(v float64) {
			unmarshalled = append(unmarshalled, v)
		},
	}
	unmarshaler := fieldpath.NewFloat64Unmarshaler(fp, f)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	compiled := fieldpath.Compile(unmarshaler)
	err = compiled.Unmarshal(buf)
	if err != nil {
		panic(err)
	}

	if !reflect.DeepEqual(unmarshalled, p.Field1) {
		if len(unmarshalled) == 0 && len(p.Field1) == 0 {
			return
		}
		panic(fmt.Errorf("unmarshalled %#v != p.Field1 %#v", unmarshalled, p.Field1))
	}

}

func TestCompiledNinNestedStructFloat64(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewFloat64Path("test", "NinNestedStruct", test.ThetestDescription(), "Field1.Field4.Field1")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinNestedStruct(r, false)
	var unmarshalled []float64
	f := FuncHandler{
		Float64Func: func(v float64) {
			unmarshalled = append(unmarshalled, v)
		},
	}
	unmarshaler := fieldpath.NewFloat64Unmarshaler(fp, f)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	compiled := fieldpath.Compile(unmarshaler)
	err = compiled.Unmarshal(buf)
	if err != nil {
		panic(err)
	}

	if len(unmarshalled) > 0 {
		if !reflect.DeepEqual(unmarshalled[0], *p.Field1.Field4.Field1) {
			panic(fmt.Errorf("unmarshalled %v != p.Field1.Field4.Field1 %v", unmarshalled[0], *p.Field1.Field4.Field1))
		}
	} else {
		if p.Field1 != nil && p.Field1.Field4 != nil && p.Field1.Field4.Field1 != nil {
			t.Fatalf("Expected nil")
		}
	}

}

func TestUnmarshalFirstNinOptNativeFloat32(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewFloat32SinglePath("test", "NinOptNative", test.ThetestDescription(), "Field2")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinOptNative(r, false)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	unmarshalled, err := fp.UnmarshalFirst(buf)
	if err != nil {
		panic(err)
	}
	if !(p.Field2 != nil) {
		if unmarshalled != nil {
			t.Fatalf("unmarshalled != nil")
		}
		return
	}
	if unmarshalled == nil {
		t.Fatalf("ummarshalled == nil")
	}
	if *unmarshalled != *p.Field2 {
		t.Fatalf("%v != %v", *unmarshalled, *p.Field2)
	}
}

func TestUnmarshalNinOptNativeFloat32(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewFloat32SinglePath("test", "NinOptNative", test.ThetestDescription(), "Field2")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinOptNative(r, false)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	unmarshalled, err := fp.Unmarshal(buf)
	if err != nil {
		panic(err)
	}
	if !(p.Field2 != nil) {
		if unmarshalled != nil {
			t.Fatalf("unmarshalled != nil")
		}
		return
	}
	if unmarshalled == nil {
		t.Fatalf("ummarshalled == nil")
	}
	if *unmarshalled != *p.Field2 {
		t.Fatalf("%v != %v", *unmarshalled, *p.Field2)
	}
}

func TestCompiledNinOptNativeFloat32(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewFloat32Path("test", "NinOptNative", test.ThetestDescription(), "Field2")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinOptNative(r, false)
	var unmarshalled []float32
	f := FuncHandler{
		Float32Func: func(v float32) {
			unmarshalled = append(unmarshalled, v)
		},
	}
	unmarshaler := fieldpath.NewFloat32Unmarshaler(fp, f)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	compiled := fieldpath.Compile(unmarshaler)
	err = compiled.Unmarshal(buf)
	if err != nil {
		panic(err)
	}

	if len(unmarshalled) > 0 {
		if !reflect.DeepEqual(unmarshalled[0], *p.Field2) {
			panic(fmt.Errorf("unmarshalled %v != p.Field2 %v", unmarshalled[0], *p.Field2))
		}
	} else {
		if p.Field2 != nil {
			t.Fatalf("Expected nil")
		}
	}

}

type sorterNinOptNativeFloat32 []*test.NinOptNative

func (this sorterNinOptNativeFloat32) Less(i, j int) bool {
	if !(this[i].Field2 != nil) {
		return true
	}
	if !(this[j].Field2 != nil) {
		return false
	}

	return *this[i].Field2 < *this[j].Field2

}

func (this sorterNinOptNativeFloat32) Len() int {
	return len(this)
}

func (this sorterNinOptNativeFloat32) Swap(i, j int) {
	this[i], this[j] = this[j], this[i]
}

func TestSortNinOptNativeFloat32(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	l := r.Intn(1000)
	unmarshalled := make(sorterNinOptNativeFloat32, l)
	marshalled := make([][]byte, l)
	var err error
	for i := 0; i < l; i++ {
		unmarshalled[i] = test.NewPopulatedNinOptNative(r, false)
		marshalled[i], err = proto.Marshal(unmarshalled[i])
		if err != nil {
			panic(err)
		}
	}
	sort.Sort(unmarshalled)
	fp, err := fieldpath.NewFloat32SinglePath("test", "NinOptNative", test.ThetestDescription(), "Field2")
	if err != nil {
		panic(err)
	}
	fpsorter := fieldpath.NewFloat32Sorter(&sortable{marshalled}, fp)
	sort.Sort(fpsorter)
	struct2 := &test.NinOptNative{}
	for i := 0; i < l; i++ {
		err = proto.Unmarshal(marshalled[i], struct2)
		if err != nil {
			panic(err)
		}
		if err := unmarshalled[i].VerboseEqual(struct2); err != nil {
			panic(err)
		}
	}
}

func TestUnmarshalFirstNinOptStructFloat32(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewFloat32SinglePath("test", "NinOptStruct", test.ThetestDescription(), "Field4.Field2")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinOptStruct(r, false)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	unmarshalled, err := fp.UnmarshalFirst(buf)
	if err != nil {
		panic(err)
	}
	if !(p.Field4 != nil && p.Field4.Field2 != nil) {
		if unmarshalled != nil {
			t.Fatalf("unmarshalled != nil")
		}
		return
	}
	if unmarshalled == nil {
		t.Fatalf("ummarshalled == nil")
	}
	if *unmarshalled != *p.Field4.Field2 {
		t.Fatalf("%v != %v", *unmarshalled, *p.Field4.Field2)
	}
}

func TestUnmarshalNinOptStructFloat32(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewFloat32SinglePath("test", "NinOptStruct", test.ThetestDescription(), "Field4.Field2")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinOptStruct(r, false)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	unmarshalled, err := fp.Unmarshal(buf)
	if err != nil {
		panic(err)
	}
	if !(p.Field4 != nil && p.Field4.Field2 != nil) {
		if unmarshalled != nil {
			t.Fatalf("unmarshalled != nil")
		}
		return
	}
	if unmarshalled == nil {
		t.Fatalf("ummarshalled == nil")
	}
	if *unmarshalled != *p.Field4.Field2 {
		t.Fatalf("%v != %v", *unmarshalled, *p.Field4.Field2)
	}
}

func TestCompiledNinOptStructFloat32(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewFloat32Path("test", "NinOptStruct", test.ThetestDescription(), "Field4.Field2")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinOptStruct(r, false)
	var unmarshalled []float32
	f := FuncHandler{
		Float32Func: func(v float32) {
			unmarshalled = append(unmarshalled, v)
		},
	}
	unmarshaler := fieldpath.NewFloat32Unmarshaler(fp, f)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	compiled := fieldpath.Compile(unmarshaler)
	err = compiled.Unmarshal(buf)
	if err != nil {
		panic(err)
	}

	if len(unmarshalled) > 0 {
		if !reflect.DeepEqual(unmarshalled[0], *p.Field4.Field2) {
			panic(fmt.Errorf("unmarshalled %v != p.Field4.Field2 %v", unmarshalled[0], *p.Field4.Field2))
		}
	} else {
		if p.Field4 != nil && p.Field4.Field2 != nil {
			t.Fatalf("Expected nil")
		}
	}

}

type sorterNinOptStructFloat32 []*test.NinOptStruct

func (this sorterNinOptStructFloat32) Less(i, j int) bool {
	if !(this[i].Field4 != nil && this[i].Field4.Field2 != nil) {
		return true
	}
	if !(this[j].Field4 != nil && this[j].Field4.Field2 != nil) {
		return false
	}

	return *this[i].Field4.Field2 < *this[j].Field4.Field2

}

func (this sorterNinOptStructFloat32) Len() int {
	return len(this)
}

func (this sorterNinOptStructFloat32) Swap(i, j int) {
	this[i], this[j] = this[j], this[i]
}

func TestSortNinOptStructFloat32(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	l := r.Intn(1000)
	unmarshalled := make(sorterNinOptStructFloat32, l)
	marshalled := make([][]byte, l)
	var err error
	for i := 0; i < l; i++ {
		unmarshalled[i] = test.NewPopulatedNinOptStruct(r, false)
		marshalled[i], err = proto.Marshal(unmarshalled[i])
		if err != nil {
			panic(err)
		}
	}
	sort.Sort(unmarshalled)
	fp, err := fieldpath.NewFloat32SinglePath("test", "NinOptStruct", test.ThetestDescription(), "Field4.Field2")
	if err != nil {
		panic(err)
	}
	fpsorter := fieldpath.NewFloat32Sorter(&sortable{marshalled}, fp)
	sort.Sort(fpsorter)
	struct2 := &test.NinOptStruct{}
	for i := 0; i < l; i++ {
		err = proto.Unmarshal(marshalled[i], struct2)
		if err != nil {
			panic(err)
		}
		if err := unmarshalled[i].VerboseEqual(struct2); err != nil {
			panic(err)
		}
	}
}

func TestCompiledNinRepPackedNativeFloat32(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewPackedFloat32Path("test", "NinRepPackedNative", test.ThetestDescription(), "Field2")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinRepPackedNative(r, false)
	var unmarshalled []float32
	f := FuncHandler{
		Float32Func: func(v float32) {
			unmarshalled = append(unmarshalled, v)
		},
	}
	unmarshaler := fieldpath.NewPackedFloat32Unmarshaler(fp, f)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	compiled := fieldpath.Compile(unmarshaler)
	err = compiled.Unmarshal(buf)
	if err != nil {
		panic(err)
	}

	if !reflect.DeepEqual(unmarshalled, p.Field2) {
		if len(unmarshalled) == 0 && len(p.Field2) == 0 {
			return
		}
		panic(fmt.Errorf("unmarshalled %#v != p.Field2 %#v", unmarshalled, p.Field2))
	}

}

func TestCompiledNinRepNativeFloat32(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewFloat32Path("test", "NinRepNative", test.ThetestDescription(), "Field2")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinRepNative(r, false)
	var unmarshalled []float32
	f := FuncHandler{
		Float32Func: func(v float32) {
			unmarshalled = append(unmarshalled, v)
		},
	}
	unmarshaler := fieldpath.NewFloat32Unmarshaler(fp, f)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	compiled := fieldpath.Compile(unmarshaler)
	err = compiled.Unmarshal(buf)
	if err != nil {
		panic(err)
	}

	if !reflect.DeepEqual(unmarshalled, p.Field2) {
		if len(unmarshalled) == 0 && len(p.Field2) == 0 {
			return
		}
		panic(fmt.Errorf("unmarshalled %#v != p.Field2 %#v", unmarshalled, p.Field2))
	}

}

func TestCompiledNinNestedStructFloat32(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewFloat32Path("test", "NinNestedStruct", test.ThetestDescription(), "Field1.Field4.Field2")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinNestedStruct(r, false)
	var unmarshalled []float32
	f := FuncHandler{
		Float32Func: func(v float32) {
			unmarshalled = append(unmarshalled, v)
		},
	}
	unmarshaler := fieldpath.NewFloat32Unmarshaler(fp, f)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	compiled := fieldpath.Compile(unmarshaler)
	err = compiled.Unmarshal(buf)
	if err != nil {
		panic(err)
	}

	if len(unmarshalled) > 0 {
		if !reflect.DeepEqual(unmarshalled[0], *p.Field1.Field4.Field2) {
			panic(fmt.Errorf("unmarshalled %v != p.Field1.Field4.Field2 %v", unmarshalled[0], *p.Field1.Field4.Field2))
		}
	} else {
		if p.Field1 != nil && p.Field1.Field4 != nil && p.Field1.Field4.Field2 != nil {
			t.Fatalf("Expected nil")
		}
	}

}

func TestUnmarshalFirstNinOptNativeInt32(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewInt32SinglePath("test", "NinOptNative", test.ThetestDescription(), "Field3")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinOptNative(r, false)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	unmarshalled, err := fp.UnmarshalFirst(buf)
	if err != nil {
		panic(err)
	}
	if !(p.Field3 != nil) {
		if unmarshalled != nil {
			t.Fatalf("unmarshalled != nil")
		}
		return
	}
	if unmarshalled == nil {
		t.Fatalf("ummarshalled == nil")
	}
	if *unmarshalled != *p.Field3 {
		t.Fatalf("%v != %v", *unmarshalled, *p.Field3)
	}
}

func TestUnmarshalNinOptNativeInt32(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewInt32SinglePath("test", "NinOptNative", test.ThetestDescription(), "Field3")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinOptNative(r, false)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	unmarshalled, err := fp.Unmarshal(buf)
	if err != nil {
		panic(err)
	}
	if !(p.Field3 != nil) {
		if unmarshalled != nil {
			t.Fatalf("unmarshalled != nil")
		}
		return
	}
	if unmarshalled == nil {
		t.Fatalf("ummarshalled == nil")
	}
	if *unmarshalled != *p.Field3 {
		t.Fatalf("%v != %v", *unmarshalled, *p.Field3)
	}
}

func TestCompiledNinOptNativeInt32(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewInt32Path("test", "NinOptNative", test.ThetestDescription(), "Field3")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinOptNative(r, false)
	var unmarshalled []int32
	f := FuncHandler{
		Int32Func: func(v int32) {
			unmarshalled = append(unmarshalled, v)
		},
	}
	unmarshaler := fieldpath.NewInt32Unmarshaler(fp, f)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	compiled := fieldpath.Compile(unmarshaler)
	err = compiled.Unmarshal(buf)
	if err != nil {
		panic(err)
	}

	if len(unmarshalled) > 0 {
		if !reflect.DeepEqual(unmarshalled[0], *p.Field3) {
			panic(fmt.Errorf("unmarshalled %v != p.Field3 %v", unmarshalled[0], *p.Field3))
		}
	} else {
		if p.Field3 != nil {
			t.Fatalf("Expected nil")
		}
	}

}

type sorterNinOptNativeInt32 []*test.NinOptNative

func (this sorterNinOptNativeInt32) Less(i, j int) bool {
	if !(this[i].Field3 != nil) {
		return true
	}
	if !(this[j].Field3 != nil) {
		return false
	}

	return *this[i].Field3 < *this[j].Field3

}

func (this sorterNinOptNativeInt32) Len() int {
	return len(this)
}

func (this sorterNinOptNativeInt32) Swap(i, j int) {
	this[i], this[j] = this[j], this[i]
}

func TestSortNinOptNativeInt32(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	l := r.Intn(1000)
	unmarshalled := make(sorterNinOptNativeInt32, l)
	marshalled := make([][]byte, l)
	var err error
	for i := 0; i < l; i++ {
		unmarshalled[i] = test.NewPopulatedNinOptNative(r, false)
		marshalled[i], err = proto.Marshal(unmarshalled[i])
		if err != nil {
			panic(err)
		}
	}
	sort.Sort(unmarshalled)
	fp, err := fieldpath.NewInt32SinglePath("test", "NinOptNative", test.ThetestDescription(), "Field3")
	if err != nil {
		panic(err)
	}
	fpsorter := fieldpath.NewInt32Sorter(&sortable{marshalled}, fp)
	sort.Sort(fpsorter)
	struct2 := &test.NinOptNative{}
	for i := 0; i < l; i++ {
		err = proto.Unmarshal(marshalled[i], struct2)
		if err != nil {
			panic(err)
		}
		if err := unmarshalled[i].VerboseEqual(struct2); err != nil {
			panic(err)
		}
	}
}

func TestUnmarshalFirstNinOptStructInt32(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewInt32SinglePath("test", "NinOptStruct", test.ThetestDescription(), "Field4.Field3")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinOptStruct(r, false)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	unmarshalled, err := fp.UnmarshalFirst(buf)
	if err != nil {
		panic(err)
	}
	if !(p.Field4 != nil && p.Field4.Field3 != nil) {
		if unmarshalled != nil {
			t.Fatalf("unmarshalled != nil")
		}
		return
	}
	if unmarshalled == nil {
		t.Fatalf("ummarshalled == nil")
	}
	if *unmarshalled != *p.Field4.Field3 {
		t.Fatalf("%v != %v", *unmarshalled, *p.Field4.Field3)
	}
}

func TestUnmarshalNinOptStructInt32(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewInt32SinglePath("test", "NinOptStruct", test.ThetestDescription(), "Field4.Field3")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinOptStruct(r, false)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	unmarshalled, err := fp.Unmarshal(buf)
	if err != nil {
		panic(err)
	}
	if !(p.Field4 != nil && p.Field4.Field3 != nil) {
		if unmarshalled != nil {
			t.Fatalf("unmarshalled != nil")
		}
		return
	}
	if unmarshalled == nil {
		t.Fatalf("ummarshalled == nil")
	}
	if *unmarshalled != *p.Field4.Field3 {
		t.Fatalf("%v != %v", *unmarshalled, *p.Field4.Field3)
	}
}

func TestCompiledNinOptStructInt32(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewInt32Path("test", "NinOptStruct", test.ThetestDescription(), "Field4.Field3")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinOptStruct(r, false)
	var unmarshalled []int32
	f := FuncHandler{
		Int32Func: func(v int32) {
			unmarshalled = append(unmarshalled, v)
		},
	}
	unmarshaler := fieldpath.NewInt32Unmarshaler(fp, f)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	compiled := fieldpath.Compile(unmarshaler)
	err = compiled.Unmarshal(buf)
	if err != nil {
		panic(err)
	}

	if len(unmarshalled) > 0 {
		if !reflect.DeepEqual(unmarshalled[0], *p.Field4.Field3) {
			panic(fmt.Errorf("unmarshalled %v != p.Field4.Field3 %v", unmarshalled[0], *p.Field4.Field3))
		}
	} else {
		if p.Field4 != nil && p.Field4.Field3 != nil {
			t.Fatalf("Expected nil")
		}
	}

}

type sorterNinOptStructInt32 []*test.NinOptStruct

func (this sorterNinOptStructInt32) Less(i, j int) bool {
	if !(this[i].Field4 != nil && this[i].Field4.Field3 != nil) {
		return true
	}
	if !(this[j].Field4 != nil && this[j].Field4.Field3 != nil) {
		return false
	}

	return *this[i].Field4.Field3 < *this[j].Field4.Field3

}

func (this sorterNinOptStructInt32) Len() int {
	return len(this)
}

func (this sorterNinOptStructInt32) Swap(i, j int) {
	this[i], this[j] = this[j], this[i]
}

func TestSortNinOptStructInt32(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	l := r.Intn(1000)
	unmarshalled := make(sorterNinOptStructInt32, l)
	marshalled := make([][]byte, l)
	var err error
	for i := 0; i < l; i++ {
		unmarshalled[i] = test.NewPopulatedNinOptStruct(r, false)
		marshalled[i], err = proto.Marshal(unmarshalled[i])
		if err != nil {
			panic(err)
		}
	}
	sort.Sort(unmarshalled)
	fp, err := fieldpath.NewInt32SinglePath("test", "NinOptStruct", test.ThetestDescription(), "Field4.Field3")
	if err != nil {
		panic(err)
	}
	fpsorter := fieldpath.NewInt32Sorter(&sortable{marshalled}, fp)
	sort.Sort(fpsorter)
	struct2 := &test.NinOptStruct{}
	for i := 0; i < l; i++ {
		err = proto.Unmarshal(marshalled[i], struct2)
		if err != nil {
			panic(err)
		}
		if err := unmarshalled[i].VerboseEqual(struct2); err != nil {
			panic(err)
		}
	}
}

func TestCompiledNinRepPackedNativeInt32(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewPackedInt32Path("test", "NinRepPackedNative", test.ThetestDescription(), "Field3")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinRepPackedNative(r, false)
	var unmarshalled []int32
	f := FuncHandler{
		Int32Func: func(v int32) {
			unmarshalled = append(unmarshalled, v)
		},
	}
	unmarshaler := fieldpath.NewPackedInt32Unmarshaler(fp, f)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	compiled := fieldpath.Compile(unmarshaler)
	err = compiled.Unmarshal(buf)
	if err != nil {
		panic(err)
	}

	if !reflect.DeepEqual(unmarshalled, p.Field3) {
		if len(unmarshalled) == 0 && len(p.Field3) == 0 {
			return
		}
		panic(fmt.Errorf("unmarshalled %#v != p.Field3 %#v", unmarshalled, p.Field3))
	}

}

func TestCompiledNinRepNativeInt32(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewInt32Path("test", "NinRepNative", test.ThetestDescription(), "Field3")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinRepNative(r, false)
	var unmarshalled []int32
	f := FuncHandler{
		Int32Func: func(v int32) {
			unmarshalled = append(unmarshalled, v)
		},
	}
	unmarshaler := fieldpath.NewInt32Unmarshaler(fp, f)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	compiled := fieldpath.Compile(unmarshaler)
	err = compiled.Unmarshal(buf)
	if err != nil {
		panic(err)
	}

	if !reflect.DeepEqual(unmarshalled, p.Field3) {
		if len(unmarshalled) == 0 && len(p.Field3) == 0 {
			return
		}
		panic(fmt.Errorf("unmarshalled %#v != p.Field3 %#v", unmarshalled, p.Field3))
	}

}

func TestCompiledNinNestedStructInt32(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewInt32Path("test", "NinNestedStruct", test.ThetestDescription(), "Field1.Field4.Field3")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinNestedStruct(r, false)
	var unmarshalled []int32
	f := FuncHandler{
		Int32Func: func(v int32) {
			unmarshalled = append(unmarshalled, v)
		},
	}
	unmarshaler := fieldpath.NewInt32Unmarshaler(fp, f)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	compiled := fieldpath.Compile(unmarshaler)
	err = compiled.Unmarshal(buf)
	if err != nil {
		panic(err)
	}

	if len(unmarshalled) > 0 {
		if !reflect.DeepEqual(unmarshalled[0], *p.Field1.Field4.Field3) {
			panic(fmt.Errorf("unmarshalled %v != p.Field1.Field4.Field3 %v", unmarshalled[0], *p.Field1.Field4.Field3))
		}
	} else {
		if p.Field1 != nil && p.Field1.Field4 != nil && p.Field1.Field4.Field3 != nil {
			t.Fatalf("Expected nil")
		}
	}

}

func TestUnmarshalFirstNinOptNativeInt64(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewInt64SinglePath("test", "NinOptNative", test.ThetestDescription(), "Field4")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinOptNative(r, false)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	unmarshalled, err := fp.UnmarshalFirst(buf)
	if err != nil {
		panic(err)
	}
	if !(p.Field4 != nil) {
		if unmarshalled != nil {
			t.Fatalf("unmarshalled != nil")
		}
		return
	}
	if unmarshalled == nil {
		t.Fatalf("ummarshalled == nil")
	}
	if *unmarshalled != *p.Field4 {
		t.Fatalf("%v != %v", *unmarshalled, *p.Field4)
	}
}

func TestUnmarshalNinOptNativeInt64(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewInt64SinglePath("test", "NinOptNative", test.ThetestDescription(), "Field4")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinOptNative(r, false)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	unmarshalled, err := fp.Unmarshal(buf)
	if err != nil {
		panic(err)
	}
	if !(p.Field4 != nil) {
		if unmarshalled != nil {
			t.Fatalf("unmarshalled != nil")
		}
		return
	}
	if unmarshalled == nil {
		t.Fatalf("ummarshalled == nil")
	}
	if *unmarshalled != *p.Field4 {
		t.Fatalf("%v != %v", *unmarshalled, *p.Field4)
	}
}

func TestCompiledNinOptNativeInt64(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewInt64Path("test", "NinOptNative", test.ThetestDescription(), "Field4")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinOptNative(r, false)
	var unmarshalled []int64
	f := FuncHandler{
		Int64Func: func(v int64) {
			unmarshalled = append(unmarshalled, v)
		},
	}
	unmarshaler := fieldpath.NewInt64Unmarshaler(fp, f)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	compiled := fieldpath.Compile(unmarshaler)
	err = compiled.Unmarshal(buf)
	if err != nil {
		panic(err)
	}

	if len(unmarshalled) > 0 {
		if !reflect.DeepEqual(unmarshalled[0], *p.Field4) {
			panic(fmt.Errorf("unmarshalled %v != p.Field4 %v", unmarshalled[0], *p.Field4))
		}
	} else {
		if p.Field4 != nil {
			t.Fatalf("Expected nil")
		}
	}

}

type sorterNinOptNativeInt64 []*test.NinOptNative

func (this sorterNinOptNativeInt64) Less(i, j int) bool {
	if !(this[i].Field4 != nil) {
		return true
	}
	if !(this[j].Field4 != nil) {
		return false
	}

	return *this[i].Field4 < *this[j].Field4

}

func (this sorterNinOptNativeInt64) Len() int {
	return len(this)
}

func (this sorterNinOptNativeInt64) Swap(i, j int) {
	this[i], this[j] = this[j], this[i]
}

func TestSortNinOptNativeInt64(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	l := r.Intn(1000)
	unmarshalled := make(sorterNinOptNativeInt64, l)
	marshalled := make([][]byte, l)
	var err error
	for i := 0; i < l; i++ {
		unmarshalled[i] = test.NewPopulatedNinOptNative(r, false)
		marshalled[i], err = proto.Marshal(unmarshalled[i])
		if err != nil {
			panic(err)
		}
	}
	sort.Sort(unmarshalled)
	fp, err := fieldpath.NewInt64SinglePath("test", "NinOptNative", test.ThetestDescription(), "Field4")
	if err != nil {
		panic(err)
	}
	fpsorter := fieldpath.NewInt64Sorter(&sortable{marshalled}, fp)
	sort.Sort(fpsorter)
	struct2 := &test.NinOptNative{}
	for i := 0; i < l; i++ {
		err = proto.Unmarshal(marshalled[i], struct2)
		if err != nil {
			panic(err)
		}
		if err := unmarshalled[i].VerboseEqual(struct2); err != nil {
			panic(err)
		}
	}
}

func TestUnmarshalFirstNinOptStructInt64(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewInt64SinglePath("test", "NinOptStruct", test.ThetestDescription(), "Field4.Field4")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinOptStruct(r, false)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	unmarshalled, err := fp.UnmarshalFirst(buf)
	if err != nil {
		panic(err)
	}
	if !(p.Field4 != nil && p.Field4.Field4 != nil) {
		if unmarshalled != nil {
			t.Fatalf("unmarshalled != nil")
		}
		return
	}
	if unmarshalled == nil {
		t.Fatalf("ummarshalled == nil")
	}
	if *unmarshalled != *p.Field4.Field4 {
		t.Fatalf("%v != %v", *unmarshalled, *p.Field4.Field4)
	}
}

func TestUnmarshalNinOptStructInt64(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewInt64SinglePath("test", "NinOptStruct", test.ThetestDescription(), "Field4.Field4")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinOptStruct(r, false)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	unmarshalled, err := fp.Unmarshal(buf)
	if err != nil {
		panic(err)
	}
	if !(p.Field4 != nil && p.Field4.Field4 != nil) {
		if unmarshalled != nil {
			t.Fatalf("unmarshalled != nil")
		}
		return
	}
	if unmarshalled == nil {
		t.Fatalf("ummarshalled == nil")
	}
	if *unmarshalled != *p.Field4.Field4 {
		t.Fatalf("%v != %v", *unmarshalled, *p.Field4.Field4)
	}
}

func TestCompiledNinOptStructInt64(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewInt64Path("test", "NinOptStruct", test.ThetestDescription(), "Field4.Field4")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinOptStruct(r, false)
	var unmarshalled []int64
	f := FuncHandler{
		Int64Func: func(v int64) {
			unmarshalled = append(unmarshalled, v)
		},
	}
	unmarshaler := fieldpath.NewInt64Unmarshaler(fp, f)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	compiled := fieldpath.Compile(unmarshaler)
	err = compiled.Unmarshal(buf)
	if err != nil {
		panic(err)
	}

	if len(unmarshalled) > 0 {
		if !reflect.DeepEqual(unmarshalled[0], *p.Field4.Field4) {
			panic(fmt.Errorf("unmarshalled %v != p.Field4.Field4 %v", unmarshalled[0], *p.Field4.Field4))
		}
	} else {
		if p.Field4 != nil && p.Field4.Field4 != nil {
			t.Fatalf("Expected nil")
		}
	}

}

type sorterNinOptStructInt64 []*test.NinOptStruct

func (this sorterNinOptStructInt64) Less(i, j int) bool {
	if !(this[i].Field4 != nil && this[i].Field4.Field4 != nil) {
		return true
	}
	if !(this[j].Field4 != nil && this[j].Field4.Field4 != nil) {
		return false
	}

	return *this[i].Field4.Field4 < *this[j].Field4.Field4

}

func (this sorterNinOptStructInt64) Len() int {
	return len(this)
}

func (this sorterNinOptStructInt64) Swap(i, j int) {
	this[i], this[j] = this[j], this[i]
}

func TestSortNinOptStructInt64(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	l := r.Intn(1000)
	unmarshalled := make(sorterNinOptStructInt64, l)
	marshalled := make([][]byte, l)
	var err error
	for i := 0; i < l; i++ {
		unmarshalled[i] = test.NewPopulatedNinOptStruct(r, false)
		marshalled[i], err = proto.Marshal(unmarshalled[i])
		if err != nil {
			panic(err)
		}
	}
	sort.Sort(unmarshalled)
	fp, err := fieldpath.NewInt64SinglePath("test", "NinOptStruct", test.ThetestDescription(), "Field4.Field4")
	if err != nil {
		panic(err)
	}
	fpsorter := fieldpath.NewInt64Sorter(&sortable{marshalled}, fp)
	sort.Sort(fpsorter)
	struct2 := &test.NinOptStruct{}
	for i := 0; i < l; i++ {
		err = proto.Unmarshal(marshalled[i], struct2)
		if err != nil {
			panic(err)
		}
		if err := unmarshalled[i].VerboseEqual(struct2); err != nil {
			panic(err)
		}
	}
}

func TestCompiledNinRepPackedNativeInt64(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewPackedInt64Path("test", "NinRepPackedNative", test.ThetestDescription(), "Field4")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinRepPackedNative(r, false)
	var unmarshalled []int64
	f := FuncHandler{
		Int64Func: func(v int64) {
			unmarshalled = append(unmarshalled, v)
		},
	}
	unmarshaler := fieldpath.NewPackedInt64Unmarshaler(fp, f)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	compiled := fieldpath.Compile(unmarshaler)
	err = compiled.Unmarshal(buf)
	if err != nil {
		panic(err)
	}

	if !reflect.DeepEqual(unmarshalled, p.Field4) {
		if len(unmarshalled) == 0 && len(p.Field4) == 0 {
			return
		}
		panic(fmt.Errorf("unmarshalled %#v != p.Field4 %#v", unmarshalled, p.Field4))
	}

}

func TestCompiledNinRepNativeInt64(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewInt64Path("test", "NinRepNative", test.ThetestDescription(), "Field4")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinRepNative(r, false)
	var unmarshalled []int64
	f := FuncHandler{
		Int64Func: func(v int64) {
			unmarshalled = append(unmarshalled, v)
		},
	}
	unmarshaler := fieldpath.NewInt64Unmarshaler(fp, f)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	compiled := fieldpath.Compile(unmarshaler)
	err = compiled.Unmarshal(buf)
	if err != nil {
		panic(err)
	}

	if !reflect.DeepEqual(unmarshalled, p.Field4) {
		if len(unmarshalled) == 0 && len(p.Field4) == 0 {
			return
		}
		panic(fmt.Errorf("unmarshalled %#v != p.Field4 %#v", unmarshalled, p.Field4))
	}

}

func TestCompiledNinNestedStructInt64(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewInt64Path("test", "NinNestedStruct", test.ThetestDescription(), "Field1.Field4.Field4")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinNestedStruct(r, false)
	var unmarshalled []int64
	f := FuncHandler{
		Int64Func: func(v int64) {
			unmarshalled = append(unmarshalled, v)
		},
	}
	unmarshaler := fieldpath.NewInt64Unmarshaler(fp, f)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	compiled := fieldpath.Compile(unmarshaler)
	err = compiled.Unmarshal(buf)
	if err != nil {
		panic(err)
	}

	if len(unmarshalled) > 0 {
		if !reflect.DeepEqual(unmarshalled[0], *p.Field1.Field4.Field4) {
			panic(fmt.Errorf("unmarshalled %v != p.Field1.Field4.Field4 %v", unmarshalled[0], *p.Field1.Field4.Field4))
		}
	} else {
		if p.Field1 != nil && p.Field1.Field4 != nil && p.Field1.Field4.Field4 != nil {
			t.Fatalf("Expected nil")
		}
	}

}

func TestUnmarshalFirstNinOptNativeUint64(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewUint64SinglePath("test", "NinOptNative", test.ThetestDescription(), "Field6")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinOptNative(r, false)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	unmarshalled, err := fp.UnmarshalFirst(buf)
	if err != nil {
		panic(err)
	}
	if !(p.Field6 != nil) {
		if unmarshalled != nil {
			t.Fatalf("unmarshalled != nil")
		}
		return
	}
	if unmarshalled == nil {
		t.Fatalf("ummarshalled == nil")
	}
	if *unmarshalled != *p.Field6 {
		t.Fatalf("%v != %v", *unmarshalled, *p.Field6)
	}
}

func TestUnmarshalNinOptNativeUint64(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewUint64SinglePath("test", "NinOptNative", test.ThetestDescription(), "Field6")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinOptNative(r, false)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	unmarshalled, err := fp.Unmarshal(buf)
	if err != nil {
		panic(err)
	}
	if !(p.Field6 != nil) {
		if unmarshalled != nil {
			t.Fatalf("unmarshalled != nil")
		}
		return
	}
	if unmarshalled == nil {
		t.Fatalf("ummarshalled == nil")
	}
	if *unmarshalled != *p.Field6 {
		t.Fatalf("%v != %v", *unmarshalled, *p.Field6)
	}
}

func TestCompiledNinOptNativeUint64(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewUint64Path("test", "NinOptNative", test.ThetestDescription(), "Field6")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinOptNative(r, false)
	var unmarshalled []uint64
	f := FuncHandler{
		Uint64Func: func(v uint64) {
			unmarshalled = append(unmarshalled, v)
		},
	}
	unmarshaler := fieldpath.NewUint64Unmarshaler(fp, f)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	compiled := fieldpath.Compile(unmarshaler)
	err = compiled.Unmarshal(buf)
	if err != nil {
		panic(err)
	}

	if len(unmarshalled) > 0 {
		if !reflect.DeepEqual(unmarshalled[0], *p.Field6) {
			panic(fmt.Errorf("unmarshalled %v != p.Field6 %v", unmarshalled[0], *p.Field6))
		}
	} else {
		if p.Field6 != nil {
			t.Fatalf("Expected nil")
		}
	}

}

type sorterNinOptNativeUint64 []*test.NinOptNative

func (this sorterNinOptNativeUint64) Less(i, j int) bool {
	if !(this[i].Field6 != nil) {
		return true
	}
	if !(this[j].Field6 != nil) {
		return false
	}

	return *this[i].Field6 < *this[j].Field6

}

func (this sorterNinOptNativeUint64) Len() int {
	return len(this)
}

func (this sorterNinOptNativeUint64) Swap(i, j int) {
	this[i], this[j] = this[j], this[i]
}

func TestSortNinOptNativeUint64(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	l := r.Intn(1000)
	unmarshalled := make(sorterNinOptNativeUint64, l)
	marshalled := make([][]byte, l)
	var err error
	for i := 0; i < l; i++ {
		unmarshalled[i] = test.NewPopulatedNinOptNative(r, false)
		marshalled[i], err = proto.Marshal(unmarshalled[i])
		if err != nil {
			panic(err)
		}
	}
	sort.Sort(unmarshalled)
	fp, err := fieldpath.NewUint64SinglePath("test", "NinOptNative", test.ThetestDescription(), "Field6")
	if err != nil {
		panic(err)
	}
	fpsorter := fieldpath.NewUint64Sorter(&sortable{marshalled}, fp)
	sort.Sort(fpsorter)
	struct2 := &test.NinOptNative{}
	for i := 0; i < l; i++ {
		err = proto.Unmarshal(marshalled[i], struct2)
		if err != nil {
			panic(err)
		}
		if err := unmarshalled[i].VerboseEqual(struct2); err != nil {
			panic(err)
		}
	}
}

func TestUnmarshalFirstNinOptStructUint64(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewUint64SinglePath("test", "NinOptStruct", test.ThetestDescription(), "Field4.Field6")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinOptStruct(r, false)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	unmarshalled, err := fp.UnmarshalFirst(buf)
	if err != nil {
		panic(err)
	}
	if !(p.Field4 != nil && p.Field4.Field6 != nil) {
		if unmarshalled != nil {
			t.Fatalf("unmarshalled != nil")
		}
		return
	}
	if unmarshalled == nil {
		t.Fatalf("ummarshalled == nil")
	}
	if *unmarshalled != *p.Field4.Field6 {
		t.Fatalf("%v != %v", *unmarshalled, *p.Field4.Field6)
	}
}

func TestUnmarshalNinOptStructUint64(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewUint64SinglePath("test", "NinOptStruct", test.ThetestDescription(), "Field4.Field6")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinOptStruct(r, false)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	unmarshalled, err := fp.Unmarshal(buf)
	if err != nil {
		panic(err)
	}
	if !(p.Field4 != nil && p.Field4.Field6 != nil) {
		if unmarshalled != nil {
			t.Fatalf("unmarshalled != nil")
		}
		return
	}
	if unmarshalled == nil {
		t.Fatalf("ummarshalled == nil")
	}
	if *unmarshalled != *p.Field4.Field6 {
		t.Fatalf("%v != %v", *unmarshalled, *p.Field4.Field6)
	}
}

func TestCompiledNinOptStructUint64(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewUint64Path("test", "NinOptStruct", test.ThetestDescription(), "Field4.Field6")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinOptStruct(r, false)
	var unmarshalled []uint64
	f := FuncHandler{
		Uint64Func: func(v uint64) {
			unmarshalled = append(unmarshalled, v)
		},
	}
	unmarshaler := fieldpath.NewUint64Unmarshaler(fp, f)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	compiled := fieldpath.Compile(unmarshaler)
	err = compiled.Unmarshal(buf)
	if err != nil {
		panic(err)
	}

	if len(unmarshalled) > 0 {
		if !reflect.DeepEqual(unmarshalled[0], *p.Field4.Field6) {
			panic(fmt.Errorf("unmarshalled %v != p.Field4.Field6 %v", unmarshalled[0], *p.Field4.Field6))
		}
	} else {
		if p.Field4 != nil && p.Field4.Field6 != nil {
			t.Fatalf("Expected nil")
		}
	}

}

type sorterNinOptStructUint64 []*test.NinOptStruct

func (this sorterNinOptStructUint64) Less(i, j int) bool {
	if !(this[i].Field4 != nil && this[i].Field4.Field6 != nil) {
		return true
	}
	if !(this[j].Field4 != nil && this[j].Field4.Field6 != nil) {
		return false
	}

	return *this[i].Field4.Field6 < *this[j].Field4.Field6

}

func (this sorterNinOptStructUint64) Len() int {
	return len(this)
}

func (this sorterNinOptStructUint64) Swap(i, j int) {
	this[i], this[j] = this[j], this[i]
}

func TestSortNinOptStructUint64(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	l := r.Intn(1000)
	unmarshalled := make(sorterNinOptStructUint64, l)
	marshalled := make([][]byte, l)
	var err error
	for i := 0; i < l; i++ {
		unmarshalled[i] = test.NewPopulatedNinOptStruct(r, false)
		marshalled[i], err = proto.Marshal(unmarshalled[i])
		if err != nil {
			panic(err)
		}
	}
	sort.Sort(unmarshalled)
	fp, err := fieldpath.NewUint64SinglePath("test", "NinOptStruct", test.ThetestDescription(), "Field4.Field6")
	if err != nil {
		panic(err)
	}
	fpsorter := fieldpath.NewUint64Sorter(&sortable{marshalled}, fp)
	sort.Sort(fpsorter)
	struct2 := &test.NinOptStruct{}
	for i := 0; i < l; i++ {
		err = proto.Unmarshal(marshalled[i], struct2)
		if err != nil {
			panic(err)
		}
		if err := unmarshalled[i].VerboseEqual(struct2); err != nil {
			panic(err)
		}
	}
}

func TestCompiledNinRepPackedNativeUint64(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewPackedUint64Path("test", "NinRepPackedNative", test.ThetestDescription(), "Field6")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinRepPackedNative(r, false)
	var unmarshalled []uint64
	f := FuncHandler{
		Uint64Func: func(v uint64) {
			unmarshalled = append(unmarshalled, v)
		},
	}
	unmarshaler := fieldpath.NewPackedUint64Unmarshaler(fp, f)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	compiled := fieldpath.Compile(unmarshaler)
	err = compiled.Unmarshal(buf)
	if err != nil {
		panic(err)
	}

	if !reflect.DeepEqual(unmarshalled, p.Field6) {
		if len(unmarshalled) == 0 && len(p.Field6) == 0 {
			return
		}
		panic(fmt.Errorf("unmarshalled %#v != p.Field6 %#v", unmarshalled, p.Field6))
	}

}

func TestCompiledNinRepNativeUint64(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewUint64Path("test", "NinRepNative", test.ThetestDescription(), "Field6")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinRepNative(r, false)
	var unmarshalled []uint64
	f := FuncHandler{
		Uint64Func: func(v uint64) {
			unmarshalled = append(unmarshalled, v)
		},
	}
	unmarshaler := fieldpath.NewUint64Unmarshaler(fp, f)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	compiled := fieldpath.Compile(unmarshaler)
	err = compiled.Unmarshal(buf)
	if err != nil {
		panic(err)
	}

	if !reflect.DeepEqual(unmarshalled, p.Field6) {
		if len(unmarshalled) == 0 && len(p.Field6) == 0 {
			return
		}
		panic(fmt.Errorf("unmarshalled %#v != p.Field6 %#v", unmarshalled, p.Field6))
	}

}

func TestCompiledNinNestedStructUint64(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewUint64Path("test", "NinNestedStruct", test.ThetestDescription(), "Field1.Field4.Field6")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinNestedStruct(r, false)
	var unmarshalled []uint64
	f := FuncHandler{
		Uint64Func: func(v uint64) {
			unmarshalled = append(unmarshalled, v)
		},
	}
	unmarshaler := fieldpath.NewUint64Unmarshaler(fp, f)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	compiled := fieldpath.Compile(unmarshaler)
	err = compiled.Unmarshal(buf)
	if err != nil {
		panic(err)
	}

	if len(unmarshalled) > 0 {
		if !reflect.DeepEqual(unmarshalled[0], *p.Field1.Field4.Field6) {
			panic(fmt.Errorf("unmarshalled %v != p.Field1.Field4.Field6 %v", unmarshalled[0], *p.Field1.Field4.Field6))
		}
	} else {
		if p.Field1 != nil && p.Field1.Field4 != nil && p.Field1.Field4.Field6 != nil {
			t.Fatalf("Expected nil")
		}
	}

}

func TestUnmarshalFirstNinOptNativeUint32(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewUint32SinglePath("test", "NinOptNative", test.ThetestDescription(), "Field5")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinOptNative(r, false)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	unmarshalled, err := fp.UnmarshalFirst(buf)
	if err != nil {
		panic(err)
	}
	if !(p.Field5 != nil) {
		if unmarshalled != nil {
			t.Fatalf("unmarshalled != nil")
		}
		return
	}
	if unmarshalled == nil {
		t.Fatalf("ummarshalled == nil")
	}
	if *unmarshalled != *p.Field5 {
		t.Fatalf("%v != %v", *unmarshalled, *p.Field5)
	}
}

func TestUnmarshalNinOptNativeUint32(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewUint32SinglePath("test", "NinOptNative", test.ThetestDescription(), "Field5")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinOptNative(r, false)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	unmarshalled, err := fp.Unmarshal(buf)
	if err != nil {
		panic(err)
	}
	if !(p.Field5 != nil) {
		if unmarshalled != nil {
			t.Fatalf("unmarshalled != nil")
		}
		return
	}
	if unmarshalled == nil {
		t.Fatalf("ummarshalled == nil")
	}
	if *unmarshalled != *p.Field5 {
		t.Fatalf("%v != %v", *unmarshalled, *p.Field5)
	}
}

func TestCompiledNinOptNativeUint32(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewUint32Path("test", "NinOptNative", test.ThetestDescription(), "Field5")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinOptNative(r, false)
	var unmarshalled []uint32
	f := FuncHandler{
		Uint32Func: func(v uint32) {
			unmarshalled = append(unmarshalled, v)
		},
	}
	unmarshaler := fieldpath.NewUint32Unmarshaler(fp, f)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	compiled := fieldpath.Compile(unmarshaler)
	err = compiled.Unmarshal(buf)
	if err != nil {
		panic(err)
	}

	if len(unmarshalled) > 0 {
		if !reflect.DeepEqual(unmarshalled[0], *p.Field5) {
			panic(fmt.Errorf("unmarshalled %v != p.Field5 %v", unmarshalled[0], *p.Field5))
		}
	} else {
		if p.Field5 != nil {
			t.Fatalf("Expected nil")
		}
	}

}

type sorterNinOptNativeUint32 []*test.NinOptNative

func (this sorterNinOptNativeUint32) Less(i, j int) bool {
	if !(this[i].Field5 != nil) {
		return true
	}
	if !(this[j].Field5 != nil) {
		return false
	}

	return *this[i].Field5 < *this[j].Field5

}

func (this sorterNinOptNativeUint32) Len() int {
	return len(this)
}

func (this sorterNinOptNativeUint32) Swap(i, j int) {
	this[i], this[j] = this[j], this[i]
}

func TestSortNinOptNativeUint32(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	l := r.Intn(1000)
	unmarshalled := make(sorterNinOptNativeUint32, l)
	marshalled := make([][]byte, l)
	var err error
	for i := 0; i < l; i++ {
		unmarshalled[i] = test.NewPopulatedNinOptNative(r, false)
		marshalled[i], err = proto.Marshal(unmarshalled[i])
		if err != nil {
			panic(err)
		}
	}
	sort.Sort(unmarshalled)
	fp, err := fieldpath.NewUint32SinglePath("test", "NinOptNative", test.ThetestDescription(), "Field5")
	if err != nil {
		panic(err)
	}
	fpsorter := fieldpath.NewUint32Sorter(&sortable{marshalled}, fp)
	sort.Sort(fpsorter)
	struct2 := &test.NinOptNative{}
	for i := 0; i < l; i++ {
		err = proto.Unmarshal(marshalled[i], struct2)
		if err != nil {
			panic(err)
		}
		if err := unmarshalled[i].VerboseEqual(struct2); err != nil {
			panic(err)
		}
	}
}

func TestUnmarshalFirstNinOptStructUint32(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewUint32SinglePath("test", "NinOptStruct", test.ThetestDescription(), "Field4.Field5")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinOptStruct(r, false)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	unmarshalled, err := fp.UnmarshalFirst(buf)
	if err != nil {
		panic(err)
	}
	if !(p.Field4 != nil && p.Field4.Field5 != nil) {
		if unmarshalled != nil {
			t.Fatalf("unmarshalled != nil")
		}
		return
	}
	if unmarshalled == nil {
		t.Fatalf("ummarshalled == nil")
	}
	if *unmarshalled != *p.Field4.Field5 {
		t.Fatalf("%v != %v", *unmarshalled, *p.Field4.Field5)
	}
}

func TestUnmarshalNinOptStructUint32(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewUint32SinglePath("test", "NinOptStruct", test.ThetestDescription(), "Field4.Field5")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinOptStruct(r, false)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	unmarshalled, err := fp.Unmarshal(buf)
	if err != nil {
		panic(err)
	}
	if !(p.Field4 != nil && p.Field4.Field5 != nil) {
		if unmarshalled != nil {
			t.Fatalf("unmarshalled != nil")
		}
		return
	}
	if unmarshalled == nil {
		t.Fatalf("ummarshalled == nil")
	}
	if *unmarshalled != *p.Field4.Field5 {
		t.Fatalf("%v != %v", *unmarshalled, *p.Field4.Field5)
	}
}

func TestCompiledNinOptStructUint32(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewUint32Path("test", "NinOptStruct", test.ThetestDescription(), "Field4.Field5")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinOptStruct(r, false)
	var unmarshalled []uint32
	f := FuncHandler{
		Uint32Func: func(v uint32) {
			unmarshalled = append(unmarshalled, v)
		},
	}
	unmarshaler := fieldpath.NewUint32Unmarshaler(fp, f)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	compiled := fieldpath.Compile(unmarshaler)
	err = compiled.Unmarshal(buf)
	if err != nil {
		panic(err)
	}

	if len(unmarshalled) > 0 {
		if !reflect.DeepEqual(unmarshalled[0], *p.Field4.Field5) {
			panic(fmt.Errorf("unmarshalled %v != p.Field4.Field5 %v", unmarshalled[0], *p.Field4.Field5))
		}
	} else {
		if p.Field4 != nil && p.Field4.Field5 != nil {
			t.Fatalf("Expected nil")
		}
	}

}

type sorterNinOptStructUint32 []*test.NinOptStruct

func (this sorterNinOptStructUint32) Less(i, j int) bool {
	if !(this[i].Field4 != nil && this[i].Field4.Field5 != nil) {
		return true
	}
	if !(this[j].Field4 != nil && this[j].Field4.Field5 != nil) {
		return false
	}

	return *this[i].Field4.Field5 < *this[j].Field4.Field5

}

func (this sorterNinOptStructUint32) Len() int {
	return len(this)
}

func (this sorterNinOptStructUint32) Swap(i, j int) {
	this[i], this[j] = this[j], this[i]
}

func TestSortNinOptStructUint32(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	l := r.Intn(1000)
	unmarshalled := make(sorterNinOptStructUint32, l)
	marshalled := make([][]byte, l)
	var err error
	for i := 0; i < l; i++ {
		unmarshalled[i] = test.NewPopulatedNinOptStruct(r, false)
		marshalled[i], err = proto.Marshal(unmarshalled[i])
		if err != nil {
			panic(err)
		}
	}
	sort.Sort(unmarshalled)
	fp, err := fieldpath.NewUint32SinglePath("test", "NinOptStruct", test.ThetestDescription(), "Field4.Field5")
	if err != nil {
		panic(err)
	}
	fpsorter := fieldpath.NewUint32Sorter(&sortable{marshalled}, fp)
	sort.Sort(fpsorter)
	struct2 := &test.NinOptStruct{}
	for i := 0; i < l; i++ {
		err = proto.Unmarshal(marshalled[i], struct2)
		if err != nil {
			panic(err)
		}
		if err := unmarshalled[i].VerboseEqual(struct2); err != nil {
			panic(err)
		}
	}
}

func TestCompiledNinRepPackedNativeUint32(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewPackedUint32Path("test", "NinRepPackedNative", test.ThetestDescription(), "Field5")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinRepPackedNative(r, false)
	var unmarshalled []uint32
	f := FuncHandler{
		Uint32Func: func(v uint32) {
			unmarshalled = append(unmarshalled, v)
		},
	}
	unmarshaler := fieldpath.NewPackedUint32Unmarshaler(fp, f)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	compiled := fieldpath.Compile(unmarshaler)
	err = compiled.Unmarshal(buf)
	if err != nil {
		panic(err)
	}

	if !reflect.DeepEqual(unmarshalled, p.Field5) {
		if len(unmarshalled) == 0 && len(p.Field5) == 0 {
			return
		}
		panic(fmt.Errorf("unmarshalled %#v != p.Field5 %#v", unmarshalled, p.Field5))
	}

}

func TestCompiledNinRepNativeUint32(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewUint32Path("test", "NinRepNative", test.ThetestDescription(), "Field5")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinRepNative(r, false)
	var unmarshalled []uint32
	f := FuncHandler{
		Uint32Func: func(v uint32) {
			unmarshalled = append(unmarshalled, v)
		},
	}
	unmarshaler := fieldpath.NewUint32Unmarshaler(fp, f)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	compiled := fieldpath.Compile(unmarshaler)
	err = compiled.Unmarshal(buf)
	if err != nil {
		panic(err)
	}

	if !reflect.DeepEqual(unmarshalled, p.Field5) {
		if len(unmarshalled) == 0 && len(p.Field5) == 0 {
			return
		}
		panic(fmt.Errorf("unmarshalled %#v != p.Field5 %#v", unmarshalled, p.Field5))
	}

}

func TestCompiledNinNestedStructUint32(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewUint32Path("test", "NinNestedStruct", test.ThetestDescription(), "Field1.Field4.Field5")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinNestedStruct(r, false)
	var unmarshalled []uint32
	f := FuncHandler{
		Uint32Func: func(v uint32) {
			unmarshalled = append(unmarshalled, v)
		},
	}
	unmarshaler := fieldpath.NewUint32Unmarshaler(fp, f)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	compiled := fieldpath.Compile(unmarshaler)
	err = compiled.Unmarshal(buf)
	if err != nil {
		panic(err)
	}

	if len(unmarshalled) > 0 {
		if !reflect.DeepEqual(unmarshalled[0], *p.Field1.Field4.Field5) {
			panic(fmt.Errorf("unmarshalled %v != p.Field1.Field4.Field5 %v", unmarshalled[0], *p.Field1.Field4.Field5))
		}
	} else {
		if p.Field1 != nil && p.Field1.Field4 != nil && p.Field1.Field4.Field5 != nil {
			t.Fatalf("Expected nil")
		}
	}

}

func TestUnmarshalFirstNinOptNativeSint32(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewSint32SinglePath("test", "NinOptNative", test.ThetestDescription(), "Field7")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinOptNative(r, false)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	unmarshalled, err := fp.UnmarshalFirst(buf)
	if err != nil {
		panic(err)
	}
	if !(p.Field7 != nil) {
		if unmarshalled != nil {
			t.Fatalf("unmarshalled != nil")
		}
		return
	}
	if unmarshalled == nil {
		t.Fatalf("ummarshalled == nil")
	}
	if *unmarshalled != *p.Field7 {
		t.Fatalf("%v != %v", *unmarshalled, *p.Field7)
	}
}

func TestUnmarshalNinOptNativeSint32(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewSint32SinglePath("test", "NinOptNative", test.ThetestDescription(), "Field7")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinOptNative(r, false)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	unmarshalled, err := fp.Unmarshal(buf)
	if err != nil {
		panic(err)
	}
	if !(p.Field7 != nil) {
		if unmarshalled != nil {
			t.Fatalf("unmarshalled != nil")
		}
		return
	}
	if unmarshalled == nil {
		t.Fatalf("ummarshalled == nil")
	}
	if *unmarshalled != *p.Field7 {
		t.Fatalf("%v != %v", *unmarshalled, *p.Field7)
	}
}

func TestCompiledNinOptNativeSint32(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewSint32Path("test", "NinOptNative", test.ThetestDescription(), "Field7")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinOptNative(r, false)
	var unmarshalled []int32
	f := FuncHandler{
		Int32Func: func(v int32) {
			unmarshalled = append(unmarshalled, v)
		},
	}
	unmarshaler := fieldpath.NewSint32Unmarshaler(fp, f)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	compiled := fieldpath.Compile(unmarshaler)
	err = compiled.Unmarshal(buf)
	if err != nil {
		panic(err)
	}

	if len(unmarshalled) > 0 {
		if !reflect.DeepEqual(unmarshalled[0], *p.Field7) {
			panic(fmt.Errorf("unmarshalled %v != p.Field7 %v", unmarshalled[0], *p.Field7))
		}
	} else {
		if p.Field7 != nil {
			t.Fatalf("Expected nil")
		}
	}

}

type sorterNinOptNativeSint32 []*test.NinOptNative

func (this sorterNinOptNativeSint32) Less(i, j int) bool {
	if !(this[i].Field7 != nil) {
		return true
	}
	if !(this[j].Field7 != nil) {
		return false
	}

	return *this[i].Field7 < *this[j].Field7

}

func (this sorterNinOptNativeSint32) Len() int {
	return len(this)
}

func (this sorterNinOptNativeSint32) Swap(i, j int) {
	this[i], this[j] = this[j], this[i]
}

func TestSortNinOptNativeSint32(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	l := r.Intn(1000)
	unmarshalled := make(sorterNinOptNativeSint32, l)
	marshalled := make([][]byte, l)
	var err error
	for i := 0; i < l; i++ {
		unmarshalled[i] = test.NewPopulatedNinOptNative(r, false)
		marshalled[i], err = proto.Marshal(unmarshalled[i])
		if err != nil {
			panic(err)
		}
	}
	sort.Sort(unmarshalled)
	fp, err := fieldpath.NewSint32SinglePath("test", "NinOptNative", test.ThetestDescription(), "Field7")
	if err != nil {
		panic(err)
	}
	fpsorter := fieldpath.NewSint32Sorter(&sortable{marshalled}, fp)
	sort.Sort(fpsorter)
	struct2 := &test.NinOptNative{}
	for i := 0; i < l; i++ {
		err = proto.Unmarshal(marshalled[i], struct2)
		if err != nil {
			panic(err)
		}
		if err := unmarshalled[i].VerboseEqual(struct2); err != nil {
			panic(err)
		}
	}
}

func TestUnmarshalFirstNinOptStructSint32(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewSint32SinglePath("test", "NinOptStruct", test.ThetestDescription(), "Field4.Field7")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinOptStruct(r, false)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	unmarshalled, err := fp.UnmarshalFirst(buf)
	if err != nil {
		panic(err)
	}
	if !(p.Field4 != nil && p.Field4.Field7 != nil) {
		if unmarshalled != nil {
			t.Fatalf("unmarshalled != nil")
		}
		return
	}
	if unmarshalled == nil {
		t.Fatalf("ummarshalled == nil")
	}
	if *unmarshalled != *p.Field4.Field7 {
		t.Fatalf("%v != %v", *unmarshalled, *p.Field4.Field7)
	}
}

func TestUnmarshalNinOptStructSint32(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewSint32SinglePath("test", "NinOptStruct", test.ThetestDescription(), "Field4.Field7")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinOptStruct(r, false)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	unmarshalled, err := fp.Unmarshal(buf)
	if err != nil {
		panic(err)
	}
	if !(p.Field4 != nil && p.Field4.Field7 != nil) {
		if unmarshalled != nil {
			t.Fatalf("unmarshalled != nil")
		}
		return
	}
	if unmarshalled == nil {
		t.Fatalf("ummarshalled == nil")
	}
	if *unmarshalled != *p.Field4.Field7 {
		t.Fatalf("%v != %v", *unmarshalled, *p.Field4.Field7)
	}
}

func TestCompiledNinOptStructSint32(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewSint32Path("test", "NinOptStruct", test.ThetestDescription(), "Field4.Field7")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinOptStruct(r, false)
	var unmarshalled []int32
	f := FuncHandler{
		Int32Func: func(v int32) {
			unmarshalled = append(unmarshalled, v)
		},
	}
	unmarshaler := fieldpath.NewSint32Unmarshaler(fp, f)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	compiled := fieldpath.Compile(unmarshaler)
	err = compiled.Unmarshal(buf)
	if err != nil {
		panic(err)
	}

	if len(unmarshalled) > 0 {
		if !reflect.DeepEqual(unmarshalled[0], *p.Field4.Field7) {
			panic(fmt.Errorf("unmarshalled %v != p.Field4.Field7 %v", unmarshalled[0], *p.Field4.Field7))
		}
	} else {
		if p.Field4 != nil && p.Field4.Field7 != nil {
			t.Fatalf("Expected nil")
		}
	}

}

type sorterNinOptStructSint32 []*test.NinOptStruct

func (this sorterNinOptStructSint32) Less(i, j int) bool {
	if !(this[i].Field4 != nil && this[i].Field4.Field7 != nil) {
		return true
	}
	if !(this[j].Field4 != nil && this[j].Field4.Field7 != nil) {
		return false
	}

	return *this[i].Field4.Field7 < *this[j].Field4.Field7

}

func (this sorterNinOptStructSint32) Len() int {
	return len(this)
}

func (this sorterNinOptStructSint32) Swap(i, j int) {
	this[i], this[j] = this[j], this[i]
}

func TestSortNinOptStructSint32(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	l := r.Intn(1000)
	unmarshalled := make(sorterNinOptStructSint32, l)
	marshalled := make([][]byte, l)
	var err error
	for i := 0; i < l; i++ {
		unmarshalled[i] = test.NewPopulatedNinOptStruct(r, false)
		marshalled[i], err = proto.Marshal(unmarshalled[i])
		if err != nil {
			panic(err)
		}
	}
	sort.Sort(unmarshalled)
	fp, err := fieldpath.NewSint32SinglePath("test", "NinOptStruct", test.ThetestDescription(), "Field4.Field7")
	if err != nil {
		panic(err)
	}
	fpsorter := fieldpath.NewSint32Sorter(&sortable{marshalled}, fp)
	sort.Sort(fpsorter)
	struct2 := &test.NinOptStruct{}
	for i := 0; i < l; i++ {
		err = proto.Unmarshal(marshalled[i], struct2)
		if err != nil {
			panic(err)
		}
		if err := unmarshalled[i].VerboseEqual(struct2); err != nil {
			panic(err)
		}
	}
}

func TestCompiledNinRepPackedNativeSint32(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewPackedSint32Path("test", "NinRepPackedNative", test.ThetestDescription(), "Field7")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinRepPackedNative(r, false)
	var unmarshalled []int32
	f := FuncHandler{
		Int32Func: func(v int32) {
			unmarshalled = append(unmarshalled, v)
		},
	}
	unmarshaler := fieldpath.NewPackedSint32Unmarshaler(fp, f)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	compiled := fieldpath.Compile(unmarshaler)
	err = compiled.Unmarshal(buf)
	if err != nil {
		panic(err)
	}

	if !reflect.DeepEqual(unmarshalled, p.Field7) {
		if len(unmarshalled) == 0 && len(p.Field7) == 0 {
			return
		}
		panic(fmt.Errorf("unmarshalled %#v != p.Field7 %#v", unmarshalled, p.Field7))
	}

}

func TestCompiledNinRepNativeSint32(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewSint32Path("test", "NinRepNative", test.ThetestDescription(), "Field7")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinRepNative(r, false)
	var unmarshalled []int32
	f := FuncHandler{
		Int32Func: func(v int32) {
			unmarshalled = append(unmarshalled, v)
		},
	}
	unmarshaler := fieldpath.NewSint32Unmarshaler(fp, f)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	compiled := fieldpath.Compile(unmarshaler)
	err = compiled.Unmarshal(buf)
	if err != nil {
		panic(err)
	}

	if !reflect.DeepEqual(unmarshalled, p.Field7) {
		if len(unmarshalled) == 0 && len(p.Field7) == 0 {
			return
		}
		panic(fmt.Errorf("unmarshalled %#v != p.Field7 %#v", unmarshalled, p.Field7))
	}

}

func TestCompiledNinNestedStructSint32(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewSint32Path("test", "NinNestedStruct", test.ThetestDescription(), "Field1.Field4.Field7")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinNestedStruct(r, false)
	var unmarshalled []int32
	f := FuncHandler{
		Int32Func: func(v int32) {
			unmarshalled = append(unmarshalled, v)
		},
	}
	unmarshaler := fieldpath.NewSint32Unmarshaler(fp, f)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	compiled := fieldpath.Compile(unmarshaler)
	err = compiled.Unmarshal(buf)
	if err != nil {
		panic(err)
	}

	if len(unmarshalled) > 0 {
		if !reflect.DeepEqual(unmarshalled[0], *p.Field1.Field4.Field7) {
			panic(fmt.Errorf("unmarshalled %v != p.Field1.Field4.Field7 %v", unmarshalled[0], *p.Field1.Field4.Field7))
		}
	} else {
		if p.Field1 != nil && p.Field1.Field4 != nil && p.Field1.Field4.Field7 != nil {
			t.Fatalf("Expected nil")
		}
	}

}

func TestUnmarshalFirstNinOptNativeSint64(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewSint64SinglePath("test", "NinOptNative", test.ThetestDescription(), "Field8")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinOptNative(r, false)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	unmarshalled, err := fp.UnmarshalFirst(buf)
	if err != nil {
		panic(err)
	}
	if !(p.Field8 != nil) {
		if unmarshalled != nil {
			t.Fatalf("unmarshalled != nil")
		}
		return
	}
	if unmarshalled == nil {
		t.Fatalf("ummarshalled == nil")
	}
	if *unmarshalled != *p.Field8 {
		t.Fatalf("%v != %v", *unmarshalled, *p.Field8)
	}
}

func TestUnmarshalNinOptNativeSint64(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewSint64SinglePath("test", "NinOptNative", test.ThetestDescription(), "Field8")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinOptNative(r, false)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	unmarshalled, err := fp.Unmarshal(buf)
	if err != nil {
		panic(err)
	}
	if !(p.Field8 != nil) {
		if unmarshalled != nil {
			t.Fatalf("unmarshalled != nil")
		}
		return
	}
	if unmarshalled == nil {
		t.Fatalf("ummarshalled == nil")
	}
	if *unmarshalled != *p.Field8 {
		t.Fatalf("%v != %v", *unmarshalled, *p.Field8)
	}
}

func TestCompiledNinOptNativeSint64(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewSint64Path("test", "NinOptNative", test.ThetestDescription(), "Field8")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinOptNative(r, false)
	var unmarshalled []int64
	f := FuncHandler{
		Int64Func: func(v int64) {
			unmarshalled = append(unmarshalled, v)
		},
	}
	unmarshaler := fieldpath.NewSint64Unmarshaler(fp, f)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	compiled := fieldpath.Compile(unmarshaler)
	err = compiled.Unmarshal(buf)
	if err != nil {
		panic(err)
	}

	if len(unmarshalled) > 0 {
		if !reflect.DeepEqual(unmarshalled[0], *p.Field8) {
			panic(fmt.Errorf("unmarshalled %v != p.Field8 %v", unmarshalled[0], *p.Field8))
		}
	} else {
		if p.Field8 != nil {
			t.Fatalf("Expected nil")
		}
	}

}

type sorterNinOptNativeSint64 []*test.NinOptNative

func (this sorterNinOptNativeSint64) Less(i, j int) bool {
	if !(this[i].Field8 != nil) {
		return true
	}
	if !(this[j].Field8 != nil) {
		return false
	}

	return *this[i].Field8 < *this[j].Field8

}

func (this sorterNinOptNativeSint64) Len() int {
	return len(this)
}

func (this sorterNinOptNativeSint64) Swap(i, j int) {
	this[i], this[j] = this[j], this[i]
}

func TestSortNinOptNativeSint64(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	l := r.Intn(1000)
	unmarshalled := make(sorterNinOptNativeSint64, l)
	marshalled := make([][]byte, l)
	var err error
	for i := 0; i < l; i++ {
		unmarshalled[i] = test.NewPopulatedNinOptNative(r, false)
		marshalled[i], err = proto.Marshal(unmarshalled[i])
		if err != nil {
			panic(err)
		}
	}
	sort.Sort(unmarshalled)
	fp, err := fieldpath.NewSint64SinglePath("test", "NinOptNative", test.ThetestDescription(), "Field8")
	if err != nil {
		panic(err)
	}
	fpsorter := fieldpath.NewSint64Sorter(&sortable{marshalled}, fp)
	sort.Sort(fpsorter)
	struct2 := &test.NinOptNative{}
	for i := 0; i < l; i++ {
		err = proto.Unmarshal(marshalled[i], struct2)
		if err != nil {
			panic(err)
		}
		if err := unmarshalled[i].VerboseEqual(struct2); err != nil {
			panic(err)
		}
	}
}

func TestUnmarshalFirstNinOptStructSint64(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewSint64SinglePath("test", "NinOptStruct", test.ThetestDescription(), "Field4.Field8")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinOptStruct(r, false)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	unmarshalled, err := fp.UnmarshalFirst(buf)
	if err != nil {
		panic(err)
	}
	if !(p.Field4 != nil && p.Field4.Field8 != nil) {
		if unmarshalled != nil {
			t.Fatalf("unmarshalled != nil")
		}
		return
	}
	if unmarshalled == nil {
		t.Fatalf("ummarshalled == nil")
	}
	if *unmarshalled != *p.Field4.Field8 {
		t.Fatalf("%v != %v", *unmarshalled, *p.Field4.Field8)
	}
}

func TestUnmarshalNinOptStructSint64(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewSint64SinglePath("test", "NinOptStruct", test.ThetestDescription(), "Field4.Field8")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinOptStruct(r, false)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	unmarshalled, err := fp.Unmarshal(buf)
	if err != nil {
		panic(err)
	}
	if !(p.Field4 != nil && p.Field4.Field8 != nil) {
		if unmarshalled != nil {
			t.Fatalf("unmarshalled != nil")
		}
		return
	}
	if unmarshalled == nil {
		t.Fatalf("ummarshalled == nil")
	}
	if *unmarshalled != *p.Field4.Field8 {
		t.Fatalf("%v != %v", *unmarshalled, *p.Field4.Field8)
	}
}

func TestCompiledNinOptStructSint64(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewSint64Path("test", "NinOptStruct", test.ThetestDescription(), "Field4.Field8")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinOptStruct(r, false)
	var unmarshalled []int64
	f := FuncHandler{
		Int64Func: func(v int64) {
			unmarshalled = append(unmarshalled, v)
		},
	}
	unmarshaler := fieldpath.NewSint64Unmarshaler(fp, f)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	compiled := fieldpath.Compile(unmarshaler)
	err = compiled.Unmarshal(buf)
	if err != nil {
		panic(err)
	}

	if len(unmarshalled) > 0 {
		if !reflect.DeepEqual(unmarshalled[0], *p.Field4.Field8) {
			panic(fmt.Errorf("unmarshalled %v != p.Field4.Field8 %v", unmarshalled[0], *p.Field4.Field8))
		}
	} else {
		if p.Field4 != nil && p.Field4.Field8 != nil {
			t.Fatalf("Expected nil")
		}
	}

}

type sorterNinOptStructSint64 []*test.NinOptStruct

func (this sorterNinOptStructSint64) Less(i, j int) bool {
	if !(this[i].Field4 != nil && this[i].Field4.Field8 != nil) {
		return true
	}
	if !(this[j].Field4 != nil && this[j].Field4.Field8 != nil) {
		return false
	}

	return *this[i].Field4.Field8 < *this[j].Field4.Field8

}

func (this sorterNinOptStructSint64) Len() int {
	return len(this)
}

func (this sorterNinOptStructSint64) Swap(i, j int) {
	this[i], this[j] = this[j], this[i]
}

func TestSortNinOptStructSint64(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	l := r.Intn(1000)
	unmarshalled := make(sorterNinOptStructSint64, l)
	marshalled := make([][]byte, l)
	var err error
	for i := 0; i < l; i++ {
		unmarshalled[i] = test.NewPopulatedNinOptStruct(r, false)
		marshalled[i], err = proto.Marshal(unmarshalled[i])
		if err != nil {
			panic(err)
		}
	}
	sort.Sort(unmarshalled)
	fp, err := fieldpath.NewSint64SinglePath("test", "NinOptStruct", test.ThetestDescription(), "Field4.Field8")
	if err != nil {
		panic(err)
	}
	fpsorter := fieldpath.NewSint64Sorter(&sortable{marshalled}, fp)
	sort.Sort(fpsorter)
	struct2 := &test.NinOptStruct{}
	for i := 0; i < l; i++ {
		err = proto.Unmarshal(marshalled[i], struct2)
		if err != nil {
			panic(err)
		}
		if err := unmarshalled[i].VerboseEqual(struct2); err != nil {
			panic(err)
		}
	}
}

func TestCompiledNinRepPackedNativeSint64(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewPackedSint64Path("test", "NinRepPackedNative", test.ThetestDescription(), "Field8")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinRepPackedNative(r, false)
	var unmarshalled []int64
	f := FuncHandler{
		Int64Func: func(v int64) {
			unmarshalled = append(unmarshalled, v)
		},
	}
	unmarshaler := fieldpath.NewPackedSint64Unmarshaler(fp, f)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	compiled := fieldpath.Compile(unmarshaler)
	err = compiled.Unmarshal(buf)
	if err != nil {
		panic(err)
	}

	if !reflect.DeepEqual(unmarshalled, p.Field8) {
		if len(unmarshalled) == 0 && len(p.Field8) == 0 {
			return
		}
		panic(fmt.Errorf("unmarshalled %#v != p.Field8 %#v", unmarshalled, p.Field8))
	}

}

func TestCompiledNinRepNativeSint64(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewSint64Path("test", "NinRepNative", test.ThetestDescription(), "Field8")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinRepNative(r, false)
	var unmarshalled []int64
	f := FuncHandler{
		Int64Func: func(v int64) {
			unmarshalled = append(unmarshalled, v)
		},
	}
	unmarshaler := fieldpath.NewSint64Unmarshaler(fp, f)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	compiled := fieldpath.Compile(unmarshaler)
	err = compiled.Unmarshal(buf)
	if err != nil {
		panic(err)
	}

	if !reflect.DeepEqual(unmarshalled, p.Field8) {
		if len(unmarshalled) == 0 && len(p.Field8) == 0 {
			return
		}
		panic(fmt.Errorf("unmarshalled %#v != p.Field8 %#v", unmarshalled, p.Field8))
	}

}

func TestCompiledNinNestedStructSint64(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewSint64Path("test", "NinNestedStruct", test.ThetestDescription(), "Field1.Field4.Field8")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinNestedStruct(r, false)
	var unmarshalled []int64
	f := FuncHandler{
		Int64Func: func(v int64) {
			unmarshalled = append(unmarshalled, v)
		},
	}
	unmarshaler := fieldpath.NewSint64Unmarshaler(fp, f)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	compiled := fieldpath.Compile(unmarshaler)
	err = compiled.Unmarshal(buf)
	if err != nil {
		panic(err)
	}

	if len(unmarshalled) > 0 {
		if !reflect.DeepEqual(unmarshalled[0], *p.Field1.Field4.Field8) {
			panic(fmt.Errorf("unmarshalled %v != p.Field1.Field4.Field8 %v", unmarshalled[0], *p.Field1.Field4.Field8))
		}
	} else {
		if p.Field1 != nil && p.Field1.Field4 != nil && p.Field1.Field4.Field8 != nil {
			t.Fatalf("Expected nil")
		}
	}

}

func TestUnmarshalFirstNinOptNativeFixed32(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewFixed32SinglePath("test", "NinOptNative", test.ThetestDescription(), "Field9")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinOptNative(r, false)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	unmarshalled, err := fp.UnmarshalFirst(buf)
	if err != nil {
		panic(err)
	}
	if !(p.Field9 != nil) {
		if unmarshalled != nil {
			t.Fatalf("unmarshalled != nil")
		}
		return
	}
	if unmarshalled == nil {
		t.Fatalf("ummarshalled == nil")
	}
	if *unmarshalled != *p.Field9 {
		t.Fatalf("%v != %v", *unmarshalled, *p.Field9)
	}
}

func TestUnmarshalNinOptNativeFixed32(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewFixed32SinglePath("test", "NinOptNative", test.ThetestDescription(), "Field9")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinOptNative(r, false)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	unmarshalled, err := fp.Unmarshal(buf)
	if err != nil {
		panic(err)
	}
	if !(p.Field9 != nil) {
		if unmarshalled != nil {
			t.Fatalf("unmarshalled != nil")
		}
		return
	}
	if unmarshalled == nil {
		t.Fatalf("ummarshalled == nil")
	}
	if *unmarshalled != *p.Field9 {
		t.Fatalf("%v != %v", *unmarshalled, *p.Field9)
	}
}

func TestCompiledNinOptNativeFixed32(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewFixed32Path("test", "NinOptNative", test.ThetestDescription(), "Field9")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinOptNative(r, false)
	var unmarshalled []uint32
	f := FuncHandler{
		Uint32Func: func(v uint32) {
			unmarshalled = append(unmarshalled, v)
		},
	}
	unmarshaler := fieldpath.NewFixed32Unmarshaler(fp, f)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	compiled := fieldpath.Compile(unmarshaler)
	err = compiled.Unmarshal(buf)
	if err != nil {
		panic(err)
	}

	if len(unmarshalled) > 0 {
		if !reflect.DeepEqual(unmarshalled[0], *p.Field9) {
			panic(fmt.Errorf("unmarshalled %v != p.Field9 %v", unmarshalled[0], *p.Field9))
		}
	} else {
		if p.Field9 != nil {
			t.Fatalf("Expected nil")
		}
	}

}

type sorterNinOptNativeFixed32 []*test.NinOptNative

func (this sorterNinOptNativeFixed32) Less(i, j int) bool {
	if !(this[i].Field9 != nil) {
		return true
	}
	if !(this[j].Field9 != nil) {
		return false
	}

	return *this[i].Field9 < *this[j].Field9

}

func (this sorterNinOptNativeFixed32) Len() int {
	return len(this)
}

func (this sorterNinOptNativeFixed32) Swap(i, j int) {
	this[i], this[j] = this[j], this[i]
}

func TestSortNinOptNativeFixed32(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	l := r.Intn(1000)
	unmarshalled := make(sorterNinOptNativeFixed32, l)
	marshalled := make([][]byte, l)
	var err error
	for i := 0; i < l; i++ {
		unmarshalled[i] = test.NewPopulatedNinOptNative(r, false)
		marshalled[i], err = proto.Marshal(unmarshalled[i])
		if err != nil {
			panic(err)
		}
	}
	sort.Sort(unmarshalled)
	fp, err := fieldpath.NewFixed32SinglePath("test", "NinOptNative", test.ThetestDescription(), "Field9")
	if err != nil {
		panic(err)
	}
	fpsorter := fieldpath.NewFixed32Sorter(&sortable{marshalled}, fp)
	sort.Sort(fpsorter)
	struct2 := &test.NinOptNative{}
	for i := 0; i < l; i++ {
		err = proto.Unmarshal(marshalled[i], struct2)
		if err != nil {
			panic(err)
		}
		if err := unmarshalled[i].VerboseEqual(struct2); err != nil {
			panic(err)
		}
	}
}

func TestUnmarshalFirstNinOptStructFixed32(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewFixed32SinglePath("test", "NinOptStruct", test.ThetestDescription(), "Field4.Field9")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinOptStruct(r, false)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	unmarshalled, err := fp.UnmarshalFirst(buf)
	if err != nil {
		panic(err)
	}
	if !(p.Field4 != nil && p.Field4.Field9 != nil) {
		if unmarshalled != nil {
			t.Fatalf("unmarshalled != nil")
		}
		return
	}
	if unmarshalled == nil {
		t.Fatalf("ummarshalled == nil")
	}
	if *unmarshalled != *p.Field4.Field9 {
		t.Fatalf("%v != %v", *unmarshalled, *p.Field4.Field9)
	}
}

func TestUnmarshalNinOptStructFixed32(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewFixed32SinglePath("test", "NinOptStruct", test.ThetestDescription(), "Field4.Field9")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinOptStruct(r, false)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	unmarshalled, err := fp.Unmarshal(buf)
	if err != nil {
		panic(err)
	}
	if !(p.Field4 != nil && p.Field4.Field9 != nil) {
		if unmarshalled != nil {
			t.Fatalf("unmarshalled != nil")
		}
		return
	}
	if unmarshalled == nil {
		t.Fatalf("ummarshalled == nil")
	}
	if *unmarshalled != *p.Field4.Field9 {
		t.Fatalf("%v != %v", *unmarshalled, *p.Field4.Field9)
	}
}

func TestCompiledNinOptStructFixed32(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewFixed32Path("test", "NinOptStruct", test.ThetestDescription(), "Field4.Field9")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinOptStruct(r, false)
	var unmarshalled []uint32
	f := FuncHandler{
		Uint32Func: func(v uint32) {
			unmarshalled = append(unmarshalled, v)
		},
	}
	unmarshaler := fieldpath.NewFixed32Unmarshaler(fp, f)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	compiled := fieldpath.Compile(unmarshaler)
	err = compiled.Unmarshal(buf)
	if err != nil {
		panic(err)
	}

	if len(unmarshalled) > 0 {
		if !reflect.DeepEqual(unmarshalled[0], *p.Field4.Field9) {
			panic(fmt.Errorf("unmarshalled %v != p.Field4.Field9 %v", unmarshalled[0], *p.Field4.Field9))
		}
	} else {
		if p.Field4 != nil && p.Field4.Field9 != nil {
			t.Fatalf("Expected nil")
		}
	}

}

type sorterNinOptStructFixed32 []*test.NinOptStruct

func (this sorterNinOptStructFixed32) Less(i, j int) bool {
	if !(this[i].Field4 != nil && this[i].Field4.Field9 != nil) {
		return true
	}
	if !(this[j].Field4 != nil && this[j].Field4.Field9 != nil) {
		return false
	}

	return *this[i].Field4.Field9 < *this[j].Field4.Field9

}

func (this sorterNinOptStructFixed32) Len() int {
	return len(this)
}

func (this sorterNinOptStructFixed32) Swap(i, j int) {
	this[i], this[j] = this[j], this[i]
}

func TestSortNinOptStructFixed32(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	l := r.Intn(1000)
	unmarshalled := make(sorterNinOptStructFixed32, l)
	marshalled := make([][]byte, l)
	var err error
	for i := 0; i < l; i++ {
		unmarshalled[i] = test.NewPopulatedNinOptStruct(r, false)
		marshalled[i], err = proto.Marshal(unmarshalled[i])
		if err != nil {
			panic(err)
		}
	}
	sort.Sort(unmarshalled)
	fp, err := fieldpath.NewFixed32SinglePath("test", "NinOptStruct", test.ThetestDescription(), "Field4.Field9")
	if err != nil {
		panic(err)
	}
	fpsorter := fieldpath.NewFixed32Sorter(&sortable{marshalled}, fp)
	sort.Sort(fpsorter)
	struct2 := &test.NinOptStruct{}
	for i := 0; i < l; i++ {
		err = proto.Unmarshal(marshalled[i], struct2)
		if err != nil {
			panic(err)
		}
		if err := unmarshalled[i].VerboseEqual(struct2); err != nil {
			panic(err)
		}
	}
}

func TestCompiledNinRepPackedNativeFixed32(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewPackedFixed32Path("test", "NinRepPackedNative", test.ThetestDescription(), "Field9")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinRepPackedNative(r, false)
	var unmarshalled []uint32
	f := FuncHandler{
		Uint32Func: func(v uint32) {
			unmarshalled = append(unmarshalled, v)
		},
	}
	unmarshaler := fieldpath.NewPackedFixed32Unmarshaler(fp, f)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	compiled := fieldpath.Compile(unmarshaler)
	err = compiled.Unmarshal(buf)
	if err != nil {
		panic(err)
	}

	if !reflect.DeepEqual(unmarshalled, p.Field9) {
		if len(unmarshalled) == 0 && len(p.Field9) == 0 {
			return
		}
		panic(fmt.Errorf("unmarshalled %#v != p.Field9 %#v", unmarshalled, p.Field9))
	}

}

func TestCompiledNinRepNativeFixed32(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewFixed32Path("test", "NinRepNative", test.ThetestDescription(), "Field9")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinRepNative(r, false)
	var unmarshalled []uint32
	f := FuncHandler{
		Uint32Func: func(v uint32) {
			unmarshalled = append(unmarshalled, v)
		},
	}
	unmarshaler := fieldpath.NewFixed32Unmarshaler(fp, f)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	compiled := fieldpath.Compile(unmarshaler)
	err = compiled.Unmarshal(buf)
	if err != nil {
		panic(err)
	}

	if !reflect.DeepEqual(unmarshalled, p.Field9) {
		if len(unmarshalled) == 0 && len(p.Field9) == 0 {
			return
		}
		panic(fmt.Errorf("unmarshalled %#v != p.Field9 %#v", unmarshalled, p.Field9))
	}

}

func TestCompiledNinNestedStructFixed32(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewFixed32Path("test", "NinNestedStruct", test.ThetestDescription(), "Field1.Field4.Field9")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinNestedStruct(r, false)
	var unmarshalled []uint32
	f := FuncHandler{
		Uint32Func: func(v uint32) {
			unmarshalled = append(unmarshalled, v)
		},
	}
	unmarshaler := fieldpath.NewFixed32Unmarshaler(fp, f)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	compiled := fieldpath.Compile(unmarshaler)
	err = compiled.Unmarshal(buf)
	if err != nil {
		panic(err)
	}

	if len(unmarshalled) > 0 {
		if !reflect.DeepEqual(unmarshalled[0], *p.Field1.Field4.Field9) {
			panic(fmt.Errorf("unmarshalled %v != p.Field1.Field4.Field9 %v", unmarshalled[0], *p.Field1.Field4.Field9))
		}
	} else {
		if p.Field1 != nil && p.Field1.Field4 != nil && p.Field1.Field4.Field9 != nil {
			t.Fatalf("Expected nil")
		}
	}

}

func TestUnmarshalFirstNinOptNativeFixed64(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewFixed64SinglePath("test", "NinOptNative", test.ThetestDescription(), "Field11")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinOptNative(r, false)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	unmarshalled, err := fp.UnmarshalFirst(buf)
	if err != nil {
		panic(err)
	}
	if !(p.Field11 != nil) {
		if unmarshalled != nil {
			t.Fatalf("unmarshalled != nil")
		}
		return
	}
	if unmarshalled == nil {
		t.Fatalf("ummarshalled == nil")
	}
	if *unmarshalled != *p.Field11 {
		t.Fatalf("%v != %v", *unmarshalled, *p.Field11)
	}
}

func TestUnmarshalNinOptNativeFixed64(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewFixed64SinglePath("test", "NinOptNative", test.ThetestDescription(), "Field11")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinOptNative(r, false)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	unmarshalled, err := fp.Unmarshal(buf)
	if err != nil {
		panic(err)
	}
	if !(p.Field11 != nil) {
		if unmarshalled != nil {
			t.Fatalf("unmarshalled != nil")
		}
		return
	}
	if unmarshalled == nil {
		t.Fatalf("ummarshalled == nil")
	}
	if *unmarshalled != *p.Field11 {
		t.Fatalf("%v != %v", *unmarshalled, *p.Field11)
	}
}

func TestCompiledNinOptNativeFixed64(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewFixed64Path("test", "NinOptNative", test.ThetestDescription(), "Field11")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinOptNative(r, false)
	var unmarshalled []uint64
	f := FuncHandler{
		Uint64Func: func(v uint64) {
			unmarshalled = append(unmarshalled, v)
		},
	}
	unmarshaler := fieldpath.NewFixed64Unmarshaler(fp, f)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	compiled := fieldpath.Compile(unmarshaler)
	err = compiled.Unmarshal(buf)
	if err != nil {
		panic(err)
	}

	if len(unmarshalled) > 0 {
		if !reflect.DeepEqual(unmarshalled[0], *p.Field11) {
			panic(fmt.Errorf("unmarshalled %v != p.Field11 %v", unmarshalled[0], *p.Field11))
		}
	} else {
		if p.Field11 != nil {
			t.Fatalf("Expected nil")
		}
	}

}

type sorterNinOptNativeFixed64 []*test.NinOptNative

func (this sorterNinOptNativeFixed64) Less(i, j int) bool {
	if !(this[i].Field11 != nil) {
		return true
	}
	if !(this[j].Field11 != nil) {
		return false
	}

	return *this[i].Field11 < *this[j].Field11

}

func (this sorterNinOptNativeFixed64) Len() int {
	return len(this)
}

func (this sorterNinOptNativeFixed64) Swap(i, j int) {
	this[i], this[j] = this[j], this[i]
}

func TestSortNinOptNativeFixed64(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	l := r.Intn(1000)
	unmarshalled := make(sorterNinOptNativeFixed64, l)
	marshalled := make([][]byte, l)
	var err error
	for i := 0; i < l; i++ {
		unmarshalled[i] = test.NewPopulatedNinOptNative(r, false)
		marshalled[i], err = proto.Marshal(unmarshalled[i])
		if err != nil {
			panic(err)
		}
	}
	sort.Sort(unmarshalled)
	fp, err := fieldpath.NewFixed64SinglePath("test", "NinOptNative", test.ThetestDescription(), "Field11")
	if err != nil {
		panic(err)
	}
	fpsorter := fieldpath.NewFixed64Sorter(&sortable{marshalled}, fp)
	sort.Sort(fpsorter)
	struct2 := &test.NinOptNative{}
	for i := 0; i < l; i++ {
		err = proto.Unmarshal(marshalled[i], struct2)
		if err != nil {
			panic(err)
		}
		if err := unmarshalled[i].VerboseEqual(struct2); err != nil {
			panic(err)
		}
	}
}

func TestUnmarshalFirstNinOptStructFixed64(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewFixed64SinglePath("test", "NinOptStruct", test.ThetestDescription(), "Field4.Field11")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinOptStruct(r, false)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	unmarshalled, err := fp.UnmarshalFirst(buf)
	if err != nil {
		panic(err)
	}
	if !(p.Field4 != nil && p.Field4.Field11 != nil) {
		if unmarshalled != nil {
			t.Fatalf("unmarshalled != nil")
		}
		return
	}
	if unmarshalled == nil {
		t.Fatalf("ummarshalled == nil")
	}
	if *unmarshalled != *p.Field4.Field11 {
		t.Fatalf("%v != %v", *unmarshalled, *p.Field4.Field11)
	}
}

func TestUnmarshalNinOptStructFixed64(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewFixed64SinglePath("test", "NinOptStruct", test.ThetestDescription(), "Field4.Field11")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinOptStruct(r, false)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	unmarshalled, err := fp.Unmarshal(buf)
	if err != nil {
		panic(err)
	}
	if !(p.Field4 != nil && p.Field4.Field11 != nil) {
		if unmarshalled != nil {
			t.Fatalf("unmarshalled != nil")
		}
		return
	}
	if unmarshalled == nil {
		t.Fatalf("ummarshalled == nil")
	}
	if *unmarshalled != *p.Field4.Field11 {
		t.Fatalf("%v != %v", *unmarshalled, *p.Field4.Field11)
	}
}

func TestCompiledNinOptStructFixed64(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewFixed64Path("test", "NinOptStruct", test.ThetestDescription(), "Field4.Field11")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinOptStruct(r, false)
	var unmarshalled []uint64
	f := FuncHandler{
		Uint64Func: func(v uint64) {
			unmarshalled = append(unmarshalled, v)
		},
	}
	unmarshaler := fieldpath.NewFixed64Unmarshaler(fp, f)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	compiled := fieldpath.Compile(unmarshaler)
	err = compiled.Unmarshal(buf)
	if err != nil {
		panic(err)
	}

	if len(unmarshalled) > 0 {
		if !reflect.DeepEqual(unmarshalled[0], *p.Field4.Field11) {
			panic(fmt.Errorf("unmarshalled %v != p.Field4.Field11 %v", unmarshalled[0], *p.Field4.Field11))
		}
	} else {
		if p.Field4 != nil && p.Field4.Field11 != nil {
			t.Fatalf("Expected nil")
		}
	}

}

type sorterNinOptStructFixed64 []*test.NinOptStruct

func (this sorterNinOptStructFixed64) Less(i, j int) bool {
	if !(this[i].Field4 != nil && this[i].Field4.Field11 != nil) {
		return true
	}
	if !(this[j].Field4 != nil && this[j].Field4.Field11 != nil) {
		return false
	}

	return *this[i].Field4.Field11 < *this[j].Field4.Field11

}

func (this sorterNinOptStructFixed64) Len() int {
	return len(this)
}

func (this sorterNinOptStructFixed64) Swap(i, j int) {
	this[i], this[j] = this[j], this[i]
}

func TestSortNinOptStructFixed64(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	l := r.Intn(1000)
	unmarshalled := make(sorterNinOptStructFixed64, l)
	marshalled := make([][]byte, l)
	var err error
	for i := 0; i < l; i++ {
		unmarshalled[i] = test.NewPopulatedNinOptStruct(r, false)
		marshalled[i], err = proto.Marshal(unmarshalled[i])
		if err != nil {
			panic(err)
		}
	}
	sort.Sort(unmarshalled)
	fp, err := fieldpath.NewFixed64SinglePath("test", "NinOptStruct", test.ThetestDescription(), "Field4.Field11")
	if err != nil {
		panic(err)
	}
	fpsorter := fieldpath.NewFixed64Sorter(&sortable{marshalled}, fp)
	sort.Sort(fpsorter)
	struct2 := &test.NinOptStruct{}
	for i := 0; i < l; i++ {
		err = proto.Unmarshal(marshalled[i], struct2)
		if err != nil {
			panic(err)
		}
		if err := unmarshalled[i].VerboseEqual(struct2); err != nil {
			panic(err)
		}
	}
}

func TestCompiledNinRepPackedNativeFixed64(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewPackedFixed64Path("test", "NinRepPackedNative", test.ThetestDescription(), "Field11")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinRepPackedNative(r, false)
	var unmarshalled []uint64
	f := FuncHandler{
		Uint64Func: func(v uint64) {
			unmarshalled = append(unmarshalled, v)
		},
	}
	unmarshaler := fieldpath.NewPackedFixed64Unmarshaler(fp, f)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	compiled := fieldpath.Compile(unmarshaler)
	err = compiled.Unmarshal(buf)
	if err != nil {
		panic(err)
	}

	if !reflect.DeepEqual(unmarshalled, p.Field11) {
		if len(unmarshalled) == 0 && len(p.Field11) == 0 {
			return
		}
		panic(fmt.Errorf("unmarshalled %#v != p.Field11 %#v", unmarshalled, p.Field11))
	}

}

func TestCompiledNinRepNativeFixed64(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewFixed64Path("test", "NinRepNative", test.ThetestDescription(), "Field11")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinRepNative(r, false)
	var unmarshalled []uint64
	f := FuncHandler{
		Uint64Func: func(v uint64) {
			unmarshalled = append(unmarshalled, v)
		},
	}
	unmarshaler := fieldpath.NewFixed64Unmarshaler(fp, f)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	compiled := fieldpath.Compile(unmarshaler)
	err = compiled.Unmarshal(buf)
	if err != nil {
		panic(err)
	}

	if !reflect.DeepEqual(unmarshalled, p.Field11) {
		if len(unmarshalled) == 0 && len(p.Field11) == 0 {
			return
		}
		panic(fmt.Errorf("unmarshalled %#v != p.Field11 %#v", unmarshalled, p.Field11))
	}

}

func TestCompiledNinNestedStructFixed64(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewFixed64Path("test", "NinNestedStruct", test.ThetestDescription(), "Field1.Field4.Field11")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinNestedStruct(r, false)
	var unmarshalled []uint64
	f := FuncHandler{
		Uint64Func: func(v uint64) {
			unmarshalled = append(unmarshalled, v)
		},
	}
	unmarshaler := fieldpath.NewFixed64Unmarshaler(fp, f)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	compiled := fieldpath.Compile(unmarshaler)
	err = compiled.Unmarshal(buf)
	if err != nil {
		panic(err)
	}

	if len(unmarshalled) > 0 {
		if !reflect.DeepEqual(unmarshalled[0], *p.Field1.Field4.Field11) {
			panic(fmt.Errorf("unmarshalled %v != p.Field1.Field4.Field11 %v", unmarshalled[0], *p.Field1.Field4.Field11))
		}
	} else {
		if p.Field1 != nil && p.Field1.Field4 != nil && p.Field1.Field4.Field11 != nil {
			t.Fatalf("Expected nil")
		}
	}

}

func TestUnmarshalFirstNinOptNativeSfixed32(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewSfixed32SinglePath("test", "NinOptNative", test.ThetestDescription(), "Field10")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinOptNative(r, false)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	unmarshalled, err := fp.UnmarshalFirst(buf)
	if err != nil {
		panic(err)
	}
	if !(p.Field10 != nil) {
		if unmarshalled != nil {
			t.Fatalf("unmarshalled != nil")
		}
		return
	}
	if unmarshalled == nil {
		t.Fatalf("ummarshalled == nil")
	}
	if *unmarshalled != *p.Field10 {
		t.Fatalf("%v != %v", *unmarshalled, *p.Field10)
	}
}

func TestUnmarshalNinOptNativeSfixed32(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewSfixed32SinglePath("test", "NinOptNative", test.ThetestDescription(), "Field10")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinOptNative(r, false)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	unmarshalled, err := fp.Unmarshal(buf)
	if err != nil {
		panic(err)
	}
	if !(p.Field10 != nil) {
		if unmarshalled != nil {
			t.Fatalf("unmarshalled != nil")
		}
		return
	}
	if unmarshalled == nil {
		t.Fatalf("ummarshalled == nil")
	}
	if *unmarshalled != *p.Field10 {
		t.Fatalf("%v != %v", *unmarshalled, *p.Field10)
	}
}

func TestCompiledNinOptNativeSfixed32(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewSfixed32Path("test", "NinOptNative", test.ThetestDescription(), "Field10")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinOptNative(r, false)
	var unmarshalled []int32
	f := FuncHandler{
		Int32Func: func(v int32) {
			unmarshalled = append(unmarshalled, v)
		},
	}
	unmarshaler := fieldpath.NewSfixed32Unmarshaler(fp, f)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	compiled := fieldpath.Compile(unmarshaler)
	err = compiled.Unmarshal(buf)
	if err != nil {
		panic(err)
	}

	if len(unmarshalled) > 0 {
		if !reflect.DeepEqual(unmarshalled[0], *p.Field10) {
			panic(fmt.Errorf("unmarshalled %v != p.Field10 %v", unmarshalled[0], *p.Field10))
		}
	} else {
		if p.Field10 != nil {
			t.Fatalf("Expected nil")
		}
	}

}

type sorterNinOptNativeSfixed32 []*test.NinOptNative

func (this sorterNinOptNativeSfixed32) Less(i, j int) bool {
	if !(this[i].Field10 != nil) {
		return true
	}
	if !(this[j].Field10 != nil) {
		return false
	}

	return *this[i].Field10 < *this[j].Field10

}

func (this sorterNinOptNativeSfixed32) Len() int {
	return len(this)
}

func (this sorterNinOptNativeSfixed32) Swap(i, j int) {
	this[i], this[j] = this[j], this[i]
}

func TestSortNinOptNativeSfixed32(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	l := r.Intn(1000)
	unmarshalled := make(sorterNinOptNativeSfixed32, l)
	marshalled := make([][]byte, l)
	var err error
	for i := 0; i < l; i++ {
		unmarshalled[i] = test.NewPopulatedNinOptNative(r, false)
		marshalled[i], err = proto.Marshal(unmarshalled[i])
		if err != nil {
			panic(err)
		}
	}
	sort.Sort(unmarshalled)
	fp, err := fieldpath.NewSfixed32SinglePath("test", "NinOptNative", test.ThetestDescription(), "Field10")
	if err != nil {
		panic(err)
	}
	fpsorter := fieldpath.NewSfixed32Sorter(&sortable{marshalled}, fp)
	sort.Sort(fpsorter)
	struct2 := &test.NinOptNative{}
	for i := 0; i < l; i++ {
		err = proto.Unmarshal(marshalled[i], struct2)
		if err != nil {
			panic(err)
		}
		if err := unmarshalled[i].VerboseEqual(struct2); err != nil {
			panic(err)
		}
	}
}

func TestUnmarshalFirstNinOptStructSfixed32(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewSfixed32SinglePath("test", "NinOptStruct", test.ThetestDescription(), "Field4.Field10")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinOptStruct(r, false)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	unmarshalled, err := fp.UnmarshalFirst(buf)
	if err != nil {
		panic(err)
	}
	if !(p.Field4 != nil && p.Field4.Field10 != nil) {
		if unmarshalled != nil {
			t.Fatalf("unmarshalled != nil")
		}
		return
	}
	if unmarshalled == nil {
		t.Fatalf("ummarshalled == nil")
	}
	if *unmarshalled != *p.Field4.Field10 {
		t.Fatalf("%v != %v", *unmarshalled, *p.Field4.Field10)
	}
}

func TestUnmarshalNinOptStructSfixed32(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewSfixed32SinglePath("test", "NinOptStruct", test.ThetestDescription(), "Field4.Field10")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinOptStruct(r, false)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	unmarshalled, err := fp.Unmarshal(buf)
	if err != nil {
		panic(err)
	}
	if !(p.Field4 != nil && p.Field4.Field10 != nil) {
		if unmarshalled != nil {
			t.Fatalf("unmarshalled != nil")
		}
		return
	}
	if unmarshalled == nil {
		t.Fatalf("ummarshalled == nil")
	}
	if *unmarshalled != *p.Field4.Field10 {
		t.Fatalf("%v != %v", *unmarshalled, *p.Field4.Field10)
	}
}

func TestCompiledNinOptStructSfixed32(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewSfixed32Path("test", "NinOptStruct", test.ThetestDescription(), "Field4.Field10")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinOptStruct(r, false)
	var unmarshalled []int32
	f := FuncHandler{
		Int32Func: func(v int32) {
			unmarshalled = append(unmarshalled, v)
		},
	}
	unmarshaler := fieldpath.NewSfixed32Unmarshaler(fp, f)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	compiled := fieldpath.Compile(unmarshaler)
	err = compiled.Unmarshal(buf)
	if err != nil {
		panic(err)
	}

	if len(unmarshalled) > 0 {
		if !reflect.DeepEqual(unmarshalled[0], *p.Field4.Field10) {
			panic(fmt.Errorf("unmarshalled %v != p.Field4.Field10 %v", unmarshalled[0], *p.Field4.Field10))
		}
	} else {
		if p.Field4 != nil && p.Field4.Field10 != nil {
			t.Fatalf("Expected nil")
		}
	}

}

type sorterNinOptStructSfixed32 []*test.NinOptStruct

func (this sorterNinOptStructSfixed32) Less(i, j int) bool {
	if !(this[i].Field4 != nil && this[i].Field4.Field10 != nil) {
		return true
	}
	if !(this[j].Field4 != nil && this[j].Field4.Field10 != nil) {
		return false
	}

	return *this[i].Field4.Field10 < *this[j].Field4.Field10

}

func (this sorterNinOptStructSfixed32) Len() int {
	return len(this)
}

func (this sorterNinOptStructSfixed32) Swap(i, j int) {
	this[i], this[j] = this[j], this[i]
}

func TestSortNinOptStructSfixed32(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	l := r.Intn(1000)
	unmarshalled := make(sorterNinOptStructSfixed32, l)
	marshalled := make([][]byte, l)
	var err error
	for i := 0; i < l; i++ {
		unmarshalled[i] = test.NewPopulatedNinOptStruct(r, false)
		marshalled[i], err = proto.Marshal(unmarshalled[i])
		if err != nil {
			panic(err)
		}
	}
	sort.Sort(unmarshalled)
	fp, err := fieldpath.NewSfixed32SinglePath("test", "NinOptStruct", test.ThetestDescription(), "Field4.Field10")
	if err != nil {
		panic(err)
	}
	fpsorter := fieldpath.NewSfixed32Sorter(&sortable{marshalled}, fp)
	sort.Sort(fpsorter)
	struct2 := &test.NinOptStruct{}
	for i := 0; i < l; i++ {
		err = proto.Unmarshal(marshalled[i], struct2)
		if err != nil {
			panic(err)
		}
		if err := unmarshalled[i].VerboseEqual(struct2); err != nil {
			panic(err)
		}
	}
}

func TestCompiledNinRepPackedNativeSfixed32(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewPackedSfixed32Path("test", "NinRepPackedNative", test.ThetestDescription(), "Field10")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinRepPackedNative(r, false)
	var unmarshalled []int32
	f := FuncHandler{
		Int32Func: func(v int32) {
			unmarshalled = append(unmarshalled, v)
		},
	}
	unmarshaler := fieldpath.NewPackedSfixed32Unmarshaler(fp, f)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	compiled := fieldpath.Compile(unmarshaler)
	err = compiled.Unmarshal(buf)
	if err != nil {
		panic(err)
	}

	if !reflect.DeepEqual(unmarshalled, p.Field10) {
		if len(unmarshalled) == 0 && len(p.Field10) == 0 {
			return
		}
		panic(fmt.Errorf("unmarshalled %#v != p.Field10 %#v", unmarshalled, p.Field10))
	}

}

func TestCompiledNinRepNativeSfixed32(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewSfixed32Path("test", "NinRepNative", test.ThetestDescription(), "Field10")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinRepNative(r, false)
	var unmarshalled []int32
	f := FuncHandler{
		Int32Func: func(v int32) {
			unmarshalled = append(unmarshalled, v)
		},
	}
	unmarshaler := fieldpath.NewSfixed32Unmarshaler(fp, f)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	compiled := fieldpath.Compile(unmarshaler)
	err = compiled.Unmarshal(buf)
	if err != nil {
		panic(err)
	}

	if !reflect.DeepEqual(unmarshalled, p.Field10) {
		if len(unmarshalled) == 0 && len(p.Field10) == 0 {
			return
		}
		panic(fmt.Errorf("unmarshalled %#v != p.Field10 %#v", unmarshalled, p.Field10))
	}

}

func TestCompiledNinNestedStructSfixed32(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewSfixed32Path("test", "NinNestedStruct", test.ThetestDescription(), "Field1.Field4.Field10")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinNestedStruct(r, false)
	var unmarshalled []int32
	f := FuncHandler{
		Int32Func: func(v int32) {
			unmarshalled = append(unmarshalled, v)
		},
	}
	unmarshaler := fieldpath.NewSfixed32Unmarshaler(fp, f)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	compiled := fieldpath.Compile(unmarshaler)
	err = compiled.Unmarshal(buf)
	if err != nil {
		panic(err)
	}

	if len(unmarshalled) > 0 {
		if !reflect.DeepEqual(unmarshalled[0], *p.Field1.Field4.Field10) {
			panic(fmt.Errorf("unmarshalled %v != p.Field1.Field4.Field10 %v", unmarshalled[0], *p.Field1.Field4.Field10))
		}
	} else {
		if p.Field1 != nil && p.Field1.Field4 != nil && p.Field1.Field4.Field10 != nil {
			t.Fatalf("Expected nil")
		}
	}

}

func TestUnmarshalFirstNinOptNativeSfixed64(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewSfixed64SinglePath("test", "NinOptNative", test.ThetestDescription(), "Field12")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinOptNative(r, false)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	unmarshalled, err := fp.UnmarshalFirst(buf)
	if err != nil {
		panic(err)
	}
	if !(p.Field12 != nil) {
		if unmarshalled != nil {
			t.Fatalf("unmarshalled != nil")
		}
		return
	}
	if unmarshalled == nil {
		t.Fatalf("ummarshalled == nil")
	}
	if *unmarshalled != *p.Field12 {
		t.Fatalf("%v != %v", *unmarshalled, *p.Field12)
	}
}

func TestUnmarshalNinOptNativeSfixed64(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewSfixed64SinglePath("test", "NinOptNative", test.ThetestDescription(), "Field12")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinOptNative(r, false)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	unmarshalled, err := fp.Unmarshal(buf)
	if err != nil {
		panic(err)
	}
	if !(p.Field12 != nil) {
		if unmarshalled != nil {
			t.Fatalf("unmarshalled != nil")
		}
		return
	}
	if unmarshalled == nil {
		t.Fatalf("ummarshalled == nil")
	}
	if *unmarshalled != *p.Field12 {
		t.Fatalf("%v != %v", *unmarshalled, *p.Field12)
	}
}

func TestCompiledNinOptNativeSfixed64(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewSfixed64Path("test", "NinOptNative", test.ThetestDescription(), "Field12")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinOptNative(r, false)
	var unmarshalled []int64
	f := FuncHandler{
		Int64Func: func(v int64) {
			unmarshalled = append(unmarshalled, v)
		},
	}
	unmarshaler := fieldpath.NewSfixed64Unmarshaler(fp, f)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	compiled := fieldpath.Compile(unmarshaler)
	err = compiled.Unmarshal(buf)
	if err != nil {
		panic(err)
	}

	if len(unmarshalled) > 0 {
		if !reflect.DeepEqual(unmarshalled[0], *p.Field12) {
			panic(fmt.Errorf("unmarshalled %v != p.Field12 %v", unmarshalled[0], *p.Field12))
		}
	} else {
		if p.Field12 != nil {
			t.Fatalf("Expected nil")
		}
	}

}

type sorterNinOptNativeSfixed64 []*test.NinOptNative

func (this sorterNinOptNativeSfixed64) Less(i, j int) bool {
	if !(this[i].Field12 != nil) {
		return true
	}
	if !(this[j].Field12 != nil) {
		return false
	}

	return *this[i].Field12 < *this[j].Field12

}

func (this sorterNinOptNativeSfixed64) Len() int {
	return len(this)
}

func (this sorterNinOptNativeSfixed64) Swap(i, j int) {
	this[i], this[j] = this[j], this[i]
}

func TestSortNinOptNativeSfixed64(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	l := r.Intn(1000)
	unmarshalled := make(sorterNinOptNativeSfixed64, l)
	marshalled := make([][]byte, l)
	var err error
	for i := 0; i < l; i++ {
		unmarshalled[i] = test.NewPopulatedNinOptNative(r, false)
		marshalled[i], err = proto.Marshal(unmarshalled[i])
		if err != nil {
			panic(err)
		}
	}
	sort.Sort(unmarshalled)
	fp, err := fieldpath.NewSfixed64SinglePath("test", "NinOptNative", test.ThetestDescription(), "Field12")
	if err != nil {
		panic(err)
	}
	fpsorter := fieldpath.NewSfixed64Sorter(&sortable{marshalled}, fp)
	sort.Sort(fpsorter)
	struct2 := &test.NinOptNative{}
	for i := 0; i < l; i++ {
		err = proto.Unmarshal(marshalled[i], struct2)
		if err != nil {
			panic(err)
		}
		if err := unmarshalled[i].VerboseEqual(struct2); err != nil {
			panic(err)
		}
	}
}

func TestUnmarshalFirstNinOptStructSfixed64(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewSfixed64SinglePath("test", "NinOptStruct", test.ThetestDescription(), "Field4.Field12")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinOptStruct(r, false)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	unmarshalled, err := fp.UnmarshalFirst(buf)
	if err != nil {
		panic(err)
	}
	if !(p.Field4 != nil && p.Field4.Field12 != nil) {
		if unmarshalled != nil {
			t.Fatalf("unmarshalled != nil")
		}
		return
	}
	if unmarshalled == nil {
		t.Fatalf("ummarshalled == nil")
	}
	if *unmarshalled != *p.Field4.Field12 {
		t.Fatalf("%v != %v", *unmarshalled, *p.Field4.Field12)
	}
}

func TestUnmarshalNinOptStructSfixed64(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewSfixed64SinglePath("test", "NinOptStruct", test.ThetestDescription(), "Field4.Field12")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinOptStruct(r, false)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	unmarshalled, err := fp.Unmarshal(buf)
	if err != nil {
		panic(err)
	}
	if !(p.Field4 != nil && p.Field4.Field12 != nil) {
		if unmarshalled != nil {
			t.Fatalf("unmarshalled != nil")
		}
		return
	}
	if unmarshalled == nil {
		t.Fatalf("ummarshalled == nil")
	}
	if *unmarshalled != *p.Field4.Field12 {
		t.Fatalf("%v != %v", *unmarshalled, *p.Field4.Field12)
	}
}

func TestCompiledNinOptStructSfixed64(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewSfixed64Path("test", "NinOptStruct", test.ThetestDescription(), "Field4.Field12")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinOptStruct(r, false)
	var unmarshalled []int64
	f := FuncHandler{
		Int64Func: func(v int64) {
			unmarshalled = append(unmarshalled, v)
		},
	}
	unmarshaler := fieldpath.NewSfixed64Unmarshaler(fp, f)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	compiled := fieldpath.Compile(unmarshaler)
	err = compiled.Unmarshal(buf)
	if err != nil {
		panic(err)
	}

	if len(unmarshalled) > 0 {
		if !reflect.DeepEqual(unmarshalled[0], *p.Field4.Field12) {
			panic(fmt.Errorf("unmarshalled %v != p.Field4.Field12 %v", unmarshalled[0], *p.Field4.Field12))
		}
	} else {
		if p.Field4 != nil && p.Field4.Field12 != nil {
			t.Fatalf("Expected nil")
		}
	}

}

type sorterNinOptStructSfixed64 []*test.NinOptStruct

func (this sorterNinOptStructSfixed64) Less(i, j int) bool {
	if !(this[i].Field4 != nil && this[i].Field4.Field12 != nil) {
		return true
	}
	if !(this[j].Field4 != nil && this[j].Field4.Field12 != nil) {
		return false
	}

	return *this[i].Field4.Field12 < *this[j].Field4.Field12

}

func (this sorterNinOptStructSfixed64) Len() int {
	return len(this)
}

func (this sorterNinOptStructSfixed64) Swap(i, j int) {
	this[i], this[j] = this[j], this[i]
}

func TestSortNinOptStructSfixed64(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	l := r.Intn(1000)
	unmarshalled := make(sorterNinOptStructSfixed64, l)
	marshalled := make([][]byte, l)
	var err error
	for i := 0; i < l; i++ {
		unmarshalled[i] = test.NewPopulatedNinOptStruct(r, false)
		marshalled[i], err = proto.Marshal(unmarshalled[i])
		if err != nil {
			panic(err)
		}
	}
	sort.Sort(unmarshalled)
	fp, err := fieldpath.NewSfixed64SinglePath("test", "NinOptStruct", test.ThetestDescription(), "Field4.Field12")
	if err != nil {
		panic(err)
	}
	fpsorter := fieldpath.NewSfixed64Sorter(&sortable{marshalled}, fp)
	sort.Sort(fpsorter)
	struct2 := &test.NinOptStruct{}
	for i := 0; i < l; i++ {
		err = proto.Unmarshal(marshalled[i], struct2)
		if err != nil {
			panic(err)
		}
		if err := unmarshalled[i].VerboseEqual(struct2); err != nil {
			panic(err)
		}
	}
}

func TestCompiledNinRepPackedNativeSfixed64(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewPackedSfixed64Path("test", "NinRepPackedNative", test.ThetestDescription(), "Field12")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinRepPackedNative(r, false)
	var unmarshalled []int64
	f := FuncHandler{
		Int64Func: func(v int64) {
			unmarshalled = append(unmarshalled, v)
		},
	}
	unmarshaler := fieldpath.NewPackedSfixed64Unmarshaler(fp, f)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	compiled := fieldpath.Compile(unmarshaler)
	err = compiled.Unmarshal(buf)
	if err != nil {
		panic(err)
	}

	if !reflect.DeepEqual(unmarshalled, p.Field12) {
		if len(unmarshalled) == 0 && len(p.Field12) == 0 {
			return
		}
		panic(fmt.Errorf("unmarshalled %#v != p.Field12 %#v", unmarshalled, p.Field12))
	}

}

func TestCompiledNinRepNativeSfixed64(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewSfixed64Path("test", "NinRepNative", test.ThetestDescription(), "Field12")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinRepNative(r, false)
	var unmarshalled []int64
	f := FuncHandler{
		Int64Func: func(v int64) {
			unmarshalled = append(unmarshalled, v)
		},
	}
	unmarshaler := fieldpath.NewSfixed64Unmarshaler(fp, f)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	compiled := fieldpath.Compile(unmarshaler)
	err = compiled.Unmarshal(buf)
	if err != nil {
		panic(err)
	}

	if !reflect.DeepEqual(unmarshalled, p.Field12) {
		if len(unmarshalled) == 0 && len(p.Field12) == 0 {
			return
		}
		panic(fmt.Errorf("unmarshalled %#v != p.Field12 %#v", unmarshalled, p.Field12))
	}

}

func TestCompiledNinNestedStructSfixed64(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewSfixed64Path("test", "NinNestedStruct", test.ThetestDescription(), "Field1.Field4.Field12")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinNestedStruct(r, false)
	var unmarshalled []int64
	f := FuncHandler{
		Int64Func: func(v int64) {
			unmarshalled = append(unmarshalled, v)
		},
	}
	unmarshaler := fieldpath.NewSfixed64Unmarshaler(fp, f)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	compiled := fieldpath.Compile(unmarshaler)
	err = compiled.Unmarshal(buf)
	if err != nil {
		panic(err)
	}

	if len(unmarshalled) > 0 {
		if !reflect.DeepEqual(unmarshalled[0], *p.Field1.Field4.Field12) {
			panic(fmt.Errorf("unmarshalled %v != p.Field1.Field4.Field12 %v", unmarshalled[0], *p.Field1.Field4.Field12))
		}
	} else {
		if p.Field1 != nil && p.Field1.Field4 != nil && p.Field1.Field4.Field12 != nil {
			t.Fatalf("Expected nil")
		}
	}

}

func TestCompiledNinOptNativeBool(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewBoolPath("test", "NinOptNative", test.ThetestDescription(), "Field13")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinOptNative(r, false)
	var unmarshalled []bool
	f := FuncHandler{
		BoolFunc: func(v bool) {
			unmarshalled = append(unmarshalled, v)
		},
	}
	unmarshaler := fieldpath.NewBoolUnmarshaler(fp, f)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	compiled := fieldpath.Compile(unmarshaler)
	err = compiled.Unmarshal(buf)
	if err != nil {
		panic(err)
	}

	if len(unmarshalled) > 0 {
		if !reflect.DeepEqual(unmarshalled[0], *p.Field13) {
			panic(fmt.Errorf("unmarshalled %v != p.Field13 %v", unmarshalled[0], *p.Field13))
		}
	} else {
		if p.Field13 != nil {
			t.Fatalf("Expected nil")
		}
	}

}

func TestCompiledNinOptStructBool(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewBoolPath("test", "NinOptStruct", test.ThetestDescription(), "Field4.Field13")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinOptStruct(r, false)
	var unmarshalled []bool
	f := FuncHandler{
		BoolFunc: func(v bool) {
			unmarshalled = append(unmarshalled, v)
		},
	}
	unmarshaler := fieldpath.NewBoolUnmarshaler(fp, f)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	compiled := fieldpath.Compile(unmarshaler)
	err = compiled.Unmarshal(buf)
	if err != nil {
		panic(err)
	}

	if len(unmarshalled) > 0 {
		if !reflect.DeepEqual(unmarshalled[0], *p.Field4.Field13) {
			panic(fmt.Errorf("unmarshalled %v != p.Field4.Field13 %v", unmarshalled[0], *p.Field4.Field13))
		}
	} else {
		if p.Field4 != nil && p.Field4.Field13 != nil {
			t.Fatalf("Expected nil")
		}
	}

}

func TestCompiledNinRepPackedNativeBool(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewPackedBoolPath("test", "NinRepPackedNative", test.ThetestDescription(), "Field13")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinRepPackedNative(r, false)
	var unmarshalled []bool
	f := FuncHandler{
		BoolFunc: func(v bool) {
			unmarshalled = append(unmarshalled, v)
		},
	}
	unmarshaler := fieldpath.NewPackedBoolUnmarshaler(fp, f)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	compiled := fieldpath.Compile(unmarshaler)
	err = compiled.Unmarshal(buf)
	if err != nil {
		panic(err)
	}

	if !reflect.DeepEqual(unmarshalled, p.Field13) {
		if len(unmarshalled) == 0 && len(p.Field13) == 0 {
			return
		}
		panic(fmt.Errorf("unmarshalled %#v != p.Field13 %#v", unmarshalled, p.Field13))
	}

}

func TestCompiledNinRepNativeBool(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewBoolPath("test", "NinRepNative", test.ThetestDescription(), "Field13")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinRepNative(r, false)
	var unmarshalled []bool
	f := FuncHandler{
		BoolFunc: func(v bool) {
			unmarshalled = append(unmarshalled, v)
		},
	}
	unmarshaler := fieldpath.NewBoolUnmarshaler(fp, f)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	compiled := fieldpath.Compile(unmarshaler)
	err = compiled.Unmarshal(buf)
	if err != nil {
		panic(err)
	}

	if !reflect.DeepEqual(unmarshalled, p.Field13) {
		if len(unmarshalled) == 0 && len(p.Field13) == 0 {
			return
		}
		panic(fmt.Errorf("unmarshalled %#v != p.Field13 %#v", unmarshalled, p.Field13))
	}

}

func TestCompiledNinNestedStructBool(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewBoolPath("test", "NinNestedStruct", test.ThetestDescription(), "Field1.Field4.Field13")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinNestedStruct(r, false)
	var unmarshalled []bool
	f := FuncHandler{
		BoolFunc: func(v bool) {
			unmarshalled = append(unmarshalled, v)
		},
	}
	unmarshaler := fieldpath.NewBoolUnmarshaler(fp, f)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	compiled := fieldpath.Compile(unmarshaler)
	err = compiled.Unmarshal(buf)
	if err != nil {
		panic(err)
	}

	if len(unmarshalled) > 0 {
		if !reflect.DeepEqual(unmarshalled[0], *p.Field1.Field4.Field13) {
			panic(fmt.Errorf("unmarshalled %v != p.Field1.Field4.Field13 %v", unmarshalled[0], *p.Field1.Field4.Field13))
		}
	} else {
		if p.Field1 != nil && p.Field1.Field4 != nil && p.Field1.Field4.Field13 != nil {
			t.Fatalf("Expected nil")
		}
	}

}

func TestUnmarshalFirstNinOptNativeString(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewStringSinglePath("test", "NinOptNative", test.ThetestDescription(), "Field14")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinOptNative(r, false)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	unmarshalled, err := fp.UnmarshalFirst(buf)
	if err != nil {
		panic(err)
	}
	if !(p.Field14 != nil) {
		if unmarshalled != nil {
			t.Fatalf("unmarshalled != nil")
		}
		return
	}
	if unmarshalled == nil {
		t.Fatalf("ummarshalled == nil")
	}
	if *unmarshalled != *p.Field14 {
		t.Fatalf("%v != %v", *unmarshalled, *p.Field14)
	}
}

func TestUnmarshalNinOptNativeString(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewStringSinglePath("test", "NinOptNative", test.ThetestDescription(), "Field14")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinOptNative(r, false)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	unmarshalled, err := fp.Unmarshal(buf)
	if err != nil {
		panic(err)
	}
	if !(p.Field14 != nil) {
		if unmarshalled != nil {
			t.Fatalf("unmarshalled != nil")
		}
		return
	}
	if unmarshalled == nil {
		t.Fatalf("ummarshalled == nil")
	}
	if *unmarshalled != *p.Field14 {
		t.Fatalf("%v != %v", *unmarshalled, *p.Field14)
	}
}

func TestCompiledNinOptNativeString(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewStringPath("test", "NinOptNative", test.ThetestDescription(), "Field14")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinOptNative(r, false)
	var unmarshalled []string
	f := FuncHandler{
		StringFunc: func(v string) {
			unmarshalled = append(unmarshalled, v)
		},
	}
	unmarshaler := fieldpath.NewStringUnmarshaler(fp, f)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	compiled := fieldpath.Compile(unmarshaler)
	err = compiled.Unmarshal(buf)
	if err != nil {
		panic(err)
	}

	if len(unmarshalled) > 0 {
		if !reflect.DeepEqual(unmarshalled[0], *p.Field14) {
			panic(fmt.Errorf("unmarshalled %v != p.Field14 %v", unmarshalled[0], *p.Field14))
		}
	} else {
		if p.Field14 != nil {
			t.Fatalf("Expected nil")
		}
	}

}

type sorterNinOptNativeString []*test.NinOptNative

func (this sorterNinOptNativeString) Less(i, j int) bool {
	if !(this[i].Field14 != nil) {
		return true
	}
	if !(this[j].Field14 != nil) {
		return false
	}

	return *this[i].Field14 < *this[j].Field14

}

func (this sorterNinOptNativeString) Len() int {
	return len(this)
}

func (this sorterNinOptNativeString) Swap(i, j int) {
	this[i], this[j] = this[j], this[i]
}

func TestSortNinOptNativeString(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	l := r.Intn(1000)
	unmarshalled := make(sorterNinOptNativeString, l)
	marshalled := make([][]byte, l)
	var err error
	for i := 0; i < l; i++ {
		unmarshalled[i] = test.NewPopulatedNinOptNative(r, false)
		marshalled[i], err = proto.Marshal(unmarshalled[i])
		if err != nil {
			panic(err)
		}
	}
	sort.Sort(unmarshalled)
	fp, err := fieldpath.NewStringSinglePath("test", "NinOptNative", test.ThetestDescription(), "Field14")
	if err != nil {
		panic(err)
	}
	fpsorter := fieldpath.NewStringSorter(&sortable{marshalled}, fp)
	sort.Sort(fpsorter)
	struct2 := &test.NinOptNative{}
	for i := 0; i < l; i++ {
		err = proto.Unmarshal(marshalled[i], struct2)
		if err != nil {
			panic(err)
		}
		if err := unmarshalled[i].VerboseEqual(struct2); err != nil {
			panic(err)
		}
	}
}

func TestUnmarshalFirstNinOptStructString(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewStringSinglePath("test", "NinOptStruct", test.ThetestDescription(), "Field4.Field14")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinOptStruct(r, false)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	unmarshalled, err := fp.UnmarshalFirst(buf)
	if err != nil {
		panic(err)
	}
	if !(p.Field4 != nil && p.Field4.Field14 != nil) {
		if unmarshalled != nil {
			t.Fatalf("unmarshalled != nil")
		}
		return
	}
	if unmarshalled == nil {
		t.Fatalf("ummarshalled == nil")
	}
	if *unmarshalled != *p.Field4.Field14 {
		t.Fatalf("%v != %v", *unmarshalled, *p.Field4.Field14)
	}
}

func TestUnmarshalNinOptStructString(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewStringSinglePath("test", "NinOptStruct", test.ThetestDescription(), "Field4.Field14")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinOptStruct(r, false)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	unmarshalled, err := fp.Unmarshal(buf)
	if err != nil {
		panic(err)
	}
	if !(p.Field4 != nil && p.Field4.Field14 != nil) {
		if unmarshalled != nil {
			t.Fatalf("unmarshalled != nil")
		}
		return
	}
	if unmarshalled == nil {
		t.Fatalf("ummarshalled == nil")
	}
	if *unmarshalled != *p.Field4.Field14 {
		t.Fatalf("%v != %v", *unmarshalled, *p.Field4.Field14)
	}
}

func TestCompiledNinOptStructString(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewStringPath("test", "NinOptStruct", test.ThetestDescription(), "Field4.Field14")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinOptStruct(r, false)
	var unmarshalled []string
	f := FuncHandler{
		StringFunc: func(v string) {
			unmarshalled = append(unmarshalled, v)
		},
	}
	unmarshaler := fieldpath.NewStringUnmarshaler(fp, f)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	compiled := fieldpath.Compile(unmarshaler)
	err = compiled.Unmarshal(buf)
	if err != nil {
		panic(err)
	}

	if len(unmarshalled) > 0 {
		if !reflect.DeepEqual(unmarshalled[0], *p.Field4.Field14) {
			panic(fmt.Errorf("unmarshalled %v != p.Field4.Field14 %v", unmarshalled[0], *p.Field4.Field14))
		}
	} else {
		if p.Field4 != nil && p.Field4.Field14 != nil {
			t.Fatalf("Expected nil")
		}
	}

}

type sorterNinOptStructString []*test.NinOptStruct

func (this sorterNinOptStructString) Less(i, j int) bool {
	if !(this[i].Field4 != nil && this[i].Field4.Field14 != nil) {
		return true
	}
	if !(this[j].Field4 != nil && this[j].Field4.Field14 != nil) {
		return false
	}

	return *this[i].Field4.Field14 < *this[j].Field4.Field14

}

func (this sorterNinOptStructString) Len() int {
	return len(this)
}

func (this sorterNinOptStructString) Swap(i, j int) {
	this[i], this[j] = this[j], this[i]
}

func TestSortNinOptStructString(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	l := r.Intn(1000)
	unmarshalled := make(sorterNinOptStructString, l)
	marshalled := make([][]byte, l)
	var err error
	for i := 0; i < l; i++ {
		unmarshalled[i] = test.NewPopulatedNinOptStruct(r, false)
		marshalled[i], err = proto.Marshal(unmarshalled[i])
		if err != nil {
			panic(err)
		}
	}
	sort.Sort(unmarshalled)
	fp, err := fieldpath.NewStringSinglePath("test", "NinOptStruct", test.ThetestDescription(), "Field4.Field14")
	if err != nil {
		panic(err)
	}
	fpsorter := fieldpath.NewStringSorter(&sortable{marshalled}, fp)
	sort.Sort(fpsorter)
	struct2 := &test.NinOptStruct{}
	for i := 0; i < l; i++ {
		err = proto.Unmarshal(marshalled[i], struct2)
		if err != nil {
			panic(err)
		}
		if err := unmarshalled[i].VerboseEqual(struct2); err != nil {
			panic(err)
		}
	}
}

func TestCompiledNinRepNativeString(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewStringPath("test", "NinRepNative", test.ThetestDescription(), "Field14")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinRepNative(r, false)
	var unmarshalled []string
	f := FuncHandler{
		StringFunc: func(v string) {
			unmarshalled = append(unmarshalled, v)
		},
	}
	unmarshaler := fieldpath.NewStringUnmarshaler(fp, f)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	compiled := fieldpath.Compile(unmarshaler)
	err = compiled.Unmarshal(buf)
	if err != nil {
		panic(err)
	}

	if !reflect.DeepEqual(unmarshalled, p.Field14) {
		if len(unmarshalled) == 0 && len(p.Field14) == 0 {
			return
		}
		panic(fmt.Errorf("unmarshalled %#v != p.Field14 %#v", unmarshalled, p.Field14))
	}

}

func TestCompiledNinNestedStructString(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewStringPath("test", "NinNestedStruct", test.ThetestDescription(), "Field1.Field4.Field14")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinNestedStruct(r, false)
	var unmarshalled []string
	f := FuncHandler{
		StringFunc: func(v string) {
			unmarshalled = append(unmarshalled, v)
		},
	}
	unmarshaler := fieldpath.NewStringUnmarshaler(fp, f)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	compiled := fieldpath.Compile(unmarshaler)
	err = compiled.Unmarshal(buf)
	if err != nil {
		panic(err)
	}

	if len(unmarshalled) > 0 {
		if !reflect.DeepEqual(unmarshalled[0], *p.Field1.Field4.Field14) {
			panic(fmt.Errorf("unmarshalled %v != p.Field1.Field4.Field14 %v", unmarshalled[0], *p.Field1.Field4.Field14))
		}
	} else {
		if p.Field1 != nil && p.Field1.Field4 != nil && p.Field1.Field4.Field14 != nil {
			t.Fatalf("Expected nil")
		}
	}

}

func TestUnmarshalFirstNinOptNativeBytes(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewBytesSinglePath("test", "NinOptNative", test.ThetestDescription(), "Field15")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinOptNative(r, false)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	unmarshalled, err := fp.UnmarshalFirst(buf)
	if err != nil {
		panic(err)
	}
	if !(p.Field15 != nil) {
		if unmarshalled != nil {
			t.Fatalf("unmarshalled != nil")
		}
		return
	}
	if unmarshalled == nil {
		t.Fatalf("ummarshalled == nil")
	}
	if !bytes.Equal(unmarshalled, p.Field15) {
		t.Fatalf("%v != %v", unmarshalled, p.Field15)
	}

}

func TestUnmarshalNinOptNativeBytes(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewBytesSinglePath("test", "NinOptNative", test.ThetestDescription(), "Field15")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinOptNative(r, false)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	unmarshalled, err := fp.Unmarshal(buf)
	if err != nil {
		panic(err)
	}
	if !(p.Field15 != nil) {
		if unmarshalled != nil {
			t.Fatalf("unmarshalled != nil")
		}
		return
	}
	if unmarshalled == nil {
		t.Fatalf("ummarshalled == nil")
	}
	if !bytes.Equal(unmarshalled, p.Field15) {
		t.Fatalf("%v != %v", unmarshalled, p.Field15)
	}

}

func TestCompiledNinOptNativeBytes(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewBytesPath("test", "NinOptNative", test.ThetestDescription(), "Field15")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinOptNative(r, false)
	var unmarshalled [][]byte
	f := FuncHandler{
		BytesFunc: func(v []byte) {
			unmarshalled = append(unmarshalled, v)
		},
	}
	unmarshaler := fieldpath.NewBytesUnmarshaler(fp, f)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	compiled := fieldpath.Compile(unmarshaler)
	err = compiled.Unmarshal(buf)
	if err != nil {
		panic(err)
	}

	if len(unmarshalled) > 0 {
		if !reflect.DeepEqual(unmarshalled[0], p.Field15) {
			panic(fmt.Errorf("unmarshalled %v != p.Field15 %v", unmarshalled[0], p.Field15))
		}
	} else {
		if p.Field15 != nil {
			t.Fatalf("Expected nil")
		}
	}

}

type sorterNinOptNativeBytes []*test.NinOptNative

func (this sorterNinOptNativeBytes) Less(i, j int) bool {
	if !(this[i].Field15 != nil) {
		return true
	}
	if !(this[j].Field15 != nil) {
		return false
	}
	return (bytes.Compare(this[i].Field15, this[j].Field15) == -1)
}

func (this sorterNinOptNativeBytes) Len() int {
	return len(this)
}

func (this sorterNinOptNativeBytes) Swap(i, j int) {
	this[i], this[j] = this[j], this[i]
}

func TestSortNinOptNativeBytes(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	l := r.Intn(1000)
	unmarshalled := make(sorterNinOptNativeBytes, l)
	marshalled := make([][]byte, l)
	var err error
	for i := 0; i < l; i++ {
		unmarshalled[i] = test.NewPopulatedNinOptNative(r, false)
		marshalled[i], err = proto.Marshal(unmarshalled[i])
		if err != nil {
			panic(err)
		}
	}
	sort.Sort(unmarshalled)
	fp, err := fieldpath.NewBytesSinglePath("test", "NinOptNative", test.ThetestDescription(), "Field15")
	if err != nil {
		panic(err)
	}
	fpsorter := fieldpath.NewBytesSorter(&sortable{marshalled}, fp)
	sort.Sort(fpsorter)
	struct2 := &test.NinOptNative{}
	for i := 0; i < l; i++ {
		err = proto.Unmarshal(marshalled[i], struct2)
		if err != nil {
			panic(err)
		}
		if err := unmarshalled[i].VerboseEqual(struct2); err != nil {
			panic(err)
		}
	}
}

func TestUnmarshalFirstNinOptStructBytes(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewBytesSinglePath("test", "NinOptStruct", test.ThetestDescription(), "Field4.Field15")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinOptStruct(r, false)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	unmarshalled, err := fp.UnmarshalFirst(buf)
	if err != nil {
		panic(err)
	}
	if !(p.Field4 != nil && p.Field4.Field15 != nil) {
		if unmarshalled != nil {
			t.Fatalf("unmarshalled != nil")
		}
		return
	}
	if unmarshalled == nil {
		t.Fatalf("ummarshalled == nil")
	}
	if !bytes.Equal(unmarshalled, p.Field4.Field15) {
		t.Fatalf("%v != %v", unmarshalled, p.Field4.Field15)
	}

}

func TestUnmarshalNinOptStructBytes(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewBytesSinglePath("test", "NinOptStruct", test.ThetestDescription(), "Field4.Field15")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinOptStruct(r, false)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	unmarshalled, err := fp.Unmarshal(buf)
	if err != nil {
		panic(err)
	}
	if !(p.Field4 != nil && p.Field4.Field15 != nil) {
		if unmarshalled != nil {
			t.Fatalf("unmarshalled != nil")
		}
		return
	}
	if unmarshalled == nil {
		t.Fatalf("ummarshalled == nil")
	}
	if !bytes.Equal(unmarshalled, p.Field4.Field15) {
		t.Fatalf("%v != %v", unmarshalled, p.Field4.Field15)
	}

}

func TestCompiledNinOptStructBytes(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewBytesPath("test", "NinOptStruct", test.ThetestDescription(), "Field4.Field15")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinOptStruct(r, false)
	var unmarshalled [][]byte
	f := FuncHandler{
		BytesFunc: func(v []byte) {
			unmarshalled = append(unmarshalled, v)
		},
	}
	unmarshaler := fieldpath.NewBytesUnmarshaler(fp, f)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	compiled := fieldpath.Compile(unmarshaler)
	err = compiled.Unmarshal(buf)
	if err != nil {
		panic(err)
	}

	if len(unmarshalled) > 0 {
		if !reflect.DeepEqual(unmarshalled[0], p.Field4.Field15) {
			panic(fmt.Errorf("unmarshalled %v != p.Field4.Field15 %v", unmarshalled[0], p.Field4.Field15))
		}
	} else {
		if p.Field4 != nil && p.Field4.Field15 != nil {
			t.Fatalf("Expected nil")
		}
	}

}

type sorterNinOptStructBytes []*test.NinOptStruct

func (this sorterNinOptStructBytes) Less(i, j int) bool {
	if !(this[i].Field4 != nil && this[i].Field4.Field15 != nil) {
		return true
	}
	if !(this[j].Field4 != nil && this[j].Field4.Field15 != nil) {
		return false
	}
	return (bytes.Compare(this[i].Field4.Field15, this[j].Field4.Field15) == -1)
}

func (this sorterNinOptStructBytes) Len() int {
	return len(this)
}

func (this sorterNinOptStructBytes) Swap(i, j int) {
	this[i], this[j] = this[j], this[i]
}

func TestSortNinOptStructBytes(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	l := r.Intn(1000)
	unmarshalled := make(sorterNinOptStructBytes, l)
	marshalled := make([][]byte, l)
	var err error
	for i := 0; i < l; i++ {
		unmarshalled[i] = test.NewPopulatedNinOptStruct(r, false)
		marshalled[i], err = proto.Marshal(unmarshalled[i])
		if err != nil {
			panic(err)
		}
	}
	sort.Sort(unmarshalled)
	fp, err := fieldpath.NewBytesSinglePath("test", "NinOptStruct", test.ThetestDescription(), "Field4.Field15")
	if err != nil {
		panic(err)
	}
	fpsorter := fieldpath.NewBytesSorter(&sortable{marshalled}, fp)
	sort.Sort(fpsorter)
	struct2 := &test.NinOptStruct{}
	for i := 0; i < l; i++ {
		err = proto.Unmarshal(marshalled[i], struct2)
		if err != nil {
			panic(err)
		}
		if err := unmarshalled[i].VerboseEqual(struct2); err != nil {
			panic(err)
		}
	}
}

func TestCompiledNinNestedStructBytes(t *testing.T) {
	r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
	fp, err := fieldpath.NewBytesPath("test", "NinNestedStruct", test.ThetestDescription(), "Field1.Field4.Field15")
	if err != nil {
		panic(err)
	}
	p := test.NewPopulatedNinNestedStruct(r, false)
	var unmarshalled [][]byte
	f := FuncHandler{
		BytesFunc: func(v []byte) {
			unmarshalled = append(unmarshalled, v)
		},
	}
	unmarshaler := fieldpath.NewBytesUnmarshaler(fp, f)
	buf, err := proto.Marshal(p)
	if err != nil {
		panic(err)
	}
	compiled := fieldpath.Compile(unmarshaler)
	err = compiled.Unmarshal(buf)
	if err != nil {
		panic(err)
	}

	if len(unmarshalled) > 0 {
		if !reflect.DeepEqual(unmarshalled[0], p.Field1.Field4.Field15) {
			panic(fmt.Errorf("unmarshalled %v != p.Field1.Field4.Field15 %v", unmarshalled[0], p.Field1.Field4.Field15))
		}
	} else {
		if p.Field1 != nil && p.Field1.Field4 != nil && p.Field1.Field4.Field15 != nil {
			t.Fatalf("Expected nil")
		}
	}

}
