// Code generated by protoc-gen-gogo.
// source: combos/unmarshaler/mapsproto2.proto
// DO NOT EDIT!

/*
	Package proto2_maps is a generated protocol buffer package.

	It is generated from these files:
		combos/unmarshaler/mapsproto2.proto

	It has these top-level messages:
		FloatingPoint
		AllMaps
		AllMapsOrdered
*/
package proto2_maps

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import github_com_gogo_protobuf_protoc_gen_gogo_descriptor "github.com/gogo/protobuf/protoc-gen-gogo/descriptor"
import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
import compress_gzip "compress/gzip"
import bytes "bytes"
import io_ioutil "io/ioutil"

import strconv "strconv"

import strings "strings"
import sort "sort"
import reflect "reflect"
import github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type MapEnum int32

const (
	MA MapEnum = 0
	MB MapEnum = 1
	MC MapEnum = 2
)

var MapEnum_name = map[int32]string{
	0: "MA",
	1: "MB",
	2: "MC",
}
var MapEnum_value = map[string]int32{
	"MA": 0,
	"MB": 1,
	"MC": 2,
}

func (x MapEnum) Enum() *MapEnum {
	p := new(MapEnum)
	*p = x
	return p
}
func (x MapEnum) MarshalJSON() ([]byte, error) {
	return proto.MarshalJSONEnum(MapEnum_name, int32(x))
}
func (x *MapEnum) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MapEnum_value, data, "MapEnum")
	if err != nil {
		return err
	}
	*x = MapEnum(value)
	return nil
}
func (MapEnum) EnumDescriptor() ([]byte, []int) { return fileDescriptorMapsproto2, []int{0} }

type FloatingPoint struct {
	F                *float64 `protobuf:"fixed64,1,opt,name=f" json:"f,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *FloatingPoint) Reset()                    { *m = FloatingPoint{} }
func (*FloatingPoint) ProtoMessage()               {}
func (*FloatingPoint) Descriptor() ([]byte, []int) { return fileDescriptorMapsproto2, []int{0} }

type AllMaps struct {
	StringToDoubleMap map[string]float64        `protobuf:"bytes,1,rep,name=StringToDoubleMap,json=stringToDoubleMap" json:"StringToDoubleMap,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	StringToFloatMap  map[string]float32        `protobuf:"bytes,2,rep,name=StringToFloatMap,json=stringToFloatMap" json:"StringToFloatMap,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	Int32Map          map[int32]int32           `protobuf:"bytes,3,rep,name=Int32Map,json=int32Map" json:"Int32Map,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Int64Map          map[int64]int64           `protobuf:"bytes,4,rep,name=Int64Map,json=int64Map" json:"Int64Map,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Uint32Map         map[uint32]uint32         `protobuf:"bytes,5,rep,name=Uint32Map,json=uint32Map" json:"Uint32Map,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Uint64Map         map[uint64]uint64         `protobuf:"bytes,6,rep,name=Uint64Map,json=uint64Map" json:"Uint64Map,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Sint32Map         map[int32]int32           `protobuf:"bytes,7,rep,name=Sint32Map,json=sint32Map" json:"Sint32Map,omitempty" protobuf_key:"zigzag32,1,opt,name=key" protobuf_val:"zigzag32,2,opt,name=value"`
	Sint64Map         map[int64]int64           `protobuf:"bytes,8,rep,name=Sint64Map,json=sint64Map" json:"Sint64Map,omitempty" protobuf_key:"zigzag64,1,opt,name=key" protobuf_val:"zigzag64,2,opt,name=value"`
	Fixed32Map        map[uint32]uint32         `protobuf:"bytes,9,rep,name=Fixed32Map,json=fixed32Map" json:"Fixed32Map,omitempty" protobuf_key:"fixed32,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	Sfixed32Map       map[int32]int32           `protobuf:"bytes,10,rep,name=Sfixed32Map,json=sfixed32Map" json:"Sfixed32Map,omitempty" protobuf_key:"fixed32,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	Fixed64Map        map[uint64]uint64         `protobuf:"bytes,11,rep,name=Fixed64Map,json=fixed64Map" json:"Fixed64Map,omitempty" protobuf_key:"fixed64,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	Sfixed64Map       map[int64]int64           `protobuf:"bytes,12,rep,name=Sfixed64Map,json=sfixed64Map" json:"Sfixed64Map,omitempty" protobuf_key:"fixed64,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	BoolMap           map[bool]bool             `protobuf:"bytes,13,rep,name=BoolMap,json=boolMap" json:"BoolMap,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	StringMap         map[string]string         `protobuf:"bytes,14,rep,name=StringMap,json=stringMap" json:"StringMap,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	StringToBytesMap  map[string][]byte         `protobuf:"bytes,15,rep,name=StringToBytesMap,json=stringToBytesMap" json:"StringToBytesMap,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	StringToEnumMap   map[string]MapEnum        `protobuf:"bytes,16,rep,name=StringToEnumMap,json=stringToEnumMap" json:"StringToEnumMap,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value,enum=proto2.maps.MapEnum"`
	StringToMsgMap    map[string]*FloatingPoint `protobuf:"bytes,17,rep,name=StringToMsgMap,json=stringToMsgMap" json:"StringToMsgMap,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	XXX_unrecognized  []byte                    `json:"-"`
}

func (m *AllMaps) Reset()                    { *m = AllMaps{} }
func (*AllMaps) ProtoMessage()               {}
func (*AllMaps) Descriptor() ([]byte, []int) { return fileDescriptorMapsproto2, []int{1} }

type AllMapsOrdered struct {
	StringToDoubleMap map[string]float64        `protobuf:"bytes,1,rep,name=StringToDoubleMap,json=stringToDoubleMap" json:"StringToDoubleMap,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	StringToFloatMap  map[string]float32        `protobuf:"bytes,2,rep,name=StringToFloatMap,json=stringToFloatMap" json:"StringToFloatMap,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	Int32Map          map[int32]int32           `protobuf:"bytes,3,rep,name=Int32Map,json=int32Map" json:"Int32Map,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Int64Map          map[int64]int64           `protobuf:"bytes,4,rep,name=Int64Map,json=int64Map" json:"Int64Map,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Uint32Map         map[uint32]uint32         `protobuf:"bytes,5,rep,name=Uint32Map,json=uint32Map" json:"Uint32Map,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Uint64Map         map[uint64]uint64         `protobuf:"bytes,6,rep,name=Uint64Map,json=uint64Map" json:"Uint64Map,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Sint32Map         map[int32]int32           `protobuf:"bytes,7,rep,name=Sint32Map,json=sint32Map" json:"Sint32Map,omitempty" protobuf_key:"zigzag32,1,opt,name=key" protobuf_val:"zigzag32,2,opt,name=value"`
	Sint64Map         map[int64]int64           `protobuf:"bytes,8,rep,name=Sint64Map,json=sint64Map" json:"Sint64Map,omitempty" protobuf_key:"zigzag64,1,opt,name=key" protobuf_val:"zigzag64,2,opt,name=value"`
	Fixed32Map        map[uint32]uint32         `protobuf:"bytes,9,rep,name=Fixed32Map,json=fixed32Map" json:"Fixed32Map,omitempty" protobuf_key:"fixed32,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	Sfixed32Map       map[int32]int32           `protobuf:"bytes,10,rep,name=Sfixed32Map,json=sfixed32Map" json:"Sfixed32Map,omitempty" protobuf_key:"fixed32,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	Fixed64Map        map[uint64]uint64         `protobuf:"bytes,11,rep,name=Fixed64Map,json=fixed64Map" json:"Fixed64Map,omitempty" protobuf_key:"fixed64,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	Sfixed64Map       map[int64]int64           `protobuf:"bytes,12,rep,name=Sfixed64Map,json=sfixed64Map" json:"Sfixed64Map,omitempty" protobuf_key:"fixed64,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	BoolMap           map[bool]bool             `protobuf:"bytes,13,rep,name=BoolMap,json=boolMap" json:"BoolMap,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	StringMap         map[string]string         `protobuf:"bytes,14,rep,name=StringMap,json=stringMap" json:"StringMap,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	StringToBytesMap  map[string][]byte         `protobuf:"bytes,15,rep,name=StringToBytesMap,json=stringToBytesMap" json:"StringToBytesMap,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	StringToEnumMap   map[string]MapEnum        `protobuf:"bytes,16,rep,name=StringToEnumMap,json=stringToEnumMap" json:"StringToEnumMap,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value,enum=proto2.maps.MapEnum"`
	StringToMsgMap    map[string]*FloatingPoint `protobuf:"bytes,17,rep,name=StringToMsgMap,json=stringToMsgMap" json:"StringToMsgMap,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	XXX_unrecognized  []byte                    `json:"-"`
}

func (m *AllMapsOrdered) Reset()                    { *m = AllMapsOrdered{} }
func (*AllMapsOrdered) ProtoMessage()               {}
func (*AllMapsOrdered) Descriptor() ([]byte, []int) { return fileDescriptorMapsproto2, []int{2} }

func init() {
	proto.RegisterType((*FloatingPoint)(nil), "proto2.maps.FloatingPoint")
	proto.RegisterType((*AllMaps)(nil), "proto2.maps.AllMaps")
	proto.RegisterType((*AllMapsOrdered)(nil), "proto2.maps.AllMapsOrdered")
	proto.RegisterEnum("proto2.maps.MapEnum", MapEnum_name, MapEnum_value)
}
func (this *FloatingPoint) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return Mapsproto2Description()
}
func (this *AllMaps) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return Mapsproto2Description()
}
func (this *AllMapsOrdered) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return Mapsproto2Description()
}
func Mapsproto2Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	d := &github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet{}
	var gzipped = []byte{
		// 4213 bytes of a gzipped FileDescriptorSet
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xec, 0x5a, 0x5d, 0x6c, 0x23, 0xd7,
		0x75, 0xd6, 0xf0, 0x47, 0x24, 0x0f, 0x29, 0x72, 0x74, 0x25, 0xaf, 0xb9, 0x72, 0xcc, 0xdd, 0xd5,
		0xda, 0xb1, 0xbc, 0x9b, 0x68, 0x5d, 0x79, 0x77, 0xbd, 0xe6, 0xc6, 0x36, 0x28, 0x89, 0xab, 0xd5,
		0x46, 0x7f, 0x1d, 0x4a, 0xf6, 0xda, 0x81, 0x31, 0x1d, 0x0d, 0x2f, 0xa9, 0xd9, 0x25, 0x67, 0xd8,
		0x99, 0xe1, 0x7a, 0xe5, 0xa7, 0x2d, 0xdc, 0x36, 0x08, 0x8a, 0xfe, 0xa4, 0x2d, 0x50, 0xc7, 0x71,
		0xd2, 0x38, 0x40, 0xeb, 0x34, 0xe9, 0x4f, 0xd2, 0x3f, 0x14, 0x7d, 0xca, 0x4b, 0xda, 0x3c, 0x15,
		0xc9, 0x5b, 0x1e, 0xf2, 0x90, 0x55, 0x0d, 0xd4, 0x6d, 0xd3, 0xd6, 0x05, 0x0c, 0x34, 0x80, 0x5f,
		0x8a, 0xfb, 0x37, 0x9c, 0x21, 0x87, 0x1c, 0x2a, 0x40, 0x12, 0x3f, 0xf8, 0x49, 0xba, 0xe7, 0x9e,
		0xef, 0x9b, 0x73, 0xcf, 0x3d, 0xf7, 0x9c, 0x33, 0x77, 0x08, 0x9f, 0xbd, 0x08, 0xa7, 0x9b, 0x96,
		0xd5, 0x6c, 0xe1, 0x0b, 0x1d, 0xdb, 0x72, 0xad, 0xfd, 0x6e, 0xe3, 0x42, 0x1d, 0x3b, 0xba, 0x6d,
		0x74, 0x5c, 0xcb, 0x5e, 0xa4, 0x32, 0x54, 0x60, 0x1a, 0x8b, 0x42, 0x63, 0x7e, 0x13, 0xa6, 0xaf,
		0x19, 0x2d, 0xbc, 0xea, 0x29, 0xd6, 0xb0, 0x8b, 0xae, 0x40, 0xa2, 0x61, 0xb4, 0x70, 0x51, 0x3a,
		0x1d, 0x5f, 0xc8, 0x2e, 0x3d, 0xb2, 0xd8, 0x07, 0x5a, 0x0c, 0x22, 0x76, 0x88, 0x58, 0xa1, 0x88,
		0xf9, 0x77, 0x12, 0x30, 0x13, 0x32, 0x8b, 0x10, 0x24, 0x4c, 0xad, 0x4d, 0x18, 0xa5, 0x85, 0x8c,
		0x42, 0xff, 0x47, 0x45, 0x48, 0x75, 0x34, 0xfd, 0xb6, 0xd6, 0xc4, 0xc5, 0x18, 0x15, 0x8b, 0x21,
		0x2a, 0x01, 0xd4, 0x71, 0x07, 0x9b, 0x75, 0x6c, 0xea, 0x87, 0xc5, 0xf8, 0xe9, 0xf8, 0x42, 0x46,
		0xf1, 0x49, 0xd0, 0x79, 0x98, 0xee, 0x74, 0xf7, 0x5b, 0x86, 0xae, 0xfa, 0xd4, 0xe0, 0x74, 0x7c,
		0x21, 0xa9, 0xc8, 0x6c, 0x62, 0xb5, 0xa7, 0xfc, 0x18, 0x14, 0x5e, 0xc1, 0xda, 0x6d, 0xbf, 0x6a,
		0x96, 0xaa, 0xe6, 0x89, 0xd8, 0xa7, 0xb8, 0x02, 0xb9, 0x36, 0x76, 0x1c, 0xad, 0x89, 0x55, 0xf7,
		0xb0, 0x83, 0x8b, 0x09, 0xba, 0xfa, 0xd3, 0x03, 0xab, 0xef, 0x5f, 0x79, 0x96, 0xa3, 0x76, 0x0f,
		0x3b, 0x18, 0x55, 0x20, 0x83, 0xcd, 0x6e, 0x9b, 0x31, 0x24, 0x87, 0xf8, 0xaf, 0x6a, 0x76, 0xdb,
		0xfd, 0x2c, 0x69, 0x02, 0xe3, 0x14, 0x29, 0x07, 0xdb, 0x77, 0x0c, 0x1d, 0x17, 0x27, 0x29, 0xc1,
		0x63, 0x03, 0x04, 0x35, 0x36, 0xdf, 0xcf, 0x21, 0x70, 0x68, 0x05, 0x32, 0xf8, 0xae, 0x8b, 0x4d,
		0xc7, 0xb0, 0xcc, 0x62, 0x8a, 0x92, 0x3c, 0x1a, 0xb2, 0x8b, 0xb8, 0x55, 0xef, 0xa7, 0xe8, 0xe1,
		0xd0, 0x65, 0x48, 0x59, 0x1d, 0xd7, 0xb0, 0x4c, 0xa7, 0x98, 0x3e, 0x2d, 0x2d, 0x64, 0x97, 0x3e,
		0x16, 0x1a, 0x08, 0xdb, 0x4c, 0x47, 0x11, 0xca, 0x68, 0x1d, 0x64, 0xc7, 0xea, 0xda, 0x3a, 0x56,
		0x75, 0xab, 0x8e, 0x55, 0xc3, 0x6c, 0x58, 0xc5, 0x0c, 0x25, 0x38, 0x35, 0xb8, 0x10, 0xaa, 0xb8,
		0x62, 0xd5, 0xf1, 0xba, 0xd9, 0xb0, 0x94, 0xbc, 0x13, 0x18, 0xa3, 0x13, 0x30, 0xe9, 0x1c, 0x9a,
		0xae, 0x76, 0xb7, 0x98, 0xa3, 0x11, 0xc2, 0x47, 0xf3, 0xff, 0x97, 0x84, 0xc2, 0x38, 0x21, 0x76,
		0x15, 0x92, 0x0d, 0xb2, 0xca, 0x62, 0xec, 0x38, 0x3e, 0x60, 0x98, 0xa0, 0x13, 0x27, 0x7f, 0x4a,
		0x27, 0x56, 0x20, 0x6b, 0x62, 0xc7, 0xc5, 0x75, 0x16, 0x11, 0xf1, 0x31, 0x63, 0x0a, 0x18, 0x68,
		0x30, 0xa4, 0x12, 0x3f, 0x55, 0x48, 0xdd, 0x84, 0x82, 0x67, 0x92, 0x6a, 0x6b, 0x66, 0x53, 0xc4,
		0xe6, 0x85, 0x28, 0x4b, 0x16, 0xab, 0x02, 0xa7, 0x10, 0x98, 0x92, 0xc7, 0x81, 0x31, 0x5a, 0x05,
		0xb0, 0x4c, 0x6c, 0x35, 0xd4, 0x3a, 0xd6, 0x5b, 0xc5, 0xf4, 0x10, 0x2f, 0x6d, 0x13, 0x95, 0x01,
		0x2f, 0x59, 0x4c, 0xaa, 0xb7, 0xd0, 0xd3, 0xbd, 0x50, 0x4b, 0x0d, 0x89, 0x94, 0x4d, 0x76, 0xc8,
		0x06, 0xa2, 0x6d, 0x0f, 0xf2, 0x36, 0x26, 0x71, 0x8f, 0xeb, 0x7c, 0x65, 0x19, 0x6a, 0xc4, 0x62,
		0xe4, 0xca, 0x14, 0x0e, 0x63, 0x0b, 0x9b, 0xb2, 0xfd, 0x43, 0x74, 0x16, 0x3c, 0x81, 0x4a, 0xc3,
		0x0a, 0x68, 0x16, 0xca, 0x09, 0xe1, 0x96, 0xd6, 0xc6, 0x73, 0x57, 0x20, 0x1f, 0x74, 0x0f, 0x9a,
		0x85, 0xa4, 0xe3, 0x6a, 0xb6, 0x4b, 0xa3, 0x30, 0xa9, 0xb0, 0x01, 0x92, 0x21, 0x8e, 0xcd, 0x3a,
		0xcd, 0x72, 0x49, 0x85, 0xfc, 0x3b, 0xf7, 0x14, 0x4c, 0x05, 0x1e, 0x3f, 0x2e, 0x70, 0xfe, 0xf5,
		0x49, 0x98, 0x0d, 0x8b, 0xb9, 0xd0, 0xf0, 0x3f, 0x01, 0x93, 0x66, 0xb7, 0xbd, 0x8f, 0xed, 0x62,
		0x9c, 0x32, 0xf0, 0x11, 0xaa, 0x40, 0xb2, 0xa5, 0xed, 0xe3, 0x56, 0x31, 0x71, 0x5a, 0x5a, 0xc8,
		0x2f, 0x9d, 0x1f, 0x2b, 0xaa, 0x17, 0x37, 0x08, 0x44, 0x61, 0x48, 0xf4, 0x2c, 0x24, 0x78, 0x8a,
		0x23, 0x0c, 0xe7, 0xc6, 0x63, 0x20, 0xb1, 0xa8, 0x50, 0x1c, 0x7a, 0x08, 0x32, 0xe4, 0x2f, 0xf3,
		0xed, 0x24, 0xb5, 0x39, 0x4d, 0x04, 0xc4, 0xaf, 0x68, 0x0e, 0xd2, 0x34, 0xcc, 0xea, 0x58, 0x94,
		0x06, 0x6f, 0x4c, 0x36, 0xa6, 0x8e, 0x1b, 0x5a, 0xb7, 0xe5, 0xaa, 0x77, 0xb4, 0x56, 0x17, 0xd3,
		0x80, 0xc9, 0x28, 0x39, 0x2e, 0x7c, 0x9e, 0xc8, 0xd0, 0x29, 0xc8, 0xb2, 0xa8, 0x34, 0xcc, 0x3a,
		0xbe, 0x4b, 0xb3, 0x4f, 0x52, 0x61, 0x81, 0xba, 0x4e, 0x24, 0xe4, 0xf1, 0xb7, 0x1c, 0xcb, 0x14,
		0x5b, 0x4b, 0x1f, 0x41, 0x04, 0xf4, 0xf1, 0x4f, 0xf5, 0x27, 0xbe, 0x87, 0xc3, 0x97, 0xd7, 0x1f,
		0x8b, 0xf3, 0x7f, 0x1f, 0x83, 0x04, 0x3d, 0x6f, 0x05, 0xc8, 0xee, 0xbe, 0xb8, 0x53, 0x55, 0x57,
		0xb7, 0xf7, 0x96, 0x37, 0xaa, 0xb2, 0x84, 0xf2, 0x00, 0x54, 0x70, 0x6d, 0x63, 0xbb, 0xb2, 0x2b,
		0xc7, 0xbc, 0xf1, 0xfa, 0xd6, 0xee, 0xe5, 0x8b, 0x72, 0xdc, 0x03, 0xec, 0x31, 0x41, 0xc2, 0xaf,
		0xf0, 0xe4, 0x92, 0x9c, 0x44, 0x32, 0xe4, 0x18, 0xc1, 0xfa, 0xcd, 0xea, 0xea, 0xe5, 0x8b, 0xf2,
		0x64, 0x50, 0xf2, 0xe4, 0x92, 0x9c, 0x42, 0x53, 0x90, 0xa1, 0x92, 0xe5, 0xed, 0xed, 0x0d, 0x39,
		0xed, 0x71, 0xd6, 0x76, 0x95, 0xf5, 0xad, 0x35, 0x39, 0xe3, 0x71, 0xae, 0x29, 0xdb, 0x7b, 0x3b,
		0x32, 0x78, 0x0c, 0x9b, 0xd5, 0x5a, 0xad, 0xb2, 0x56, 0x95, 0xb3, 0x9e, 0xc6, 0xf2, 0x8b, 0xbb,
		0xd5, 0x9a, 0x9c, 0x0b, 0x98, 0xf5, 0xe4, 0x92, 0x3c, 0xe5, 0x3d, 0xa2, 0xba, 0xb5, 0xb7, 0x29,
		0xe7, 0xd1, 0x34, 0x4c, 0xb1, 0x47, 0x08, 0x23, 0x0a, 0x7d, 0xa2, 0xcb, 0x17, 0x65, 0xb9, 0x67,
		0x08, 0x63, 0x99, 0x0e, 0x08, 0x2e, 0x5f, 0x94, 0xd1, 0xfc, 0x0a, 0x24, 0x69, 0x74, 0x21, 0x04,
		0xf9, 0x8d, 0xca, 0x72, 0x75, 0x43, 0xdd, 0xde, 0xd9, 0x5d, 0xdf, 0xde, 0xaa, 0x6c, 0xc8, 0x52,
		0x4f, 0xa6, 0x54, 0x7f, 0x79, 0x6f, 0x5d, 0xa9, 0xae, 0xca, 0x31, 0xbf, 0x6c, 0xa7, 0x5a, 0xd9,
		0xad, 0xae, 0xca, 0xf1, 0x79, 0x1d, 0x66, 0xc3, 0xf2, 0x4c, 0xe8, 0xc9, 0xf0, 0x6d, 0x71, 0x6c,
		0xc8, 0x16, 0x53, 0xae, 0x81, 0x2d, 0xfe, 0xaa, 0x04, 0x33, 0x21, 0xb9, 0x36, 0xf4, 0x21, 0xcf,
		0x41, 0x92, 0x85, 0x28, 0xab, 0x3e, 0x8f, 0x87, 0x26, 0x6d, 0x1a, 0xb0, 0x03, 0x15, 0x88, 0xe2,
		0xfc, 0x15, 0x38, 0x3e, 0xa4, 0x02, 0x13, 0x8a, 0x01, 0x23, 0x5f, 0x93, 0xa0, 0x38, 0x8c, 0x3b,
		0x22, 0x51, 0xc4, 0x02, 0x89, 0xe2, 0x6a, 0xbf, 0x01, 0x67, 0x86, 0xaf, 0x61, 0xc0, 0x8a, 0xb7,
		0x25, 0x38, 0x11, 0xde, 0xa8, 0x84, 0xda, 0xf0, 0x2c, 0x4c, 0xb6, 0xb1, 0x7b, 0x60, 0x89, 0x62,
		0xfd, 0xf1, 0x90, 0x12, 0x40, 0xa6, 0xfb, 0x7d, 0xc5, 0x51, 0xfe, 0x1a, 0x12, 0x1f, 0xd6, 0x6d,
		0x30, 0x6b, 0x06, 0x2c, 0xfd, 0x5c, 0x0c, 0x1e, 0x08, 0x25, 0x0f, 0x35, 0xf4, 0x61, 0x00, 0xc3,
		0xec, 0x74, 0x5d, 0x56, 0x90, 0x59, 0x7e, 0xca, 0x50, 0x09, 0x3d, 0xfb, 0x24, 0xf7, 0x74, 0x5d,
		0x6f, 0x3e, 0x4e, 0xe7, 0x81, 0x89, 0xa8, 0xc2, 0x95, 0x9e, 0xa1, 0x09, 0x6a, 0x68, 0x69, 0xc8,
		0x4a, 0x07, 0x6a, 0xdd, 0x13, 0x20, 0xeb, 0x2d, 0x03, 0x9b, 0xae, 0xea, 0xb8, 0x36, 0xd6, 0xda,
		0x86, 0xd9, 0xa4, 0x09, 0x38, 0x5d, 0x4e, 0x36, 0xb4, 0x96, 0x83, 0x95, 0x02, 0x9b, 0xae, 0x89,
		0x59, 0x82, 0xa0, 0x55, 0xc6, 0xf6, 0x21, 0x26, 0x03, 0x08, 0x36, 0xed, 0x21, 0xe6, 0x3f, 0x9f,
		0x82, 0xac, 0xaf, 0xad, 0x43, 0x67, 0x20, 0x77, 0x4b, 0xbb, 0xa3, 0xa9, 0xa2, 0x55, 0x67, 0x9e,
		0xc8, 0x12, 0xd9, 0x0e, 0x6f, 0xd7, 0x9f, 0x80, 0x59, 0xaa, 0x62, 0x75, 0x5d, 0x6c, 0xab, 0x7a,
		0x4b, 0x73, 0x1c, 0xea, 0xb4, 0x34, 0x55, 0x45, 0x64, 0x6e, 0x9b, 0x4c, 0xad, 0x88, 0x19, 0x74,
		0x09, 0x66, 0x28, 0xa2, 0xdd, 0x6d, 0xb9, 0x46, 0xa7, 0x85, 0x55, 0xf2, 0xf2, 0xe0, 0xd0, 0x44,
		0xec, 0x59, 0x36, 0x4d, 0x34, 0x36, 0xb9, 0x02, 0xb1, 0xc8, 0x41, 0x6b, 0xf0, 0x30, 0x85, 0x35,
		0xb1, 0x89, 0x6d, 0xcd, 0xc5, 0x2a, 0xfe, 0xd5, 0xae, 0xd6, 0x72, 0x54, 0xcd, 0xac, 0xab, 0x07,
		0x9a, 0x73, 0x50, 0x9c, 0xf5, 0x13, 0x9c, 0x24, 0xba, 0x6b, 0x5c, 0xb5, 0x4a, 0x35, 0x2b, 0x66,
		0xfd, 0xba, 0xe6, 0x1c, 0xa0, 0x32, 0x9c, 0xa0, 0x44, 0x8e, 0x6b, 0x1b, 0x66, 0x53, 0xd5, 0x0f,
		0xb0, 0x7e, 0x5b, 0xed, 0xba, 0x8d, 0x2b, 0xc5, 0x87, 0xfc, 0x0c, 0xd4, 0xc8, 0x1a, 0xd5, 0x59,
		0x21, 0x2a, 0x7b, 0x6e, 0xe3, 0x0a, 0xaa, 0x41, 0x8e, 0xec, 0x47, 0xdb, 0x78, 0x15, 0xab, 0x0d,
		0xcb, 0xa6, 0xc5, 0x25, 0x1f, 0x72, 0xb8, 0x7d, 0x4e, 0x5c, 0xdc, 0xe6, 0x80, 0x4d, 0xab, 0x8e,
		0xcb, 0xc9, 0xda, 0x4e, 0xb5, 0xba, 0xaa, 0x64, 0x05, 0xcb, 0x35, 0xcb, 0x26, 0x31, 0xd5, 0xb4,
		0x3c, 0x1f, 0x67, 0x59, 0x4c, 0x35, 0x2d, 0xe1, 0xe1, 0x4b, 0x30, 0xa3, 0xeb, 0x6c, 0xd9, 0x86,
		0xae, 0xf2, 0x2e, 0xdf, 0x29, 0xca, 0x01, 0x7f, 0xe9, 0xfa, 0x1a, 0x53, 0xe0, 0x61, 0xee, 0xa0,
		0xa7, 0xe1, 0x81, 0x9e, 0xbf, 0xfc, 0xc0, 0xe9, 0x81, 0x55, 0xf6, 0x43, 0x2f, 0xc1, 0x4c, 0xe7,
		0x70, 0x10, 0x88, 0x02, 0x4f, 0xec, 0x1c, 0xf6, 0xc3, 0x1e, 0xa5, 0x6f, 0x6e, 0x36, 0xd6, 0x35,
		0x17, 0xd7, 0x8b, 0x0f, 0xfa, 0xb5, 0x7d, 0x13, 0xe8, 0x02, 0xc8, 0xba, 0xae, 0x62, 0x53, 0xdb,
		0x6f, 0x61, 0x55, 0xb3, 0xb1, 0xa9, 0x39, 0xc5, 0x53, 0x7e, 0xe5, 0xbc, 0xae, 0x57, 0xe9, 0x6c,
		0x85, 0x4e, 0xa2, 0x73, 0x30, 0x6d, 0xed, 0xdf, 0xd2, 0x59, 0x70, 0xa9, 0x1d, 0x1b, 0x37, 0x8c,
		0xbb, 0xc5, 0x47, 0xa8, 0x9b, 0x0a, 0x64, 0x82, 0x86, 0xd6, 0x0e, 0x15, 0xa3, 0xc7, 0x41, 0xd6,
		0x9d, 0x03, 0xcd, 0xee, 0xd0, 0xea, 0xee, 0x74, 0x34, 0x1d, 0x17, 0x1f, 0x65, 0xaa, 0x4c, 0xbe,
		0x25, 0xc4, 0xe8, 0x26, 0xcc, 0x76, 0x4d, 0xc3, 0x74, 0xb1, 0xdd, 0xb1, 0x31, 0x69, 0xd2, 0xd9,
		0x49, 0x2b, 0xfe, 0x5b, 0x6a, 0x48, 0x9b, 0xbd, 0xe7, 0xd7, 0x66, 0xbb, 0xab, 0xcc, 0x74, 0x07,
		0x85, 0xf3, 0x65, 0xc8, 0xf9, 0x37, 0x1d, 0x65, 0x80, 0x6d, 0xbb, 0x2c, 0x91, 0x1a, 0xba, 0xb2,
		0xbd, 0x4a, 0xaa, 0xdf, 0x4b, 0x55, 0x39, 0x46, 0xaa, 0xf0, 0xc6, 0xfa, 0x6e, 0x55, 0x55, 0xf6,
		0xb6, 0x76, 0xd7, 0x37, 0xab, 0x72, 0xfc, 0x5c, 0x26, 0xfd, 0x6e, 0x4a, 0xbe, 0x77, 0xef, 0xde,
		0xbd, 0xd8, 0x8d, 0x44, 0xfa, 0xe3, 0xf2, 0x63, 0xf3, 0xdf, 0x89, 0x41, 0x3e, 0xd8, 0xff, 0xa2,
		0x4f, 0xc1, 0x83, 0xe2, 0x65, 0xd5, 0xc1, 0xae, 0xfa, 0x8a, 0x61, 0xd3, 0x68, 0x6c, 0x6b, 0xac,
		0x83, 0xf4, 0x1c, 0x39, 0xcb, 0xb5, 0x6a, 0xd8, 0x7d, 0xc1, 0xb0, 0x49, 0xac, 0xb5, 0x35, 0x17,
		0x6d, 0xc0, 0x29, 0xd3, 0x52, 0x1d, 0x57, 0x33, 0xeb, 0x9a, 0x5d, 0x57, 0x7b, 0xd7, 0x04, 0xaa,
		0xa6, 0xeb, 0xd8, 0x71, 0x2c, 0x56, 0x08, 0x3c, 0x96, 0x8f, 0x99, 0x56, 0x8d, 0x2b, 0xf7, 0x32,
		0x64, 0x85, 0xab, 0xf6, 0x6d, 0x7a, 0x7c, 0xd8, 0xa6, 0x3f, 0x04, 0x99, 0xb6, 0xd6, 0x51, 0xb1,
		0xe9, 0xda, 0x87, 0xb4, 0x6b, 0x4b, 0x2b, 0xe9, 0xb6, 0xd6, 0xa9, 0x92, 0xf1, 0xcf, 0x6e, 0x27,
		0x7c, 0xde, 0x9c, 0xff, 0x61, 0x1c, 0x72, 0xfe, 0xce, 0x8d, 0x34, 0xc2, 0x3a, 0xcd, 0xd2, 0x12,
		0x3d, 0xc4, 0x67, 0x47, 0xf6, 0x79, 0x8b, 0x2b, 0x24, 0x7d, 0x97, 0x27, 0x59, 0x3f, 0xa5, 0x30,
		0x24, 0x29, 0x9d, 0xe4, 0xd8, 0x62, 0xd6, 0xa5, 0xa7, 0x15, 0x3e, 0x42, 0x6b, 0x30, 0x79, 0xcb,
		0xa1, 0xdc, 0x93, 0x94, 0xfb, 0x91, 0xd1, 0xdc, 0x37, 0x6a, 0x94, 0x3c, 0x73, 0xa3, 0xa6, 0x6e,
		0x6d, 0x2b, 0x9b, 0x95, 0x0d, 0x85, 0xc3, 0xd1, 0x49, 0x48, 0xb4, 0xb4, 0x57, 0x0f, 0x83, 0x89,
		0x9e, 0x8a, 0xc6, 0x75, 0xfc, 0x49, 0x48, 0xbc, 0x82, 0xb5, 0xdb, 0xc1, 0xf4, 0x4a, 0x45, 0x3f,
		0xc3, 0x03, 0x70, 0x01, 0x92, 0xd4, 0x5f, 0x08, 0x80, 0x7b, 0x4c, 0x9e, 0x40, 0x69, 0x48, 0xac,
		0x6c, 0x2b, 0xe4, 0x10, 0xc8, 0x90, 0x63, 0x52, 0x75, 0x67, 0xbd, 0xba, 0x52, 0x95, 0x63, 0xf3,
		0x97, 0x60, 0x92, 0x39, 0x81, 0x1c, 0x10, 0xcf, 0x0d, 0xf2, 0x04, 0x1f, 0x72, 0x0e, 0x49, 0xcc,
		0xee, 0x6d, 0x2e, 0x57, 0x15, 0x39, 0xe6, 0xdf, 0x5e, 0x07, 0x72, 0xfe, 0xa6, 0xed, 0xe7, 0x13,
		0x53, 0xff, 0x28, 0x41, 0xd6, 0xd7, 0x84, 0x91, 0xf2, 0xaf, 0xb5, 0x5a, 0xd6, 0x2b, 0xaa, 0xd6,
		0x32, 0x34, 0x87, 0x07, 0x05, 0x50, 0x51, 0x85, 0x48, 0xc6, 0xdd, 0xb4, 0x9f, 0x8b, 0xf1, 0x5f,
		0x96, 0x40, 0xee, 0x6f, 0xe0, 0xfa, 0x0c, 0x94, 0x7e, 0xa1, 0x06, 0xbe, 0x29, 0x41, 0x3e, 0xd8,
		0xb5, 0xf5, 0x99, 0x77, 0xe6, 0x17, 0x6a, 0xde, 0x17, 0x25, 0x98, 0x0a, 0xf4, 0x6a, 0x1f, 0x2a,
		0xeb, 0xde, 0x88, 0xc3, 0x4c, 0x08, 0x0e, 0x55, 0x78, 0x53, 0xcb, 0xfa, 0xec, 0x4f, 0x8e, 0xf3,
		0xac, 0x45, 0x52, 0x33, 0x77, 0x34, 0xdb, 0xe5, 0x3d, 0xf0, 0xe3, 0x20, 0x1b, 0x75, 0x6c, 0xba,
		0x46, 0xc3, 0xc0, 0x36, 0x7f, 0x11, 0x67, 0x9d, 0x6e, 0xa1, 0x27, 0x67, 0xef, 0xe2, 0x9f, 0x00,
		0xd4, 0xb1, 0x1c, 0xc3, 0x35, 0xee, 0x60, 0xd5, 0x30, 0xc5, 0x5b, 0x3b, 0xe9, 0x7c, 0x13, 0x8a,
		0x2c, 0x66, 0xd6, 0x4d, 0xd7, 0xd3, 0x36, 0x71, 0x53, 0xeb, 0xd3, 0x26, 0xb9, 0x2f, 0xae, 0xc8,
		0x62, 0xc6, 0xd3, 0x3e, 0x03, 0xb9, 0xba, 0xd5, 0x25, 0x4d, 0x04, 0xd3, 0x23, 0xa9, 0x56, 0x52,
		0xb2, 0x4c, 0xe6, 0xa9, 0xf0, 0x2e, 0xaf, 0x77, 0x5d, 0x90, 0x53, 0xb2, 0x4c, 0xc6, 0x54, 0x1e,
		0x83, 0x82, 0xd6, 0x6c, 0xda, 0x84, 0x5c, 0x10, 0xb1, 0xd6, 0x35, 0xef, 0x89, 0xa9, 0xe2, 0xdc,
		0x0d, 0x48, 0x0b, 0x3f, 0x90, 0x6a, 0x46, 0x3c, 0xa1, 0x76, 0xd8, 0xa5, 0x4d, 0x6c, 0x21, 0xa3,
		0xa4, 0x4d, 0x31, 0x79, 0x06, 0x72, 0x86, 0xa3, 0xf6, 0x6e, 0x0f, 0x63, 0xa7, 0x63, 0x0b, 0x69,
		0x25, 0x6b, 0x38, 0xde, 0x75, 0xd1, 0xfc, 0xdb, 0x31, 0xc8, 0x07, 0x6f, 0x3f, 0xd1, 0x2a, 0xa4,
		0x5b, 0x96, 0xae, 0xd1, 0x40, 0x60, 0x57, 0xef, 0x0b, 0x11, 0x17, 0xa6, 0x8b, 0x1b, 0x5c, 0x5f,
		0xf1, 0x90, 0x73, 0xff, 0x22, 0x41, 0x5a, 0x88, 0xd1, 0x09, 0x48, 0x74, 0x34, 0xf7, 0x80, 0xd2,
		0x25, 0x97, 0x63, 0xb2, 0xa4, 0xd0, 0x31, 0x91, 0x3b, 0x1d, 0xcd, 0xa4, 0x21, 0xc0, 0xe5, 0x64,
		0x4c, 0xf6, 0xb5, 0x85, 0xb5, 0x3a, 0x6d, 0x8a, 0xad, 0x76, 0x1b, 0x9b, 0xae, 0x23, 0xf6, 0x95,
		0xcb, 0x57, 0xb8, 0x18, 0x9d, 0x87, 0x69, 0xd7, 0xd6, 0x8c, 0x56, 0x40, 0x37, 0x41, 0x75, 0x65,
		0x31, 0xe1, 0x29, 0x97, 0xe1, 0xa4, 0xe0, 0xad, 0x63, 0x57, 0xd3, 0x0f, 0x70, 0xbd, 0x07, 0x9a,
		0xa4, 0x57, 0x6b, 0x0f, 0x72, 0x85, 0x55, 0x3e, 0x2f, 0xb0, 0xf3, 0xdf, 0x97, 0x60, 0x5a, 0xb4,
		0xf1, 0x75, 0xcf, 0x59, 0x9b, 0x00, 0x9a, 0x69, 0x5a, 0xae, 0xdf, 0x5d, 0x83, 0xa1, 0x3c, 0x80,
		0x5b, 0xac, 0x78, 0x20, 0xc5, 0x47, 0x30, 0xd7, 0x06, 0xe8, 0xcd, 0x0c, 0x75, 0xdb, 0x29, 0xc8,
		0xf2, 0xab, 0x6d, 0xfa, 0x7d, 0x84, 0xbd, 0xfb, 0x01, 0x13, 0x91, 0x7e, 0x1f, 0xcd, 0x42, 0x72,
		0x1f, 0x37, 0x0d, 0x93, 0x5f, 0xb8, 0xb1, 0x81, 0xb8, 0xc6, 0x4b, 0x78, 0xd7, 0x78, 0xcb, 0x9f,
		0x81, 0x19, 0xdd, 0x6a, 0xf7, 0x9b, 0xbb, 0x2c, 0xf7, 0xbd, 0x7f, 0x3a, 0xd7, 0xa5, 0x97, 0xa0,
		0xd7, 0x9d, 0x7d, 0x45, 0x92, 0xbe, 0x1a, 0x8b, 0xaf, 0xed, 0x2c, 0x7f, 0x3d, 0x36, 0xb7, 0xc6,
		0xa0, 0x3b, 0x62, 0xa5, 0x0a, 0x6e, 0xb4, 0xb0, 0x4e, 0xac, 0x87, 0xb7, 0xce, 0xc2, 0x27, 0x9b,
		0x86, 0x7b, 0xd0, 0xdd, 0x5f, 0xd4, 0xad, 0xf6, 0x85, 0xa6, 0xd5, 0xb4, 0x7a, 0x9f, 0x84, 0xc8,
		0x88, 0x0e, 0xe8, 0x7f, 0xfc, 0xb3, 0x50, 0xc6, 0x93, 0xce, 0x45, 0x7e, 0x43, 0x2a, 0x6f, 0xc1,
		0x0c, 0x57, 0x56, 0xe9, 0xbd, 0x34, 0xeb, 0xc6, 0xd1, 0xc8, 0xbb, 0x89, 0xe2, 0xb7, 0xde, 0xa1,
		0x95, 0x4e, 0x99, 0xe6, 0x50, 0x32, 0xc7, 0xfa, 0xf5, 0xb2, 0x02, 0x0f, 0x04, 0xf8, 0xd8, 0xd1,
		0xc4, 0x76, 0x04, 0xe3, 0x77, 0x38, 0xe3, 0x8c, 0x8f, 0xb1, 0xc6, 0xa1, 0xe5, 0x15, 0x98, 0x3a,
		0x0e, 0xd7, 0x3f, 0x71, 0xae, 0x1c, 0xf6, 0x93, 0xac, 0x41, 0x81, 0x92, 0xe8, 0x5d, 0xc7, 0xb5,
		0xda, 0x34, 0xef, 0x8d, 0xa6, 0xf9, 0xe7, 0x77, 0xd8, 0x59, 0xc9, 0x13, 0xd8, 0x8a, 0x87, 0x2a,
		0x3f, 0x0f, 0xb3, 0x44, 0x42, 0x53, 0x8b, 0x9f, 0x2d, 0xfa, 0x36, 0xa5, 0xf8, 0xfd, 0xd7, 0xd8,
		0x91, 0x9a, 0xf1, 0x08, 0x7c, 0xbc, 0xbe, 0x9d, 0x68, 0x62, 0xd7, 0xc5, 0xb6, 0xa3, 0x6a, 0xad,
		0x16, 0x1a, 0xf9, 0x9d, 0xa6, 0xf8, 0x85, 0x1f, 0x07, 0x77, 0x62, 0x8d, 0x21, 0x2b, 0xad, 0x56,
		0x79, 0x0f, 0x1e, 0x0c, 0xd9, 0xd9, 0x31, 0x38, 0xdf, 0xe0, 0x9c, 0xb3, 0x03, 0xbb, 0x4b, 0x68,
		0x77, 0x40, 0xc8, 0xbd, 0xfd, 0x18, 0x83, 0xf3, 0x8b, 0x9c, 0x13, 0x71, 0xac, 0xd8, 0x16, 0xc2,
		0x78, 0x03, 0xa6, 0xef, 0x60, 0x7b, 0xdf, 0x72, 0xf8, 0x15, 0xc0, 0x18, 0x74, 0x6f, 0x72, 0xba,
		0x02, 0x07, 0xd2, 0x0b, 0x01, 0xc2, 0xf5, 0x34, 0xa4, 0x1b, 0x9a, 0x8e, 0xc7, 0xa0, 0xf8, 0x12,
		0xa7, 0x48, 0x11, 0x7d, 0x02, 0xad, 0x40, 0xae, 0x69, 0xf1, 0xea, 0x12, 0x0d, 0xff, 0x32, 0x87,
		0x67, 0x05, 0x86, 0x53, 0x74, 0xac, 0x4e, 0xb7, 0x45, 0x4a, 0x4f, 0x34, 0xc5, 0x1f, 0x0b, 0x0a,
		0x81, 0xe1, 0x14, 0xc7, 0x70, 0xeb, 0x57, 0x04, 0x85, 0xe3, 0xf3, 0xe7, 0x73, 0x90, 0xb5, 0xcc,
		0xd6, 0xa1, 0x65, 0x8e, 0x63, 0xc4, 0x5b, 0x9c, 0x01, 0x38, 0x84, 0x10, 0x5c, 0x85, 0xcc, 0xb8,
		0x1b, 0xf1, 0x27, 0x1c, 0x9e, 0xc6, 0x62, 0x07, 0xd6, 0xa0, 0x20, 0x92, 0x8c, 0x61, 0x99, 0x63,
		0x50, 0xfc, 0x29, 0xa7, 0xc8, 0xfb, 0x60, 0x7c, 0x19, 0x2e, 0x76, 0xdc, 0x26, 0x1e, 0x87, 0xe4,
		0x6d, 0xb1, 0x0c, 0x0e, 0xe1, 0xae, 0xdc, 0xc7, 0xa6, 0x7e, 0x30, 0x1e, 0xc3, 0xd7, 0x84, 0x2b,
		0x05, 0x86, 0x50, 0xac, 0xc0, 0x54, 0x5b, 0xb3, 0x9d, 0x03, 0xad, 0x35, 0xd6, 0x76, 0xfc, 0x19,
		0xe7, 0xc8, 0x79, 0x20, 0xee, 0x91, 0xae, 0x79, 0x1c, 0x9a, 0xaf, 0x0b, 0x8f, 0xf8, 0x60, 0xfc,
		0xe8, 0x39, 0x2e, 0xbd, 0x65, 0x39, 0x0e, 0xdb, 0x37, 0xc4, 0xd1, 0x63, 0xd8, 0x4d, 0x3f, 0xe3,
		0x55, 0xc8, 0x38, 0xc6, 0xab, 0x63, 0xd1, 0xfc, 0xb9, 0xd8, 0x69, 0x0a, 0x20, 0xe0, 0x17, 0xe1,
		0x64, 0x68, 0xaa, 0x1f, 0x83, 0xec, 0x2f, 0x38, 0xd9, 0x89, 0x90, 0x74, 0xcf, 0x53, 0xc2, 0x71,
		0x29, 0xff, 0x52, 0xa4, 0x04, 0xdc, 0xc7, 0xb5, 0x43, 0xba, 0x73, 0x47, 0x6b, 0x1c, 0xcf, 0x6b,
		0x7f, 0x25, 0xbc, 0xc6, 0xb0, 0x01, 0xaf, 0xed, 0xc2, 0x09, 0xce, 0x78, 0xbc, 0x7d, 0xfd, 0xa6,
		0x48, 0xac, 0x0c, 0xbd, 0x17, 0xdc, 0xdd, 0xcf, 0xc0, 0x9c, 0xe7, 0x4e, 0xd1, 0x58, 0x3a, 0x6a,
		0x5b, 0xeb, 0x8c, 0xc1, 0xfc, 0x2d, 0xce, 0x2c, 0x32, 0xbe, 0xd7, 0x99, 0x3a, 0x9b, 0x5a, 0x87,
		0x90, 0xdf, 0x84, 0xa2, 0x20, 0xef, 0x9a, 0x36, 0xd6, 0xad, 0xa6, 0x69, 0xbc, 0x8a, 0xeb, 0x63,
		0x50, 0xff, 0x75, 0xdf, 0x56, 0xed, 0xf9, 0xe0, 0x84, 0x79, 0x1d, 0x64, 0xaf, 0xdf, 0x50, 0x8d,
		0x76, 0xc7, 0xb2, 0xdd, 0x08, 0xc6, 0xbf, 0x11, 0x3b, 0xe5, 0xe1, 0xd6, 0x29, 0xac, 0x5c, 0x85,
		0x3c, 0x1d, 0x8e, 0x1b, 0x92, 0x7f, 0xcb, 0x89, 0xa6, 0x7a, 0x28, 0x9e, 0x38, 0x74, 0xab, 0xdd,
		0xd1, 0xec, 0x71, 0xf2, 0xdf, 0xdf, 0x89, 0xc4, 0xc1, 0x21, 0x2c, 0xfa, 0x0a, 0x7d, 0x95, 0x18,
		0x45, 0x7d, 0xc2, 0x2e, 0xfe, 0xda, 0xfb, 0xfc, 0xcc, 0x06, 0x0b, 0x71, 0x79, 0x83, 0xb8, 0x27,
		0x58, 0x2e, 0xa3, 0xc9, 0x5e, 0x7b, 0xdf, 0xf3, 0x50, 0xa0, 0x5a, 0x96, 0xaf, 0xc1, 0x54, 0xa0,
		0x54, 0x46, 0x53, 0xfd, 0x3a, 0xa7, 0xca, 0xf9, 0x2b, 0x65, 0xf9, 0x12, 0x24, 0x48, 0xd9, 0x8b,
		0x86, 0xff, 0x06, 0x87, 0x53, 0xf5, 0xf2, 0x33, 0x90, 0x16, 0xe5, 0x2e, 0x1a, 0xfa, 0x9b, 0x1c,
		0xea, 0x41, 0x08, 0x5c, 0x94, 0xba, 0x68, 0xf8, 0x67, 0x05, 0x5c, 0x40, 0x08, 0x7c, 0x7c, 0x17,
		0x7e, 0xfb, 0xb7, 0x12, 0x3c, 0x5d, 0x09, 0xdf, 0x5d, 0x85, 0x14, 0xaf, 0x71, 0xd1, 0xe8, 0xcf,
		0xf1, 0x87, 0x0b, 0x44, 0xf9, 0x29, 0x48, 0x8e, 0xe9, 0xf0, 0xdf, 0xe6, 0x50, 0xa6, 0x5f, 0x5e,
		0x81, 0xac, 0xaf, 0xae, 0x45, 0xc3, 0x7f, 0x87, 0xc3, 0xfd, 0x28, 0x62, 0x3a, 0xaf, 0x6b, 0xd1,
		0x04, 0xbf, 0x2b, 0x4c, 0xe7, 0x08, 0xe2, 0x36, 0x51, 0xd2, 0xa2, 0xd1, 0xbf, 0x27, 0xbc, 0x2e,
		0x20, 0xe5, 0xe7, 0x20, 0xe3, 0xa5, 0xa9, 0x68, 0xfc, 0xe7, 0x39, 0xbe, 0x87, 0x21, 0x1e, 0xf0,
		0xa5, 0xc9, 0x68, 0x8a, 0xdf, 0x17, 0x1e, 0xf0, 0xa1, 0xc8, 0x31, 0xea, 0x2f, 0x7d, 0xd1, 0x4c,
		0x7f, 0x20, 0x8e, 0x51, 0x5f, 0xe5, 0x23, 0xbb, 0x49, 0xb3, 0x45, 0x34, 0xc5, 0x1f, 0x8a, 0xdd,
		0xa4, 0xfa, 0xc4, 0x8c, 0xfe, 0x5a, 0x12, 0xcd, 0xf1, 0x47, 0xc2, 0x8c, 0xbe, 0x52, 0x52, 0xde,
		0x01, 0x34, 0x58, 0x47, 0xa2, 0xf9, 0x5e, 0xe7, 0x7c, 0xd3, 0x03, 0x65, 0xa4, 0xfc, 0x02, 0x9c,
		0x08, 0xaf, 0x21, 0xd1, 0xac, 0x5f, 0x78, 0xbf, 0xaf, 0xeb, 0xf7, 0x97, 0x90, 0xf2, 0x6e, 0xaf,
		0xeb, 0xf7, 0xd7, 0x8f, 0x68, 0xda, 0x37, 0xde, 0x0f, 0xbe, 0xd8, 0xf9, 0xcb, 0x47, 0xb9, 0x02,
		0xd0, 0x4b, 0xdd, 0xd1, 0x5c, 0x6f, 0x72, 0x2e, 0x1f, 0x88, 0x1c, 0x0d, 0x9e, 0xb9, 0xa3, 0xf1,
		0x5f, 0x12, 0x47, 0x83, 0x23, 0xca, 0x57, 0x21, 0x6d, 0x76, 0x5b, 0x2d, 0x12, 0x1c, 0x68, 0xf4,
		0xcf, 0x42, 0x8a, 0xff, 0xfe, 0x01, 0x3f, 0x18, 0x02, 0x50, 0xbe, 0x04, 0x49, 0xdc, 0xde, 0xc7,
		0xf5, 0x28, 0xe4, 0x7f, 0x7c, 0x20, 0x12, 0x02, 0xd1, 0x2e, 0x3f, 0x07, 0xc0, 0x5e, 0x1a, 0xe9,
		0xf7, 0x80, 0x08, 0xec, 0x7f, 0x7e, 0xc0, 0xbf, 0x38, 0xf7, 0x20, 0x3d, 0x02, 0xf6, 0xfd, 0x7a,
		0x34, 0xc1, 0x8f, 0x83, 0x04, 0xf4, 0x45, 0xf3, 0x69, 0x48, 0xdd, 0x72, 0x2c, 0xd3, 0xd5, 0x9a,
		0x51, 0xe8, 0xff, 0xe2, 0x68, 0xa1, 0x4f, 0x1c, 0xd6, 0xb6, 0x6c, 0xec, 0x6a, 0x4d, 0x27, 0x0a,
		0xfb, 0xdf, 0x1c, 0xeb, 0x01, 0x08, 0x58, 0xd7, 0x1c, 0x77, 0x9c, 0x75, 0xff, 0x8f, 0x00, 0x0b,
		0x00, 0x31, 0x9a, 0xfc, 0x7f, 0x1b, 0x1f, 0x46, 0x61, 0xdf, 0x13, 0x46, 0x73, 0xfd, 0xf2, 0x33,
		0x90, 0x21, 0xff, 0xb2, 0x5f, 0x61, 0x44, 0x80, 0xff, 0x97, 0x83, 0x7b, 0x88, 0xe5, 0x33, 0xe1,
		0xb7, 0x3b, 0xb0, 0x66, 0xad, 0x59, 0xec, 0x5e, 0x07, 0xbe, 0xb1, 0x00, 0x67, 0x75, 0xab, 0xbd,
		0x6f, 0x39, 0x17, 0x7c, 0x27, 0xf9, 0x42, 0x5b, 0xeb, 0x38, 0x54, 0x7f, 0x89, 0xdf, 0xcc, 0x64,
		0xf9, 0x88, 0x4c, 0xcc, 0x1d, 0xef, 0x56, 0x67, 0xfe, 0x61, 0x98, 0xba, 0xd6, 0xb2, 0x34, 0xd7,
		0x30, 0x9b, 0x3b, 0x96, 0x61, 0xba, 0x28, 0x07, 0x52, 0x83, 0x5e, 0xe8, 0x4b, 0x8a, 0xd4, 0x98,
		0xff, 0x01, 0x82, 0x54, 0xa5, 0xd5, 0xda, 0xd4, 0x3a, 0x0e, 0x7a, 0x11, 0xa6, 0x59, 0xc7, 0xb0,
		0x6b, 0xad, 0xd2, 0xcb, 0xd3, 0x4d, 0xad, 0xc3, 0x2f, 0xd5, 0xce, 0x2f, 0xfa, 0x4c, 0x58, 0xe4,
		0x80, 0xc5, 0x01, 0x6d, 0xfa, 0x19, 0x4f, 0x99, 0x76, 0xfa, 0xe5, 0xe8, 0x79, 0x90, 0x85, 0x32,
		0xb5, 0x86, 0x30, 0xb3, 0x9b, 0xe7, 0x73, 0x23, 0x99, 0x85, 0x32, 0x23, 0x96, 0x9d, 0x3e, 0x31,
		0x7a, 0x16, 0xd2, 0xeb, 0xa6, 0xfb, 0xe4, 0x12, 0xe1, 0x63, 0x3f, 0xab, 0x9c, 0x0f, 0xe5, 0x13,
		0x4a, 0x8c, 0x27, 0x6d, 0xf0, 0x21, 0xc7, 0x5f, 0xbe, 0x48, 0xf0, 0x89, 0xd1, 0x78, 0xaa, 0xd4,
		0xc3, 0xd3, 0x21, 0xaa, 0x40, 0x66, 0x4f, 0x90, 0xf1, 0x5f, 0x53, 0x9e, 0x0d, 0x25, 0xf0, 0xb4,
		0x18, 0x43, 0xa6, 0xeb, 0x99, 0xc0, 0x29, 0x98, 0x0d, 0x93, 0x11, 0x14, 0x3e, 0x23, 0x28, 0x85,
		0x67, 0x45, 0xcd, 0xb3, 0x22, 0x35, 0x82, 0xa2, 0xd6, 0x67, 0x85, 0xe3, 0xb7, 0xa2, 0xe6, 0x59,
		0x91, 0x8e, 0xa0, 0xf0, 0x5b, 0xe1, 0x78, 0x56, 0xac, 0x02, 0x5c, 0x33, 0xee, 0xe2, 0x3a, 0x33,
		0x23, 0xc3, 0xbf, 0x61, 0x84, 0x71, 0xf4, 0xd4, 0x18, 0x09, 0x34, 0x3c, 0x01, 0x5a, 0x83, 0x6c,
		0xad, 0x37, 0xa4, 0xbf, 0xb8, 0xcc, 0x2e, 0x3d, 0x1a, 0x6e, 0x4a, 0xa3, 0x8f, 0x27, 0xeb, 0xf8,
		0x88, 0x84, 0x39, 0x6c, 0x49, 0xd9, 0x28, 0x73, 0x7c, 0x6b, 0x62, 0xe6, 0xb0, 0x45, 0x79, 0xe6,
		0x30, 0x9a, 0x5c, 0xa4, 0x39, 0x3e, 0x1e, 0x6e, 0x0e, 0x23, 0xba, 0x0a, 0xa9, 0x65, 0xcb, 0x22,
		0x9a, 0xc5, 0x29, 0x4a, 0x72, 0x26, 0x94, 0x84, 0xeb, 0x30, 0x82, 0xd4, 0x3e, 0x1b, 0xd1, 0xdd,
		0xa1, 0xa1, 0x4f, 0xe0, 0xf9, 0x51, 0xbb, 0x23, 0xb4, 0xc4, 0xee, 0x88, 0xb1, 0xff, 0x04, 0x2e,
		0x1f, 0xba, 0x98, 0x54, 0xe7, 0x62, 0x61, 0x8c, 0x13, 0x28, 0x94, 0xfb, 0x4e, 0xa0, 0x10, 0xa3,
		0x1a, 0x14, 0x84, 0x2a, 0x79, 0x1b, 0x27, 0xb4, 0x32, 0xff, 0xa5, 0xdb, 0x28, 0x5a, 0xae, 0xcb,
		0x58, 0x0b, 0x4e, 0x50, 0x8a, 0x76, 0x20, 0x2f, 0x14, 0x37, 0x1d, 0xba, 0xe8, 0x69, 0xfe, 0x29,
		0x64, 0x14, 0x27, 0x53, 0x65, 0x94, 0x79, 0x27, 0x20, 0x9c, 0x5b, 0x85, 0x13, 0xe1, 0xd9, 0x0a,
		0xc9, 0x10, 0xbf, 0x8d, 0x0f, 0xf9, 0x4f, 0x9a, 0xc8, 0xbf, 0x68, 0xb6, 0xf7, 0x93, 0x3d, 0x92,
		0x25, 0xd9, 0xa0, 0x1c, 0xbb, 0x22, 0xcd, 0xad, 0xc0, 0x03, 0xa1, 0x99, 0x29, 0x8a, 0x24, 0xe6,
		0x27, 0xb9, 0x0a, 0x53, 0x81, 0x74, 0xe4, 0x07, 0x27, 0x43, 0xc0, 0xc9, 0x41, 0x70, 0x2f, 0xc8,
		0xfc, 0xe0, 0x78, 0x08, 0x38, 0xee, 0x07, 0x7f, 0x0a, 0xf2, 0xc1, 0x3c, 0xe4, 0x47, 0x4f, 0x85,
		0xa0, 0xa7, 0x42, 0xd0, 0xe1, 0xcf, 0x4e, 0x84, 0xa0, 0x13, 0x7d, 0xe8, 0xda, 0xd0, 0x67, 0x4f,
		0x87, 0xa0, 0xa7, 0x43, 0xd0, 0xe1, 0xcf, 0x46, 0x21, 0x68, 0xe4, 0x47, 0x3f, 0x03, 0x85, 0xbe,
		0x94, 0xe3, 0x87, 0xa7, 0x42, 0xe0, 0x29, 0x3f, 0xfc, 0x59, 0x90, 0xfb, 0x53, 0x8d, 0x1f, 0x5f,
		0x08, 0xc1, 0x17, 0xc2, 0x1e, 0x1f, 0x6e, 0xfd, 0x64, 0x08, 0x7c, 0x32, 0xf4, 0xf1, 0xe1, 0x78,
		0x39, 0x04, 0x2f, 0xfb, 0xf1, 0x65, 0xc8, 0xf9, 0xb3, 0x8a, 0x1f, 0x9b, 0x0e, 0xc1, 0xa6, 0xfb,
		0xfd, 0x1e, 0x48, 0x29, 0x51, 0x91, 0x9e, 0x19, 0x72, 0x5c, 0x02, 0x69, 0x24, 0x8a, 0x24, 0xe7,
		0x27, 0xb9, 0x09, 0xb3, 0x61, 0x49, 0x23, 0x84, 0xe3, 0x9c, 0x9f, 0x23, 0xbf, 0x34, 0x1b, 0x48,
		0x16, 0x14, 0xd7, 0x6d, 0xfb, 0x99, 0x5f, 0x86, 0x99, 0x90, 0xd4, 0x11, 0x42, 0xfc, 0x84, 0x9f,
		0x38, 0xbb, 0x34, 0x17, 0x20, 0x0e, 0x74, 0x57, 0x3e, 0xfa, 0xf9, 0x1f, 0xce, 0x40, 0x9e, 0xa7,
		0xa8, 0x6d, 0xbb, 0x8e, 0x6d, 0x5c, 0x47, 0xbf, 0x32, 0xbc, 0xc3, 0x5a, 0x0a, 0x4b, 0x6d, 0x1c,
		0x77, 0x8c, 0x46, 0xeb, 0xe5, 0xa1, 0x8d, 0xd6, 0x2f, 0x8d, 0xf3, 0x80, 0xa8, 0x7e, 0xab, 0x3a,
		0xd0, 0x6f, 0x3d, 0x3e, 0x8a, 0x76, 0x58, 0xdb, 0x55, 0x1d, 0x68, 0xbb, 0xa2, 0x68, 0x42, 0xbb,
		0xaf, 0xeb, 0x83, 0xdd, 0xd7, 0xb9, 0x51, 0x3c, 0xc3, 0x9b, 0xb0, 0xeb, 0x83, 0x4d, 0x58, 0x24,
		0x53, 0x78, 0x2f, 0x76, 0x7d, 0xb0, 0x17, 0x1b, 0xc9, 0x34, 0xbc, 0x25, 0xbb, 0x3e, 0xd8, 0x92,
		0x45, 0x32, 0x85, 0x77, 0x66, 0x9f, 0x0e, 0xe9, 0xcc, 0xce, 0x8f, 0xa2, 0x1a, 0xd5, 0xa0, 0x6d,
		0x85, 0x35, 0x68, 0x9f, 0x18, 0x69, 0xd8, 0xc8, 0x3e, 0xed, 0xd3, 0x21, 0x7d, 0x5a, 0xb4, 0x71,
		0x43, 0xda, 0xb5, 0xad, 0xb0, 0x76, 0x6d, 0x0c, 0xe3, 0x86, 0x75, 0x6d, 0xcb, 0xfd, 0x5d, 0xdb,
		0xc2, 0x28, 0xae, 0xf0, 0xe6, 0xed, 0xfa, 0x60, 0xf3, 0x76, 0x2e, 0xfa, 0x2c, 0x86, 0xf5, 0x70,
		0x2f, 0x0f, 0xed, 0xe1, 0xc6, 0x3a, 0xdc, 0x51, 0xad, 0xdc, 0x4b, 0xc3, 0x5a, 0xb9, 0x27, 0xc6,
		0x61, 0x1f, 0xdd, 0xd1, 0xbd, 0x30, 0xa4, 0xa3, 0xbb, 0x30, 0x0e, 0xf5, 0x47, 0x8d, 0xdd, 0x47,
		0x8d, 0xdd, 0x47, 0x8d, 0xdd, 0x47, 0x8d, 0xdd, 0x87, 0xa3, 0xb1, 0x2b, 0x27, 0x5e, 0x7f, 0xeb,
		0x94, 0x74, 0xee, 0x0c, 0xa4, 0xf8, 0xa3, 0xd1, 0x24, 0xc4, 0x36, 0x2b, 0xf2, 0x04, 0xfd, 0xbb,
		0x2c, 0x4b, 0xf4, 0xef, 0x8a, 0x1c, 0x5b, 0xde, 0xf8, 0xee, 0xfd, 0xd2, 0xc4, 0xf7, 0xee, 0x97,
		0x26, 0x7e, 0x70, 0xbf, 0x34, 0xf1, 0xa3, 0xfb, 0x25, 0xe9, 0xdd, 0xfb, 0x25, 0xe9, 0xbd, 0xfb,
		0x25, 0xe9, 0x27, 0xf7, 0x4b, 0xd2, 0xbd, 0xa3, 0x92, 0xf4, 0xb5, 0xa3, 0x92, 0xf4, 0xcd, 0xa3,
		0x92, 0xf4, 0x0f, 0x47, 0x25, 0xe9, 0xdb, 0x47, 0x25, 0xe9, 0xbb, 0x47, 0xa5, 0x89, 0xef, 0x1d,
		0x95, 0xa4, 0x1f, 0x1d, 0x95, 0xa4, 0x77, 0x8f, 0x4a, 0x13, 0xef, 0x1d, 0x95, 0xa4, 0x9f, 0x1c,
		0x95, 0x26, 0xee, 0xfd, 0x6b, 0x69, 0xe2, 0xff, 0x03, 0x00, 0x00, 0xff, 0xff, 0x7a, 0xdc, 0x08,
		0x2b, 0xdc, 0x3f, 0x00, 0x00,
	}
	r := bytes.NewReader(gzipped)
	gzipr, err := compress_gzip.NewReader(r)
	if err != nil {
		panic(err)
	}
	ungzipped, err := io_ioutil.ReadAll(gzipr)
	if err != nil {
		panic(err)
	}
	if err := github_com_gogo_protobuf_proto.Unmarshal(ungzipped, d); err != nil {
		panic(err)
	}
	return d
}
func (x MapEnum) String() string {
	s, ok := MapEnum_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *FloatingPoint) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*FloatingPoint)
	if !ok {
		that2, ok := that.(FloatingPoint)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *FloatingPoint")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *FloatingPoint but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *FloatingPoint but is not nil && this == nil")
	}
	if this.F != nil && that1.F != nil {
		if *this.F != *that1.F {
			return fmt.Errorf("F this(%v) Not Equal that(%v)", *this.F, *that1.F)
		}
	} else if this.F != nil {
		return fmt.Errorf("this.F == nil && that.F != nil")
	} else if that1.F != nil {
		return fmt.Errorf("F this(%v) Not Equal that(%v)", this.F, that1.F)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *FloatingPoint) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*FloatingPoint)
	if !ok {
		that2, ok := that.(FloatingPoint)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.F != nil && that1.F != nil {
		if *this.F != *that1.F {
			return false
		}
	} else if this.F != nil {
		return false
	} else if that1.F != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *AllMaps) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*AllMaps)
	if !ok {
		that2, ok := that.(AllMaps)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *AllMaps")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *AllMaps but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *AllMaps but is not nil && this == nil")
	}
	if len(this.StringToDoubleMap) != len(that1.StringToDoubleMap) {
		return fmt.Errorf("StringToDoubleMap this(%v) Not Equal that(%v)", len(this.StringToDoubleMap), len(that1.StringToDoubleMap))
	}
	for i := range this.StringToDoubleMap {
		if this.StringToDoubleMap[i] != that1.StringToDoubleMap[i] {
			return fmt.Errorf("StringToDoubleMap this[%v](%v) Not Equal that[%v](%v)", i, this.StringToDoubleMap[i], i, that1.StringToDoubleMap[i])
		}
	}
	if len(this.StringToFloatMap) != len(that1.StringToFloatMap) {
		return fmt.Errorf("StringToFloatMap this(%v) Not Equal that(%v)", len(this.StringToFloatMap), len(that1.StringToFloatMap))
	}
	for i := range this.StringToFloatMap {
		if this.StringToFloatMap[i] != that1.StringToFloatMap[i] {
			return fmt.Errorf("StringToFloatMap this[%v](%v) Not Equal that[%v](%v)", i, this.StringToFloatMap[i], i, that1.StringToFloatMap[i])
		}
	}
	if len(this.Int32Map) != len(that1.Int32Map) {
		return fmt.Errorf("Int32Map this(%v) Not Equal that(%v)", len(this.Int32Map), len(that1.Int32Map))
	}
	for i := range this.Int32Map {
		if this.Int32Map[i] != that1.Int32Map[i] {
			return fmt.Errorf("Int32Map this[%v](%v) Not Equal that[%v](%v)", i, this.Int32Map[i], i, that1.Int32Map[i])
		}
	}
	if len(this.Int64Map) != len(that1.Int64Map) {
		return fmt.Errorf("Int64Map this(%v) Not Equal that(%v)", len(this.Int64Map), len(that1.Int64Map))
	}
	for i := range this.Int64Map {
		if this.Int64Map[i] != that1.Int64Map[i] {
			return fmt.Errorf("Int64Map this[%v](%v) Not Equal that[%v](%v)", i, this.Int64Map[i], i, that1.Int64Map[i])
		}
	}
	if len(this.Uint32Map) != len(that1.Uint32Map) {
		return fmt.Errorf("Uint32Map this(%v) Not Equal that(%v)", len(this.Uint32Map), len(that1.Uint32Map))
	}
	for i := range this.Uint32Map {
		if this.Uint32Map[i] != that1.Uint32Map[i] {
			return fmt.Errorf("Uint32Map this[%v](%v) Not Equal that[%v](%v)", i, this.Uint32Map[i], i, that1.Uint32Map[i])
		}
	}
	if len(this.Uint64Map) != len(that1.Uint64Map) {
		return fmt.Errorf("Uint64Map this(%v) Not Equal that(%v)", len(this.Uint64Map), len(that1.Uint64Map))
	}
	for i := range this.Uint64Map {
		if this.Uint64Map[i] != that1.Uint64Map[i] {
			return fmt.Errorf("Uint64Map this[%v](%v) Not Equal that[%v](%v)", i, this.Uint64Map[i], i, that1.Uint64Map[i])
		}
	}
	if len(this.Sint32Map) != len(that1.Sint32Map) {
		return fmt.Errorf("Sint32Map this(%v) Not Equal that(%v)", len(this.Sint32Map), len(that1.Sint32Map))
	}
	for i := range this.Sint32Map {
		if this.Sint32Map[i] != that1.Sint32Map[i] {
			return fmt.Errorf("Sint32Map this[%v](%v) Not Equal that[%v](%v)", i, this.Sint32Map[i], i, that1.Sint32Map[i])
		}
	}
	if len(this.Sint64Map) != len(that1.Sint64Map) {
		return fmt.Errorf("Sint64Map this(%v) Not Equal that(%v)", len(this.Sint64Map), len(that1.Sint64Map))
	}
	for i := range this.Sint64Map {
		if this.Sint64Map[i] != that1.Sint64Map[i] {
			return fmt.Errorf("Sint64Map this[%v](%v) Not Equal that[%v](%v)", i, this.Sint64Map[i], i, that1.Sint64Map[i])
		}
	}
	if len(this.Fixed32Map) != len(that1.Fixed32Map) {
		return fmt.Errorf("Fixed32Map this(%v) Not Equal that(%v)", len(this.Fixed32Map), len(that1.Fixed32Map))
	}
	for i := range this.Fixed32Map {
		if this.Fixed32Map[i] != that1.Fixed32Map[i] {
			return fmt.Errorf("Fixed32Map this[%v](%v) Not Equal that[%v](%v)", i, this.Fixed32Map[i], i, that1.Fixed32Map[i])
		}
	}
	if len(this.Sfixed32Map) != len(that1.Sfixed32Map) {
		return fmt.Errorf("Sfixed32Map this(%v) Not Equal that(%v)", len(this.Sfixed32Map), len(that1.Sfixed32Map))
	}
	for i := range this.Sfixed32Map {
		if this.Sfixed32Map[i] != that1.Sfixed32Map[i] {
			return fmt.Errorf("Sfixed32Map this[%v](%v) Not Equal that[%v](%v)", i, this.Sfixed32Map[i], i, that1.Sfixed32Map[i])
		}
	}
	if len(this.Fixed64Map) != len(that1.Fixed64Map) {
		return fmt.Errorf("Fixed64Map this(%v) Not Equal that(%v)", len(this.Fixed64Map), len(that1.Fixed64Map))
	}
	for i := range this.Fixed64Map {
		if this.Fixed64Map[i] != that1.Fixed64Map[i] {
			return fmt.Errorf("Fixed64Map this[%v](%v) Not Equal that[%v](%v)", i, this.Fixed64Map[i], i, that1.Fixed64Map[i])
		}
	}
	if len(this.Sfixed64Map) != len(that1.Sfixed64Map) {
		return fmt.Errorf("Sfixed64Map this(%v) Not Equal that(%v)", len(this.Sfixed64Map), len(that1.Sfixed64Map))
	}
	for i := range this.Sfixed64Map {
		if this.Sfixed64Map[i] != that1.Sfixed64Map[i] {
			return fmt.Errorf("Sfixed64Map this[%v](%v) Not Equal that[%v](%v)", i, this.Sfixed64Map[i], i, that1.Sfixed64Map[i])
		}
	}
	if len(this.BoolMap) != len(that1.BoolMap) {
		return fmt.Errorf("BoolMap this(%v) Not Equal that(%v)", len(this.BoolMap), len(that1.BoolMap))
	}
	for i := range this.BoolMap {
		if this.BoolMap[i] != that1.BoolMap[i] {
			return fmt.Errorf("BoolMap this[%v](%v) Not Equal that[%v](%v)", i, this.BoolMap[i], i, that1.BoolMap[i])
		}
	}
	if len(this.StringMap) != len(that1.StringMap) {
		return fmt.Errorf("StringMap this(%v) Not Equal that(%v)", len(this.StringMap), len(that1.StringMap))
	}
	for i := range this.StringMap {
		if this.StringMap[i] != that1.StringMap[i] {
			return fmt.Errorf("StringMap this[%v](%v) Not Equal that[%v](%v)", i, this.StringMap[i], i, that1.StringMap[i])
		}
	}
	if len(this.StringToBytesMap) != len(that1.StringToBytesMap) {
		return fmt.Errorf("StringToBytesMap this(%v) Not Equal that(%v)", len(this.StringToBytesMap), len(that1.StringToBytesMap))
	}
	for i := range this.StringToBytesMap {
		if !bytes.Equal(this.StringToBytesMap[i], that1.StringToBytesMap[i]) {
			return fmt.Errorf("StringToBytesMap this[%v](%v) Not Equal that[%v](%v)", i, this.StringToBytesMap[i], i, that1.StringToBytesMap[i])
		}
	}
	if len(this.StringToEnumMap) != len(that1.StringToEnumMap) {
		return fmt.Errorf("StringToEnumMap this(%v) Not Equal that(%v)", len(this.StringToEnumMap), len(that1.StringToEnumMap))
	}
	for i := range this.StringToEnumMap {
		if this.StringToEnumMap[i] != that1.StringToEnumMap[i] {
			return fmt.Errorf("StringToEnumMap this[%v](%v) Not Equal that[%v](%v)", i, this.StringToEnumMap[i], i, that1.StringToEnumMap[i])
		}
	}
	if len(this.StringToMsgMap) != len(that1.StringToMsgMap) {
		return fmt.Errorf("StringToMsgMap this(%v) Not Equal that(%v)", len(this.StringToMsgMap), len(that1.StringToMsgMap))
	}
	for i := range this.StringToMsgMap {
		if !this.StringToMsgMap[i].Equal(that1.StringToMsgMap[i]) {
			return fmt.Errorf("StringToMsgMap this[%v](%v) Not Equal that[%v](%v)", i, this.StringToMsgMap[i], i, that1.StringToMsgMap[i])
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *AllMaps) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*AllMaps)
	if !ok {
		that2, ok := that.(AllMaps)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.StringToDoubleMap) != len(that1.StringToDoubleMap) {
		return false
	}
	for i := range this.StringToDoubleMap {
		if this.StringToDoubleMap[i] != that1.StringToDoubleMap[i] {
			return false
		}
	}
	if len(this.StringToFloatMap) != len(that1.StringToFloatMap) {
		return false
	}
	for i := range this.StringToFloatMap {
		if this.StringToFloatMap[i] != that1.StringToFloatMap[i] {
			return false
		}
	}
	if len(this.Int32Map) != len(that1.Int32Map) {
		return false
	}
	for i := range this.Int32Map {
		if this.Int32Map[i] != that1.Int32Map[i] {
			return false
		}
	}
	if len(this.Int64Map) != len(that1.Int64Map) {
		return false
	}
	for i := range this.Int64Map {
		if this.Int64Map[i] != that1.Int64Map[i] {
			return false
		}
	}
	if len(this.Uint32Map) != len(that1.Uint32Map) {
		return false
	}
	for i := range this.Uint32Map {
		if this.Uint32Map[i] != that1.Uint32Map[i] {
			return false
		}
	}
	if len(this.Uint64Map) != len(that1.Uint64Map) {
		return false
	}
	for i := range this.Uint64Map {
		if this.Uint64Map[i] != that1.Uint64Map[i] {
			return false
		}
	}
	if len(this.Sint32Map) != len(that1.Sint32Map) {
		return false
	}
	for i := range this.Sint32Map {
		if this.Sint32Map[i] != that1.Sint32Map[i] {
			return false
		}
	}
	if len(this.Sint64Map) != len(that1.Sint64Map) {
		return false
	}
	for i := range this.Sint64Map {
		if this.Sint64Map[i] != that1.Sint64Map[i] {
			return false
		}
	}
	if len(this.Fixed32Map) != len(that1.Fixed32Map) {
		return false
	}
	for i := range this.Fixed32Map {
		if this.Fixed32Map[i] != that1.Fixed32Map[i] {
			return false
		}
	}
	if len(this.Sfixed32Map) != len(that1.Sfixed32Map) {
		return false
	}
	for i := range this.Sfixed32Map {
		if this.Sfixed32Map[i] != that1.Sfixed32Map[i] {
			return false
		}
	}
	if len(this.Fixed64Map) != len(that1.Fixed64Map) {
		return false
	}
	for i := range this.Fixed64Map {
		if this.Fixed64Map[i] != that1.Fixed64Map[i] {
			return false
		}
	}
	if len(this.Sfixed64Map) != len(that1.Sfixed64Map) {
		return false
	}
	for i := range this.Sfixed64Map {
		if this.Sfixed64Map[i] != that1.Sfixed64Map[i] {
			return false
		}
	}
	if len(this.BoolMap) != len(that1.BoolMap) {
		return false
	}
	for i := range this.BoolMap {
		if this.BoolMap[i] != that1.BoolMap[i] {
			return false
		}
	}
	if len(this.StringMap) != len(that1.StringMap) {
		return false
	}
	for i := range this.StringMap {
		if this.StringMap[i] != that1.StringMap[i] {
			return false
		}
	}
	if len(this.StringToBytesMap) != len(that1.StringToBytesMap) {
		return false
	}
	for i := range this.StringToBytesMap {
		if !bytes.Equal(this.StringToBytesMap[i], that1.StringToBytesMap[i]) {
			return false
		}
	}
	if len(this.StringToEnumMap) != len(that1.StringToEnumMap) {
		return false
	}
	for i := range this.StringToEnumMap {
		if this.StringToEnumMap[i] != that1.StringToEnumMap[i] {
			return false
		}
	}
	if len(this.StringToMsgMap) != len(that1.StringToMsgMap) {
		return false
	}
	for i := range this.StringToMsgMap {
		if !this.StringToMsgMap[i].Equal(that1.StringToMsgMap[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *AllMapsOrdered) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*AllMapsOrdered)
	if !ok {
		that2, ok := that.(AllMapsOrdered)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *AllMapsOrdered")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *AllMapsOrdered but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *AllMapsOrdered but is not nil && this == nil")
	}
	if len(this.StringToDoubleMap) != len(that1.StringToDoubleMap) {
		return fmt.Errorf("StringToDoubleMap this(%v) Not Equal that(%v)", len(this.StringToDoubleMap), len(that1.StringToDoubleMap))
	}
	for i := range this.StringToDoubleMap {
		if this.StringToDoubleMap[i] != that1.StringToDoubleMap[i] {
			return fmt.Errorf("StringToDoubleMap this[%v](%v) Not Equal that[%v](%v)", i, this.StringToDoubleMap[i], i, that1.StringToDoubleMap[i])
		}
	}
	if len(this.StringToFloatMap) != len(that1.StringToFloatMap) {
		return fmt.Errorf("StringToFloatMap this(%v) Not Equal that(%v)", len(this.StringToFloatMap), len(that1.StringToFloatMap))
	}
	for i := range this.StringToFloatMap {
		if this.StringToFloatMap[i] != that1.StringToFloatMap[i] {
			return fmt.Errorf("StringToFloatMap this[%v](%v) Not Equal that[%v](%v)", i, this.StringToFloatMap[i], i, that1.StringToFloatMap[i])
		}
	}
	if len(this.Int32Map) != len(that1.Int32Map) {
		return fmt.Errorf("Int32Map this(%v) Not Equal that(%v)", len(this.Int32Map), len(that1.Int32Map))
	}
	for i := range this.Int32Map {
		if this.Int32Map[i] != that1.Int32Map[i] {
			return fmt.Errorf("Int32Map this[%v](%v) Not Equal that[%v](%v)", i, this.Int32Map[i], i, that1.Int32Map[i])
		}
	}
	if len(this.Int64Map) != len(that1.Int64Map) {
		return fmt.Errorf("Int64Map this(%v) Not Equal that(%v)", len(this.Int64Map), len(that1.Int64Map))
	}
	for i := range this.Int64Map {
		if this.Int64Map[i] != that1.Int64Map[i] {
			return fmt.Errorf("Int64Map this[%v](%v) Not Equal that[%v](%v)", i, this.Int64Map[i], i, that1.Int64Map[i])
		}
	}
	if len(this.Uint32Map) != len(that1.Uint32Map) {
		return fmt.Errorf("Uint32Map this(%v) Not Equal that(%v)", len(this.Uint32Map), len(that1.Uint32Map))
	}
	for i := range this.Uint32Map {
		if this.Uint32Map[i] != that1.Uint32Map[i] {
			return fmt.Errorf("Uint32Map this[%v](%v) Not Equal that[%v](%v)", i, this.Uint32Map[i], i, that1.Uint32Map[i])
		}
	}
	if len(this.Uint64Map) != len(that1.Uint64Map) {
		return fmt.Errorf("Uint64Map this(%v) Not Equal that(%v)", len(this.Uint64Map), len(that1.Uint64Map))
	}
	for i := range this.Uint64Map {
		if this.Uint64Map[i] != that1.Uint64Map[i] {
			return fmt.Errorf("Uint64Map this[%v](%v) Not Equal that[%v](%v)", i, this.Uint64Map[i], i, that1.Uint64Map[i])
		}
	}
	if len(this.Sint32Map) != len(that1.Sint32Map) {
		return fmt.Errorf("Sint32Map this(%v) Not Equal that(%v)", len(this.Sint32Map), len(that1.Sint32Map))
	}
	for i := range this.Sint32Map {
		if this.Sint32Map[i] != that1.Sint32Map[i] {
			return fmt.Errorf("Sint32Map this[%v](%v) Not Equal that[%v](%v)", i, this.Sint32Map[i], i, that1.Sint32Map[i])
		}
	}
	if len(this.Sint64Map) != len(that1.Sint64Map) {
		return fmt.Errorf("Sint64Map this(%v) Not Equal that(%v)", len(this.Sint64Map), len(that1.Sint64Map))
	}
	for i := range this.Sint64Map {
		if this.Sint64Map[i] != that1.Sint64Map[i] {
			return fmt.Errorf("Sint64Map this[%v](%v) Not Equal that[%v](%v)", i, this.Sint64Map[i], i, that1.Sint64Map[i])
		}
	}
	if len(this.Fixed32Map) != len(that1.Fixed32Map) {
		return fmt.Errorf("Fixed32Map this(%v) Not Equal that(%v)", len(this.Fixed32Map), len(that1.Fixed32Map))
	}
	for i := range this.Fixed32Map {
		if this.Fixed32Map[i] != that1.Fixed32Map[i] {
			return fmt.Errorf("Fixed32Map this[%v](%v) Not Equal that[%v](%v)", i, this.Fixed32Map[i], i, that1.Fixed32Map[i])
		}
	}
	if len(this.Sfixed32Map) != len(that1.Sfixed32Map) {
		return fmt.Errorf("Sfixed32Map this(%v) Not Equal that(%v)", len(this.Sfixed32Map), len(that1.Sfixed32Map))
	}
	for i := range this.Sfixed32Map {
		if this.Sfixed32Map[i] != that1.Sfixed32Map[i] {
			return fmt.Errorf("Sfixed32Map this[%v](%v) Not Equal that[%v](%v)", i, this.Sfixed32Map[i], i, that1.Sfixed32Map[i])
		}
	}
	if len(this.Fixed64Map) != len(that1.Fixed64Map) {
		return fmt.Errorf("Fixed64Map this(%v) Not Equal that(%v)", len(this.Fixed64Map), len(that1.Fixed64Map))
	}
	for i := range this.Fixed64Map {
		if this.Fixed64Map[i] != that1.Fixed64Map[i] {
			return fmt.Errorf("Fixed64Map this[%v](%v) Not Equal that[%v](%v)", i, this.Fixed64Map[i], i, that1.Fixed64Map[i])
		}
	}
	if len(this.Sfixed64Map) != len(that1.Sfixed64Map) {
		return fmt.Errorf("Sfixed64Map this(%v) Not Equal that(%v)", len(this.Sfixed64Map), len(that1.Sfixed64Map))
	}
	for i := range this.Sfixed64Map {
		if this.Sfixed64Map[i] != that1.Sfixed64Map[i] {
			return fmt.Errorf("Sfixed64Map this[%v](%v) Not Equal that[%v](%v)", i, this.Sfixed64Map[i], i, that1.Sfixed64Map[i])
		}
	}
	if len(this.BoolMap) != len(that1.BoolMap) {
		return fmt.Errorf("BoolMap this(%v) Not Equal that(%v)", len(this.BoolMap), len(that1.BoolMap))
	}
	for i := range this.BoolMap {
		if this.BoolMap[i] != that1.BoolMap[i] {
			return fmt.Errorf("BoolMap this[%v](%v) Not Equal that[%v](%v)", i, this.BoolMap[i], i, that1.BoolMap[i])
		}
	}
	if len(this.StringMap) != len(that1.StringMap) {
		return fmt.Errorf("StringMap this(%v) Not Equal that(%v)", len(this.StringMap), len(that1.StringMap))
	}
	for i := range this.StringMap {
		if this.StringMap[i] != that1.StringMap[i] {
			return fmt.Errorf("StringMap this[%v](%v) Not Equal that[%v](%v)", i, this.StringMap[i], i, that1.StringMap[i])
		}
	}
	if len(this.StringToBytesMap) != len(that1.StringToBytesMap) {
		return fmt.Errorf("StringToBytesMap this(%v) Not Equal that(%v)", len(this.StringToBytesMap), len(that1.StringToBytesMap))
	}
	for i := range this.StringToBytesMap {
		if !bytes.Equal(this.StringToBytesMap[i], that1.StringToBytesMap[i]) {
			return fmt.Errorf("StringToBytesMap this[%v](%v) Not Equal that[%v](%v)", i, this.StringToBytesMap[i], i, that1.StringToBytesMap[i])
		}
	}
	if len(this.StringToEnumMap) != len(that1.StringToEnumMap) {
		return fmt.Errorf("StringToEnumMap this(%v) Not Equal that(%v)", len(this.StringToEnumMap), len(that1.StringToEnumMap))
	}
	for i := range this.StringToEnumMap {
		if this.StringToEnumMap[i] != that1.StringToEnumMap[i] {
			return fmt.Errorf("StringToEnumMap this[%v](%v) Not Equal that[%v](%v)", i, this.StringToEnumMap[i], i, that1.StringToEnumMap[i])
		}
	}
	if len(this.StringToMsgMap) != len(that1.StringToMsgMap) {
		return fmt.Errorf("StringToMsgMap this(%v) Not Equal that(%v)", len(this.StringToMsgMap), len(that1.StringToMsgMap))
	}
	for i := range this.StringToMsgMap {
		if !this.StringToMsgMap[i].Equal(that1.StringToMsgMap[i]) {
			return fmt.Errorf("StringToMsgMap this[%v](%v) Not Equal that[%v](%v)", i, this.StringToMsgMap[i], i, that1.StringToMsgMap[i])
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *AllMapsOrdered) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*AllMapsOrdered)
	if !ok {
		that2, ok := that.(AllMapsOrdered)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.StringToDoubleMap) != len(that1.StringToDoubleMap) {
		return false
	}
	for i := range this.StringToDoubleMap {
		if this.StringToDoubleMap[i] != that1.StringToDoubleMap[i] {
			return false
		}
	}
	if len(this.StringToFloatMap) != len(that1.StringToFloatMap) {
		return false
	}
	for i := range this.StringToFloatMap {
		if this.StringToFloatMap[i] != that1.StringToFloatMap[i] {
			return false
		}
	}
	if len(this.Int32Map) != len(that1.Int32Map) {
		return false
	}
	for i := range this.Int32Map {
		if this.Int32Map[i] != that1.Int32Map[i] {
			return false
		}
	}
	if len(this.Int64Map) != len(that1.Int64Map) {
		return false
	}
	for i := range this.Int64Map {
		if this.Int64Map[i] != that1.Int64Map[i] {
			return false
		}
	}
	if len(this.Uint32Map) != len(that1.Uint32Map) {
		return false
	}
	for i := range this.Uint32Map {
		if this.Uint32Map[i] != that1.Uint32Map[i] {
			return false
		}
	}
	if len(this.Uint64Map) != len(that1.Uint64Map) {
		return false
	}
	for i := range this.Uint64Map {
		if this.Uint64Map[i] != that1.Uint64Map[i] {
			return false
		}
	}
	if len(this.Sint32Map) != len(that1.Sint32Map) {
		return false
	}
	for i := range this.Sint32Map {
		if this.Sint32Map[i] != that1.Sint32Map[i] {
			return false
		}
	}
	if len(this.Sint64Map) != len(that1.Sint64Map) {
		return false
	}
	for i := range this.Sint64Map {
		if this.Sint64Map[i] != that1.Sint64Map[i] {
			return false
		}
	}
	if len(this.Fixed32Map) != len(that1.Fixed32Map) {
		return false
	}
	for i := range this.Fixed32Map {
		if this.Fixed32Map[i] != that1.Fixed32Map[i] {
			return false
		}
	}
	if len(this.Sfixed32Map) != len(that1.Sfixed32Map) {
		return false
	}
	for i := range this.Sfixed32Map {
		if this.Sfixed32Map[i] != that1.Sfixed32Map[i] {
			return false
		}
	}
	if len(this.Fixed64Map) != len(that1.Fixed64Map) {
		return false
	}
	for i := range this.Fixed64Map {
		if this.Fixed64Map[i] != that1.Fixed64Map[i] {
			return false
		}
	}
	if len(this.Sfixed64Map) != len(that1.Sfixed64Map) {
		return false
	}
	for i := range this.Sfixed64Map {
		if this.Sfixed64Map[i] != that1.Sfixed64Map[i] {
			return false
		}
	}
	if len(this.BoolMap) != len(that1.BoolMap) {
		return false
	}
	for i := range this.BoolMap {
		if this.BoolMap[i] != that1.BoolMap[i] {
			return false
		}
	}
	if len(this.StringMap) != len(that1.StringMap) {
		return false
	}
	for i := range this.StringMap {
		if this.StringMap[i] != that1.StringMap[i] {
			return false
		}
	}
	if len(this.StringToBytesMap) != len(that1.StringToBytesMap) {
		return false
	}
	for i := range this.StringToBytesMap {
		if !bytes.Equal(this.StringToBytesMap[i], that1.StringToBytesMap[i]) {
			return false
		}
	}
	if len(this.StringToEnumMap) != len(that1.StringToEnumMap) {
		return false
	}
	for i := range this.StringToEnumMap {
		if this.StringToEnumMap[i] != that1.StringToEnumMap[i] {
			return false
		}
	}
	if len(this.StringToMsgMap) != len(that1.StringToMsgMap) {
		return false
	}
	for i := range this.StringToMsgMap {
		if !this.StringToMsgMap[i].Equal(that1.StringToMsgMap[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}

type FloatingPointFace interface {
	Proto() github_com_gogo_protobuf_proto.Message
	GetF() *float64
}

func (this *FloatingPoint) Proto() github_com_gogo_protobuf_proto.Message {
	return this
}

func (this *FloatingPoint) TestProto() github_com_gogo_protobuf_proto.Message {
	return NewFloatingPointFromFace(this)
}

func (this *FloatingPoint) GetF() *float64 {
	return this.F
}

func NewFloatingPointFromFace(that FloatingPointFace) *FloatingPoint {
	this := &FloatingPoint{}
	this.F = that.GetF()
	return this
}

type AllMapsFace interface {
	Proto() github_com_gogo_protobuf_proto.Message
	GetStringToDoubleMap() map[string]float64
	GetStringToFloatMap() map[string]float32
	GetInt32Map() map[int32]int32
	GetInt64Map() map[int64]int64
	GetUint32Map() map[uint32]uint32
	GetUint64Map() map[uint64]uint64
	GetSint32Map() map[int32]int32
	GetSint64Map() map[int64]int64
	GetFixed32Map() map[uint32]uint32
	GetSfixed32Map() map[int32]int32
	GetFixed64Map() map[uint64]uint64
	GetSfixed64Map() map[int64]int64
	GetBoolMap() map[bool]bool
	GetStringMap() map[string]string
	GetStringToBytesMap() map[string][]byte
	GetStringToEnumMap() map[string]MapEnum
	GetStringToMsgMap() map[string]*FloatingPoint
}

func (this *AllMaps) Proto() github_com_gogo_protobuf_proto.Message {
	return this
}

func (this *AllMaps) TestProto() github_com_gogo_protobuf_proto.Message {
	return NewAllMapsFromFace(this)
}

func (this *AllMaps) GetStringToDoubleMap() map[string]float64 {
	return this.StringToDoubleMap
}

func (this *AllMaps) GetStringToFloatMap() map[string]float32 {
	return this.StringToFloatMap
}

func (this *AllMaps) GetInt32Map() map[int32]int32 {
	return this.Int32Map
}

func (this *AllMaps) GetInt64Map() map[int64]int64 {
	return this.Int64Map
}

func (this *AllMaps) GetUint32Map() map[uint32]uint32 {
	return this.Uint32Map
}

func (this *AllMaps) GetUint64Map() map[uint64]uint64 {
	return this.Uint64Map
}

func (this *AllMaps) GetSint32Map() map[int32]int32 {
	return this.Sint32Map
}

func (this *AllMaps) GetSint64Map() map[int64]int64 {
	return this.Sint64Map
}

func (this *AllMaps) GetFixed32Map() map[uint32]uint32 {
	return this.Fixed32Map
}

func (this *AllMaps) GetSfixed32Map() map[int32]int32 {
	return this.Sfixed32Map
}

func (this *AllMaps) GetFixed64Map() map[uint64]uint64 {
	return this.Fixed64Map
}

func (this *AllMaps) GetSfixed64Map() map[int64]int64 {
	return this.Sfixed64Map
}

func (this *AllMaps) GetBoolMap() map[bool]bool {
	return this.BoolMap
}

func (this *AllMaps) GetStringMap() map[string]string {
	return this.StringMap
}

func (this *AllMaps) GetStringToBytesMap() map[string][]byte {
	return this.StringToBytesMap
}

func (this *AllMaps) GetStringToEnumMap() map[string]MapEnum {
	return this.StringToEnumMap
}

func (this *AllMaps) GetStringToMsgMap() map[string]*FloatingPoint {
	return this.StringToMsgMap
}

func NewAllMapsFromFace(that AllMapsFace) *AllMaps {
	this := &AllMaps{}
	this.StringToDoubleMap = that.GetStringToDoubleMap()
	this.StringToFloatMap = that.GetStringToFloatMap()
	this.Int32Map = that.GetInt32Map()
	this.Int64Map = that.GetInt64Map()
	this.Uint32Map = that.GetUint32Map()
	this.Uint64Map = that.GetUint64Map()
	this.Sint32Map = that.GetSint32Map()
	this.Sint64Map = that.GetSint64Map()
	this.Fixed32Map = that.GetFixed32Map()
	this.Sfixed32Map = that.GetSfixed32Map()
	this.Fixed64Map = that.GetFixed64Map()
	this.Sfixed64Map = that.GetSfixed64Map()
	this.BoolMap = that.GetBoolMap()
	this.StringMap = that.GetStringMap()
	this.StringToBytesMap = that.GetStringToBytesMap()
	this.StringToEnumMap = that.GetStringToEnumMap()
	this.StringToMsgMap = that.GetStringToMsgMap()
	return this
}

type AllMapsOrderedFace interface {
	Proto() github_com_gogo_protobuf_proto.Message
	GetStringToDoubleMap() map[string]float64
	GetStringToFloatMap() map[string]float32
	GetInt32Map() map[int32]int32
	GetInt64Map() map[int64]int64
	GetUint32Map() map[uint32]uint32
	GetUint64Map() map[uint64]uint64
	GetSint32Map() map[int32]int32
	GetSint64Map() map[int64]int64
	GetFixed32Map() map[uint32]uint32
	GetSfixed32Map() map[int32]int32
	GetFixed64Map() map[uint64]uint64
	GetSfixed64Map() map[int64]int64
	GetBoolMap() map[bool]bool
	GetStringMap() map[string]string
	GetStringToBytesMap() map[string][]byte
	GetStringToEnumMap() map[string]MapEnum
	GetStringToMsgMap() map[string]*FloatingPoint
}

func (this *AllMapsOrdered) Proto() github_com_gogo_protobuf_proto.Message {
	return this
}

func (this *AllMapsOrdered) TestProto() github_com_gogo_protobuf_proto.Message {
	return NewAllMapsOrderedFromFace(this)
}

func (this *AllMapsOrdered) GetStringToDoubleMap() map[string]float64 {
	return this.StringToDoubleMap
}

func (this *AllMapsOrdered) GetStringToFloatMap() map[string]float32 {
	return this.StringToFloatMap
}

func (this *AllMapsOrdered) GetInt32Map() map[int32]int32 {
	return this.Int32Map
}

func (this *AllMapsOrdered) GetInt64Map() map[int64]int64 {
	return this.Int64Map
}

func (this *AllMapsOrdered) GetUint32Map() map[uint32]uint32 {
	return this.Uint32Map
}

func (this *AllMapsOrdered) GetUint64Map() map[uint64]uint64 {
	return this.Uint64Map
}

func (this *AllMapsOrdered) GetSint32Map() map[int32]int32 {
	return this.Sint32Map
}

func (this *AllMapsOrdered) GetSint64Map() map[int64]int64 {
	return this.Sint64Map
}

func (this *AllMapsOrdered) GetFixed32Map() map[uint32]uint32 {
	return this.Fixed32Map
}

func (this *AllMapsOrdered) GetSfixed32Map() map[int32]int32 {
	return this.Sfixed32Map
}

func (this *AllMapsOrdered) GetFixed64Map() map[uint64]uint64 {
	return this.Fixed64Map
}

func (this *AllMapsOrdered) GetSfixed64Map() map[int64]int64 {
	return this.Sfixed64Map
}

func (this *AllMapsOrdered) GetBoolMap() map[bool]bool {
	return this.BoolMap
}

func (this *AllMapsOrdered) GetStringMap() map[string]string {
	return this.StringMap
}

func (this *AllMapsOrdered) GetStringToBytesMap() map[string][]byte {
	return this.StringToBytesMap
}

func (this *AllMapsOrdered) GetStringToEnumMap() map[string]MapEnum {
	return this.StringToEnumMap
}

func (this *AllMapsOrdered) GetStringToMsgMap() map[string]*FloatingPoint {
	return this.StringToMsgMap
}

func NewAllMapsOrderedFromFace(that AllMapsOrderedFace) *AllMapsOrdered {
	this := &AllMapsOrdered{}
	this.StringToDoubleMap = that.GetStringToDoubleMap()
	this.StringToFloatMap = that.GetStringToFloatMap()
	this.Int32Map = that.GetInt32Map()
	this.Int64Map = that.GetInt64Map()
	this.Uint32Map = that.GetUint32Map()
	this.Uint64Map = that.GetUint64Map()
	this.Sint32Map = that.GetSint32Map()
	this.Sint64Map = that.GetSint64Map()
	this.Fixed32Map = that.GetFixed32Map()
	this.Sfixed32Map = that.GetSfixed32Map()
	this.Fixed64Map = that.GetFixed64Map()
	this.Sfixed64Map = that.GetSfixed64Map()
	this.BoolMap = that.GetBoolMap()
	this.StringMap = that.GetStringMap()
	this.StringToBytesMap = that.GetStringToBytesMap()
	this.StringToEnumMap = that.GetStringToEnumMap()
	this.StringToMsgMap = that.GetStringToMsgMap()
	return this
}

func (this *FloatingPoint) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&proto2_maps.FloatingPoint{")
	if this.F != nil {
		s = append(s, "F: "+valueToGoStringMapsproto2(this.F, "float64")+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AllMaps) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 21)
	s = append(s, "&proto2_maps.AllMaps{")
	keysForStringToDoubleMap := make([]string, 0, len(this.StringToDoubleMap))
	for k := range this.StringToDoubleMap {
		keysForStringToDoubleMap = append(keysForStringToDoubleMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForStringToDoubleMap)
	mapStringForStringToDoubleMap := "map[string]float64{"
	for _, k := range keysForStringToDoubleMap {
		mapStringForStringToDoubleMap += fmt.Sprintf("%#v: %#v,", k, this.StringToDoubleMap[k])
	}
	mapStringForStringToDoubleMap += "}"
	if this.StringToDoubleMap != nil {
		s = append(s, "StringToDoubleMap: "+mapStringForStringToDoubleMap+",\n")
	}
	keysForStringToFloatMap := make([]string, 0, len(this.StringToFloatMap))
	for k := range this.StringToFloatMap {
		keysForStringToFloatMap = append(keysForStringToFloatMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForStringToFloatMap)
	mapStringForStringToFloatMap := "map[string]float32{"
	for _, k := range keysForStringToFloatMap {
		mapStringForStringToFloatMap += fmt.Sprintf("%#v: %#v,", k, this.StringToFloatMap[k])
	}
	mapStringForStringToFloatMap += "}"
	if this.StringToFloatMap != nil {
		s = append(s, "StringToFloatMap: "+mapStringForStringToFloatMap+",\n")
	}
	keysForInt32Map := make([]int32, 0, len(this.Int32Map))
	for k := range this.Int32Map {
		keysForInt32Map = append(keysForInt32Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Int32s(keysForInt32Map)
	mapStringForInt32Map := "map[int32]int32{"
	for _, k := range keysForInt32Map {
		mapStringForInt32Map += fmt.Sprintf("%#v: %#v,", k, this.Int32Map[k])
	}
	mapStringForInt32Map += "}"
	if this.Int32Map != nil {
		s = append(s, "Int32Map: "+mapStringForInt32Map+",\n")
	}
	keysForInt64Map := make([]int64, 0, len(this.Int64Map))
	for k := range this.Int64Map {
		keysForInt64Map = append(keysForInt64Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Int64s(keysForInt64Map)
	mapStringForInt64Map := "map[int64]int64{"
	for _, k := range keysForInt64Map {
		mapStringForInt64Map += fmt.Sprintf("%#v: %#v,", k, this.Int64Map[k])
	}
	mapStringForInt64Map += "}"
	if this.Int64Map != nil {
		s = append(s, "Int64Map: "+mapStringForInt64Map+",\n")
	}
	keysForUint32Map := make([]uint32, 0, len(this.Uint32Map))
	for k := range this.Uint32Map {
		keysForUint32Map = append(keysForUint32Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint32s(keysForUint32Map)
	mapStringForUint32Map := "map[uint32]uint32{"
	for _, k := range keysForUint32Map {
		mapStringForUint32Map += fmt.Sprintf("%#v: %#v,", k, this.Uint32Map[k])
	}
	mapStringForUint32Map += "}"
	if this.Uint32Map != nil {
		s = append(s, "Uint32Map: "+mapStringForUint32Map+",\n")
	}
	keysForUint64Map := make([]uint64, 0, len(this.Uint64Map))
	for k := range this.Uint64Map {
		keysForUint64Map = append(keysForUint64Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint64s(keysForUint64Map)
	mapStringForUint64Map := "map[uint64]uint64{"
	for _, k := range keysForUint64Map {
		mapStringForUint64Map += fmt.Sprintf("%#v: %#v,", k, this.Uint64Map[k])
	}
	mapStringForUint64Map += "}"
	if this.Uint64Map != nil {
		s = append(s, "Uint64Map: "+mapStringForUint64Map+",\n")
	}
	keysForSint32Map := make([]int32, 0, len(this.Sint32Map))
	for k := range this.Sint32Map {
		keysForSint32Map = append(keysForSint32Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Int32s(keysForSint32Map)
	mapStringForSint32Map := "map[int32]int32{"
	for _, k := range keysForSint32Map {
		mapStringForSint32Map += fmt.Sprintf("%#v: %#v,", k, this.Sint32Map[k])
	}
	mapStringForSint32Map += "}"
	if this.Sint32Map != nil {
		s = append(s, "Sint32Map: "+mapStringForSint32Map+",\n")
	}
	keysForSint64Map := make([]int64, 0, len(this.Sint64Map))
	for k := range this.Sint64Map {
		keysForSint64Map = append(keysForSint64Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Int64s(keysForSint64Map)
	mapStringForSint64Map := "map[int64]int64{"
	for _, k := range keysForSint64Map {
		mapStringForSint64Map += fmt.Sprintf("%#v: %#v,", k, this.Sint64Map[k])
	}
	mapStringForSint64Map += "}"
	if this.Sint64Map != nil {
		s = append(s, "Sint64Map: "+mapStringForSint64Map+",\n")
	}
	keysForFixed32Map := make([]uint32, 0, len(this.Fixed32Map))
	for k := range this.Fixed32Map {
		keysForFixed32Map = append(keysForFixed32Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint32s(keysForFixed32Map)
	mapStringForFixed32Map := "map[uint32]uint32{"
	for _, k := range keysForFixed32Map {
		mapStringForFixed32Map += fmt.Sprintf("%#v: %#v,", k, this.Fixed32Map[k])
	}
	mapStringForFixed32Map += "}"
	if this.Fixed32Map != nil {
		s = append(s, "Fixed32Map: "+mapStringForFixed32Map+",\n")
	}
	keysForSfixed32Map := make([]int32, 0, len(this.Sfixed32Map))
	for k := range this.Sfixed32Map {
		keysForSfixed32Map = append(keysForSfixed32Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Int32s(keysForSfixed32Map)
	mapStringForSfixed32Map := "map[int32]int32{"
	for _, k := range keysForSfixed32Map {
		mapStringForSfixed32Map += fmt.Sprintf("%#v: %#v,", k, this.Sfixed32Map[k])
	}
	mapStringForSfixed32Map += "}"
	if this.Sfixed32Map != nil {
		s = append(s, "Sfixed32Map: "+mapStringForSfixed32Map+",\n")
	}
	keysForFixed64Map := make([]uint64, 0, len(this.Fixed64Map))
	for k := range this.Fixed64Map {
		keysForFixed64Map = append(keysForFixed64Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint64s(keysForFixed64Map)
	mapStringForFixed64Map := "map[uint64]uint64{"
	for _, k := range keysForFixed64Map {
		mapStringForFixed64Map += fmt.Sprintf("%#v: %#v,", k, this.Fixed64Map[k])
	}
	mapStringForFixed64Map += "}"
	if this.Fixed64Map != nil {
		s = append(s, "Fixed64Map: "+mapStringForFixed64Map+",\n")
	}
	keysForSfixed64Map := make([]int64, 0, len(this.Sfixed64Map))
	for k := range this.Sfixed64Map {
		keysForSfixed64Map = append(keysForSfixed64Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Int64s(keysForSfixed64Map)
	mapStringForSfixed64Map := "map[int64]int64{"
	for _, k := range keysForSfixed64Map {
		mapStringForSfixed64Map += fmt.Sprintf("%#v: %#v,", k, this.Sfixed64Map[k])
	}
	mapStringForSfixed64Map += "}"
	if this.Sfixed64Map != nil {
		s = append(s, "Sfixed64Map: "+mapStringForSfixed64Map+",\n")
	}
	keysForBoolMap := make([]bool, 0, len(this.BoolMap))
	for k := range this.BoolMap {
		keysForBoolMap = append(keysForBoolMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Bools(keysForBoolMap)
	mapStringForBoolMap := "map[bool]bool{"
	for _, k := range keysForBoolMap {
		mapStringForBoolMap += fmt.Sprintf("%#v: %#v,", k, this.BoolMap[k])
	}
	mapStringForBoolMap += "}"
	if this.BoolMap != nil {
		s = append(s, "BoolMap: "+mapStringForBoolMap+",\n")
	}
	keysForStringMap := make([]string, 0, len(this.StringMap))
	for k := range this.StringMap {
		keysForStringMap = append(keysForStringMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForStringMap)
	mapStringForStringMap := "map[string]string{"
	for _, k := range keysForStringMap {
		mapStringForStringMap += fmt.Sprintf("%#v: %#v,", k, this.StringMap[k])
	}
	mapStringForStringMap += "}"
	if this.StringMap != nil {
		s = append(s, "StringMap: "+mapStringForStringMap+",\n")
	}
	keysForStringToBytesMap := make([]string, 0, len(this.StringToBytesMap))
	for k := range this.StringToBytesMap {
		keysForStringToBytesMap = append(keysForStringToBytesMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForStringToBytesMap)
	mapStringForStringToBytesMap := "map[string][]byte{"
	for _, k := range keysForStringToBytesMap {
		mapStringForStringToBytesMap += fmt.Sprintf("%#v: %#v,", k, this.StringToBytesMap[k])
	}
	mapStringForStringToBytesMap += "}"
	if this.StringToBytesMap != nil {
		s = append(s, "StringToBytesMap: "+mapStringForStringToBytesMap+",\n")
	}
	keysForStringToEnumMap := make([]string, 0, len(this.StringToEnumMap))
	for k := range this.StringToEnumMap {
		keysForStringToEnumMap = append(keysForStringToEnumMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForStringToEnumMap)
	mapStringForStringToEnumMap := "map[string]MapEnum{"
	for _, k := range keysForStringToEnumMap {
		mapStringForStringToEnumMap += fmt.Sprintf("%#v: %#v,", k, this.StringToEnumMap[k])
	}
	mapStringForStringToEnumMap += "}"
	if this.StringToEnumMap != nil {
		s = append(s, "StringToEnumMap: "+mapStringForStringToEnumMap+",\n")
	}
	keysForStringToMsgMap := make([]string, 0, len(this.StringToMsgMap))
	for k := range this.StringToMsgMap {
		keysForStringToMsgMap = append(keysForStringToMsgMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForStringToMsgMap)
	mapStringForStringToMsgMap := "map[string]*FloatingPoint{"
	for _, k := range keysForStringToMsgMap {
		mapStringForStringToMsgMap += fmt.Sprintf("%#v: %#v,", k, this.StringToMsgMap[k])
	}
	mapStringForStringToMsgMap += "}"
	if this.StringToMsgMap != nil {
		s = append(s, "StringToMsgMap: "+mapStringForStringToMsgMap+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AllMapsOrdered) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 21)
	s = append(s, "&proto2_maps.AllMapsOrdered{")
	keysForStringToDoubleMap := make([]string, 0, len(this.StringToDoubleMap))
	for k := range this.StringToDoubleMap {
		keysForStringToDoubleMap = append(keysForStringToDoubleMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForStringToDoubleMap)
	mapStringForStringToDoubleMap := "map[string]float64{"
	for _, k := range keysForStringToDoubleMap {
		mapStringForStringToDoubleMap += fmt.Sprintf("%#v: %#v,", k, this.StringToDoubleMap[k])
	}
	mapStringForStringToDoubleMap += "}"
	if this.StringToDoubleMap != nil {
		s = append(s, "StringToDoubleMap: "+mapStringForStringToDoubleMap+",\n")
	}
	keysForStringToFloatMap := make([]string, 0, len(this.StringToFloatMap))
	for k := range this.StringToFloatMap {
		keysForStringToFloatMap = append(keysForStringToFloatMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForStringToFloatMap)
	mapStringForStringToFloatMap := "map[string]float32{"
	for _, k := range keysForStringToFloatMap {
		mapStringForStringToFloatMap += fmt.Sprintf("%#v: %#v,", k, this.StringToFloatMap[k])
	}
	mapStringForStringToFloatMap += "}"
	if this.StringToFloatMap != nil {
		s = append(s, "StringToFloatMap: "+mapStringForStringToFloatMap+",\n")
	}
	keysForInt32Map := make([]int32, 0, len(this.Int32Map))
	for k := range this.Int32Map {
		keysForInt32Map = append(keysForInt32Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Int32s(keysForInt32Map)
	mapStringForInt32Map := "map[int32]int32{"
	for _, k := range keysForInt32Map {
		mapStringForInt32Map += fmt.Sprintf("%#v: %#v,", k, this.Int32Map[k])
	}
	mapStringForInt32Map += "}"
	if this.Int32Map != nil {
		s = append(s, "Int32Map: "+mapStringForInt32Map+",\n")
	}
	keysForInt64Map := make([]int64, 0, len(this.Int64Map))
	for k := range this.Int64Map {
		keysForInt64Map = append(keysForInt64Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Int64s(keysForInt64Map)
	mapStringForInt64Map := "map[int64]int64{"
	for _, k := range keysForInt64Map {
		mapStringForInt64Map += fmt.Sprintf("%#v: %#v,", k, this.Int64Map[k])
	}
	mapStringForInt64Map += "}"
	if this.Int64Map != nil {
		s = append(s, "Int64Map: "+mapStringForInt64Map+",\n")
	}
	keysForUint32Map := make([]uint32, 0, len(this.Uint32Map))
	for k := range this.Uint32Map {
		keysForUint32Map = append(keysForUint32Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint32s(keysForUint32Map)
	mapStringForUint32Map := "map[uint32]uint32{"
	for _, k := range keysForUint32Map {
		mapStringForUint32Map += fmt.Sprintf("%#v: %#v,", k, this.Uint32Map[k])
	}
	mapStringForUint32Map += "}"
	if this.Uint32Map != nil {
		s = append(s, "Uint32Map: "+mapStringForUint32Map+",\n")
	}
	keysForUint64Map := make([]uint64, 0, len(this.Uint64Map))
	for k := range this.Uint64Map {
		keysForUint64Map = append(keysForUint64Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint64s(keysForUint64Map)
	mapStringForUint64Map := "map[uint64]uint64{"
	for _, k := range keysForUint64Map {
		mapStringForUint64Map += fmt.Sprintf("%#v: %#v,", k, this.Uint64Map[k])
	}
	mapStringForUint64Map += "}"
	if this.Uint64Map != nil {
		s = append(s, "Uint64Map: "+mapStringForUint64Map+",\n")
	}
	keysForSint32Map := make([]int32, 0, len(this.Sint32Map))
	for k := range this.Sint32Map {
		keysForSint32Map = append(keysForSint32Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Int32s(keysForSint32Map)
	mapStringForSint32Map := "map[int32]int32{"
	for _, k := range keysForSint32Map {
		mapStringForSint32Map += fmt.Sprintf("%#v: %#v,", k, this.Sint32Map[k])
	}
	mapStringForSint32Map += "}"
	if this.Sint32Map != nil {
		s = append(s, "Sint32Map: "+mapStringForSint32Map+",\n")
	}
	keysForSint64Map := make([]int64, 0, len(this.Sint64Map))
	for k := range this.Sint64Map {
		keysForSint64Map = append(keysForSint64Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Int64s(keysForSint64Map)
	mapStringForSint64Map := "map[int64]int64{"
	for _, k := range keysForSint64Map {
		mapStringForSint64Map += fmt.Sprintf("%#v: %#v,", k, this.Sint64Map[k])
	}
	mapStringForSint64Map += "}"
	if this.Sint64Map != nil {
		s = append(s, "Sint64Map: "+mapStringForSint64Map+",\n")
	}
	keysForFixed32Map := make([]uint32, 0, len(this.Fixed32Map))
	for k := range this.Fixed32Map {
		keysForFixed32Map = append(keysForFixed32Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint32s(keysForFixed32Map)
	mapStringForFixed32Map := "map[uint32]uint32{"
	for _, k := range keysForFixed32Map {
		mapStringForFixed32Map += fmt.Sprintf("%#v: %#v,", k, this.Fixed32Map[k])
	}
	mapStringForFixed32Map += "}"
	if this.Fixed32Map != nil {
		s = append(s, "Fixed32Map: "+mapStringForFixed32Map+",\n")
	}
	keysForSfixed32Map := make([]int32, 0, len(this.Sfixed32Map))
	for k := range this.Sfixed32Map {
		keysForSfixed32Map = append(keysForSfixed32Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Int32s(keysForSfixed32Map)
	mapStringForSfixed32Map := "map[int32]int32{"
	for _, k := range keysForSfixed32Map {
		mapStringForSfixed32Map += fmt.Sprintf("%#v: %#v,", k, this.Sfixed32Map[k])
	}
	mapStringForSfixed32Map += "}"
	if this.Sfixed32Map != nil {
		s = append(s, "Sfixed32Map: "+mapStringForSfixed32Map+",\n")
	}
	keysForFixed64Map := make([]uint64, 0, len(this.Fixed64Map))
	for k := range this.Fixed64Map {
		keysForFixed64Map = append(keysForFixed64Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint64s(keysForFixed64Map)
	mapStringForFixed64Map := "map[uint64]uint64{"
	for _, k := range keysForFixed64Map {
		mapStringForFixed64Map += fmt.Sprintf("%#v: %#v,", k, this.Fixed64Map[k])
	}
	mapStringForFixed64Map += "}"
	if this.Fixed64Map != nil {
		s = append(s, "Fixed64Map: "+mapStringForFixed64Map+",\n")
	}
	keysForSfixed64Map := make([]int64, 0, len(this.Sfixed64Map))
	for k := range this.Sfixed64Map {
		keysForSfixed64Map = append(keysForSfixed64Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Int64s(keysForSfixed64Map)
	mapStringForSfixed64Map := "map[int64]int64{"
	for _, k := range keysForSfixed64Map {
		mapStringForSfixed64Map += fmt.Sprintf("%#v: %#v,", k, this.Sfixed64Map[k])
	}
	mapStringForSfixed64Map += "}"
	if this.Sfixed64Map != nil {
		s = append(s, "Sfixed64Map: "+mapStringForSfixed64Map+",\n")
	}
	keysForBoolMap := make([]bool, 0, len(this.BoolMap))
	for k := range this.BoolMap {
		keysForBoolMap = append(keysForBoolMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Bools(keysForBoolMap)
	mapStringForBoolMap := "map[bool]bool{"
	for _, k := range keysForBoolMap {
		mapStringForBoolMap += fmt.Sprintf("%#v: %#v,", k, this.BoolMap[k])
	}
	mapStringForBoolMap += "}"
	if this.BoolMap != nil {
		s = append(s, "BoolMap: "+mapStringForBoolMap+",\n")
	}
	keysForStringMap := make([]string, 0, len(this.StringMap))
	for k := range this.StringMap {
		keysForStringMap = append(keysForStringMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForStringMap)
	mapStringForStringMap := "map[string]string{"
	for _, k := range keysForStringMap {
		mapStringForStringMap += fmt.Sprintf("%#v: %#v,", k, this.StringMap[k])
	}
	mapStringForStringMap += "}"
	if this.StringMap != nil {
		s = append(s, "StringMap: "+mapStringForStringMap+",\n")
	}
	keysForStringToBytesMap := make([]string, 0, len(this.StringToBytesMap))
	for k := range this.StringToBytesMap {
		keysForStringToBytesMap = append(keysForStringToBytesMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForStringToBytesMap)
	mapStringForStringToBytesMap := "map[string][]byte{"
	for _, k := range keysForStringToBytesMap {
		mapStringForStringToBytesMap += fmt.Sprintf("%#v: %#v,", k, this.StringToBytesMap[k])
	}
	mapStringForStringToBytesMap += "}"
	if this.StringToBytesMap != nil {
		s = append(s, "StringToBytesMap: "+mapStringForStringToBytesMap+",\n")
	}
	keysForStringToEnumMap := make([]string, 0, len(this.StringToEnumMap))
	for k := range this.StringToEnumMap {
		keysForStringToEnumMap = append(keysForStringToEnumMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForStringToEnumMap)
	mapStringForStringToEnumMap := "map[string]MapEnum{"
	for _, k := range keysForStringToEnumMap {
		mapStringForStringToEnumMap += fmt.Sprintf("%#v: %#v,", k, this.StringToEnumMap[k])
	}
	mapStringForStringToEnumMap += "}"
	if this.StringToEnumMap != nil {
		s = append(s, "StringToEnumMap: "+mapStringForStringToEnumMap+",\n")
	}
	keysForStringToMsgMap := make([]string, 0, len(this.StringToMsgMap))
	for k := range this.StringToMsgMap {
		keysForStringToMsgMap = append(keysForStringToMsgMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForStringToMsgMap)
	mapStringForStringToMsgMap := "map[string]*FloatingPoint{"
	for _, k := range keysForStringToMsgMap {
		mapStringForStringToMsgMap += fmt.Sprintf("%#v: %#v,", k, this.StringToMsgMap[k])
	}
	mapStringForStringToMsgMap += "}"
	if this.StringToMsgMap != nil {
		s = append(s, "StringToMsgMap: "+mapStringForStringToMsgMap+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringMapsproto2(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func extensionToGoStringMapsproto2(m github_com_gogo_protobuf_proto.Message) string {
	e := github_com_gogo_protobuf_proto.GetUnsafeExtensionsMap(m)
	if e == nil {
		return "nil"
	}
	s := "proto.NewUnsafeXXX_InternalExtensions(map[int32]proto.Extension{"
	keys := make([]int, 0, len(e))
	for k := range e {
		keys = append(keys, int(k))
	}
	sort.Ints(keys)
	ss := []string{}
	for _, k := range keys {
		ss = append(ss, strconv.Itoa(k)+": "+e[int32(k)].GoString())
	}
	s += strings.Join(ss, ",") + "})"
	return s
}
func NewPopulatedFloatingPoint(r randyMapsproto2, easy bool) *FloatingPoint {
	this := &FloatingPoint{}
	if r.Intn(10) != 0 {
		v1 := float64(r.Float64())
		if r.Intn(2) == 0 {
			v1 *= -1
		}
		this.F = &v1
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMapsproto2(r, 2)
	}
	return this
}

func NewPopulatedAllMaps(r randyMapsproto2, easy bool) *AllMaps {
	this := &AllMaps{}
	if r.Intn(10) != 0 {
		v2 := r.Intn(10)
		this.StringToDoubleMap = make(map[string]float64)
		for i := 0; i < v2; i++ {
			v3 := randStringMapsproto2(r)
			this.StringToDoubleMap[v3] = float64(r.Float64())
			if r.Intn(2) == 0 {
				this.StringToDoubleMap[v3] *= -1
			}
		}
	}
	if r.Intn(10) != 0 {
		v4 := r.Intn(10)
		this.StringToFloatMap = make(map[string]float32)
		for i := 0; i < v4; i++ {
			v5 := randStringMapsproto2(r)
			this.StringToFloatMap[v5] = float32(r.Float32())
			if r.Intn(2) == 0 {
				this.StringToFloatMap[v5] *= -1
			}
		}
	}
	if r.Intn(10) != 0 {
		v6 := r.Intn(10)
		this.Int32Map = make(map[int32]int32)
		for i := 0; i < v6; i++ {
			v7 := int32(r.Int31())
			this.Int32Map[v7] = int32(r.Int31())
			if r.Intn(2) == 0 {
				this.Int32Map[v7] *= -1
			}
		}
	}
	if r.Intn(10) != 0 {
		v8 := r.Intn(10)
		this.Int64Map = make(map[int64]int64)
		for i := 0; i < v8; i++ {
			v9 := int64(r.Int63())
			this.Int64Map[v9] = int64(r.Int63())
			if r.Intn(2) == 0 {
				this.Int64Map[v9] *= -1
			}
		}
	}
	if r.Intn(10) != 0 {
		v10 := r.Intn(10)
		this.Uint32Map = make(map[uint32]uint32)
		for i := 0; i < v10; i++ {
			v11 := uint32(r.Uint32())
			this.Uint32Map[v11] = uint32(r.Uint32())
		}
	}
	if r.Intn(10) != 0 {
		v12 := r.Intn(10)
		this.Uint64Map = make(map[uint64]uint64)
		for i := 0; i < v12; i++ {
			v13 := uint64(uint64(r.Uint32()))
			this.Uint64Map[v13] = uint64(uint64(r.Uint32()))
		}
	}
	if r.Intn(10) != 0 {
		v14 := r.Intn(10)
		this.Sint32Map = make(map[int32]int32)
		for i := 0; i < v14; i++ {
			v15 := int32(r.Int31())
			this.Sint32Map[v15] = int32(r.Int31())
			if r.Intn(2) == 0 {
				this.Sint32Map[v15] *= -1
			}
		}
	}
	if r.Intn(10) != 0 {
		v16 := r.Intn(10)
		this.Sint64Map = make(map[int64]int64)
		for i := 0; i < v16; i++ {
			v17 := int64(r.Int63())
			this.Sint64Map[v17] = int64(r.Int63())
			if r.Intn(2) == 0 {
				this.Sint64Map[v17] *= -1
			}
		}
	}
	if r.Intn(10) != 0 {
		v18 := r.Intn(10)
		this.Fixed32Map = make(map[uint32]uint32)
		for i := 0; i < v18; i++ {
			v19 := uint32(r.Uint32())
			this.Fixed32Map[v19] = uint32(r.Uint32())
		}
	}
	if r.Intn(10) != 0 {
		v20 := r.Intn(10)
		this.Sfixed32Map = make(map[int32]int32)
		for i := 0; i < v20; i++ {
			v21 := int32(r.Int31())
			this.Sfixed32Map[v21] = int32(r.Int31())
			if r.Intn(2) == 0 {
				this.Sfixed32Map[v21] *= -1
			}
		}
	}
	if r.Intn(10) != 0 {
		v22 := r.Intn(10)
		this.Fixed64Map = make(map[uint64]uint64)
		for i := 0; i < v22; i++ {
			v23 := uint64(uint64(r.Uint32()))
			this.Fixed64Map[v23] = uint64(uint64(r.Uint32()))
		}
	}
	if r.Intn(10) != 0 {
		v24 := r.Intn(10)
		this.Sfixed64Map = make(map[int64]int64)
		for i := 0; i < v24; i++ {
			v25 := int64(r.Int63())
			this.Sfixed64Map[v25] = int64(r.Int63())
			if r.Intn(2) == 0 {
				this.Sfixed64Map[v25] *= -1
			}
		}
	}
	if r.Intn(10) != 0 {
		v26 := r.Intn(10)
		this.BoolMap = make(map[bool]bool)
		for i := 0; i < v26; i++ {
			v27 := bool(bool(r.Intn(2) == 0))
			this.BoolMap[v27] = bool(bool(r.Intn(2) == 0))
		}
	}
	if r.Intn(10) != 0 {
		v28 := r.Intn(10)
		this.StringMap = make(map[string]string)
		for i := 0; i < v28; i++ {
			this.StringMap[randStringMapsproto2(r)] = randStringMapsproto2(r)
		}
	}
	if r.Intn(10) != 0 {
		v29 := r.Intn(10)
		this.StringToBytesMap = make(map[string][]byte)
		for i := 0; i < v29; i++ {
			v30 := r.Intn(100)
			v31 := randStringMapsproto2(r)
			this.StringToBytesMap[v31] = make([]byte, v30)
			for i := 0; i < v30; i++ {
				this.StringToBytesMap[v31][i] = byte(r.Intn(256))
			}
		}
	}
	if r.Intn(10) != 0 {
		v32 := r.Intn(10)
		this.StringToEnumMap = make(map[string]MapEnum)
		for i := 0; i < v32; i++ {
			this.StringToEnumMap[randStringMapsproto2(r)] = MapEnum([]int32{0, 1, 2}[r.Intn(3)])
		}
	}
	if r.Intn(10) != 0 {
		v33 := r.Intn(10)
		this.StringToMsgMap = make(map[string]*FloatingPoint)
		for i := 0; i < v33; i++ {
			this.StringToMsgMap[randStringMapsproto2(r)] = NewPopulatedFloatingPoint(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMapsproto2(r, 18)
	}
	return this
}

func NewPopulatedAllMapsOrdered(r randyMapsproto2, easy bool) *AllMapsOrdered {
	this := &AllMapsOrdered{}
	if r.Intn(10) != 0 {
		v34 := r.Intn(10)
		this.StringToDoubleMap = make(map[string]float64)
		for i := 0; i < v34; i++ {
			v35 := randStringMapsproto2(r)
			this.StringToDoubleMap[v35] = float64(r.Float64())
			if r.Intn(2) == 0 {
				this.StringToDoubleMap[v35] *= -1
			}
		}
	}
	if r.Intn(10) != 0 {
		v36 := r.Intn(10)
		this.StringToFloatMap = make(map[string]float32)
		for i := 0; i < v36; i++ {
			v37 := randStringMapsproto2(r)
			this.StringToFloatMap[v37] = float32(r.Float32())
			if r.Intn(2) == 0 {
				this.StringToFloatMap[v37] *= -1
			}
		}
	}
	if r.Intn(10) != 0 {
		v38 := r.Intn(10)
		this.Int32Map = make(map[int32]int32)
		for i := 0; i < v38; i++ {
			v39 := int32(r.Int31())
			this.Int32Map[v39] = int32(r.Int31())
			if r.Intn(2) == 0 {
				this.Int32Map[v39] *= -1
			}
		}
	}
	if r.Intn(10) != 0 {
		v40 := r.Intn(10)
		this.Int64Map = make(map[int64]int64)
		for i := 0; i < v40; i++ {
			v41 := int64(r.Int63())
			this.Int64Map[v41] = int64(r.Int63())
			if r.Intn(2) == 0 {
				this.Int64Map[v41] *= -1
			}
		}
	}
	if r.Intn(10) != 0 {
		v42 := r.Intn(10)
		this.Uint32Map = make(map[uint32]uint32)
		for i := 0; i < v42; i++ {
			v43 := uint32(r.Uint32())
			this.Uint32Map[v43] = uint32(r.Uint32())
		}
	}
	if r.Intn(10) != 0 {
		v44 := r.Intn(10)
		this.Uint64Map = make(map[uint64]uint64)
		for i := 0; i < v44; i++ {
			v45 := uint64(uint64(r.Uint32()))
			this.Uint64Map[v45] = uint64(uint64(r.Uint32()))
		}
	}
	if r.Intn(10) != 0 {
		v46 := r.Intn(10)
		this.Sint32Map = make(map[int32]int32)
		for i := 0; i < v46; i++ {
			v47 := int32(r.Int31())
			this.Sint32Map[v47] = int32(r.Int31())
			if r.Intn(2) == 0 {
				this.Sint32Map[v47] *= -1
			}
		}
	}
	if r.Intn(10) != 0 {
		v48 := r.Intn(10)
		this.Sint64Map = make(map[int64]int64)
		for i := 0; i < v48; i++ {
			v49 := int64(r.Int63())
			this.Sint64Map[v49] = int64(r.Int63())
			if r.Intn(2) == 0 {
				this.Sint64Map[v49] *= -1
			}
		}
	}
	if r.Intn(10) != 0 {
		v50 := r.Intn(10)
		this.Fixed32Map = make(map[uint32]uint32)
		for i := 0; i < v50; i++ {
			v51 := uint32(r.Uint32())
			this.Fixed32Map[v51] = uint32(r.Uint32())
		}
	}
	if r.Intn(10) != 0 {
		v52 := r.Intn(10)
		this.Sfixed32Map = make(map[int32]int32)
		for i := 0; i < v52; i++ {
			v53 := int32(r.Int31())
			this.Sfixed32Map[v53] = int32(r.Int31())
			if r.Intn(2) == 0 {
				this.Sfixed32Map[v53] *= -1
			}
		}
	}
	if r.Intn(10) != 0 {
		v54 := r.Intn(10)
		this.Fixed64Map = make(map[uint64]uint64)
		for i := 0; i < v54; i++ {
			v55 := uint64(uint64(r.Uint32()))
			this.Fixed64Map[v55] = uint64(uint64(r.Uint32()))
		}
	}
	if r.Intn(10) != 0 {
		v56 := r.Intn(10)
		this.Sfixed64Map = make(map[int64]int64)
		for i := 0; i < v56; i++ {
			v57 := int64(r.Int63())
			this.Sfixed64Map[v57] = int64(r.Int63())
			if r.Intn(2) == 0 {
				this.Sfixed64Map[v57] *= -1
			}
		}
	}
	if r.Intn(10) != 0 {
		v58 := r.Intn(10)
		this.BoolMap = make(map[bool]bool)
		for i := 0; i < v58; i++ {
			v59 := bool(bool(r.Intn(2) == 0))
			this.BoolMap[v59] = bool(bool(r.Intn(2) == 0))
		}
	}
	if r.Intn(10) != 0 {
		v60 := r.Intn(10)
		this.StringMap = make(map[string]string)
		for i := 0; i < v60; i++ {
			this.StringMap[randStringMapsproto2(r)] = randStringMapsproto2(r)
		}
	}
	if r.Intn(10) != 0 {
		v61 := r.Intn(10)
		this.StringToBytesMap = make(map[string][]byte)
		for i := 0; i < v61; i++ {
			v62 := r.Intn(100)
			v63 := randStringMapsproto2(r)
			this.StringToBytesMap[v63] = make([]byte, v62)
			for i := 0; i < v62; i++ {
				this.StringToBytesMap[v63][i] = byte(r.Intn(256))
			}
		}
	}
	if r.Intn(10) != 0 {
		v64 := r.Intn(10)
		this.StringToEnumMap = make(map[string]MapEnum)
		for i := 0; i < v64; i++ {
			this.StringToEnumMap[randStringMapsproto2(r)] = MapEnum([]int32{0, 1, 2}[r.Intn(3)])
		}
	}
	if r.Intn(10) != 0 {
		v65 := r.Intn(10)
		this.StringToMsgMap = make(map[string]*FloatingPoint)
		for i := 0; i < v65; i++ {
			this.StringToMsgMap[randStringMapsproto2(r)] = NewPopulatedFloatingPoint(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMapsproto2(r, 18)
	}
	return this
}

type randyMapsproto2 interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneMapsproto2(r randyMapsproto2) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringMapsproto2(r randyMapsproto2) string {
	v66 := r.Intn(100)
	tmps := make([]rune, v66)
	for i := 0; i < v66; i++ {
		tmps[i] = randUTF8RuneMapsproto2(r)
	}
	return string(tmps)
}
func randUnrecognizedMapsproto2(r randyMapsproto2, maxFieldNumber int) (data []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		data = randFieldMapsproto2(data, r, fieldNumber, wire)
	}
	return data
}
func randFieldMapsproto2(data []byte, r randyMapsproto2, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		data = encodeVarintPopulateMapsproto2(data, uint64(key))
		v67 := r.Int63()
		if r.Intn(2) == 0 {
			v67 *= -1
		}
		data = encodeVarintPopulateMapsproto2(data, uint64(v67))
	case 1:
		data = encodeVarintPopulateMapsproto2(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		data = encodeVarintPopulateMapsproto2(data, uint64(key))
		ll := r.Intn(100)
		data = encodeVarintPopulateMapsproto2(data, uint64(ll))
		for j := 0; j < ll; j++ {
			data = append(data, byte(r.Intn(256)))
		}
	default:
		data = encodeVarintPopulateMapsproto2(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return data
}
func encodeVarintPopulateMapsproto2(data []byte, v uint64) []byte {
	for v >= 1<<7 {
		data = append(data, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	data = append(data, uint8(v))
	return data
}
func (m *FloatingPoint) Size() (n int) {
	var l int
	_ = l
	if m.F != nil {
		n += 9
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AllMaps) Size() (n int) {
	var l int
	_ = l
	if len(m.StringToDoubleMap) > 0 {
		for k, v := range m.StringToDoubleMap {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovMapsproto2(uint64(len(k))) + 1 + 8
			n += mapEntrySize + 1 + sovMapsproto2(uint64(mapEntrySize))
		}
	}
	if len(m.StringToFloatMap) > 0 {
		for k, v := range m.StringToFloatMap {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovMapsproto2(uint64(len(k))) + 1 + 4
			n += mapEntrySize + 1 + sovMapsproto2(uint64(mapEntrySize))
		}
	}
	if len(m.Int32Map) > 0 {
		for k, v := range m.Int32Map {
			_ = k
			_ = v
			mapEntrySize := 1 + sovMapsproto2(uint64(k)) + 1 + sovMapsproto2(uint64(v))
			n += mapEntrySize + 1 + sovMapsproto2(uint64(mapEntrySize))
		}
	}
	if len(m.Int64Map) > 0 {
		for k, v := range m.Int64Map {
			_ = k
			_ = v
			mapEntrySize := 1 + sovMapsproto2(uint64(k)) + 1 + sovMapsproto2(uint64(v))
			n += mapEntrySize + 1 + sovMapsproto2(uint64(mapEntrySize))
		}
	}
	if len(m.Uint32Map) > 0 {
		for k, v := range m.Uint32Map {
			_ = k
			_ = v
			mapEntrySize := 1 + sovMapsproto2(uint64(k)) + 1 + sovMapsproto2(uint64(v))
			n += mapEntrySize + 1 + sovMapsproto2(uint64(mapEntrySize))
		}
	}
	if len(m.Uint64Map) > 0 {
		for k, v := range m.Uint64Map {
			_ = k
			_ = v
			mapEntrySize := 1 + sovMapsproto2(uint64(k)) + 1 + sovMapsproto2(uint64(v))
			n += mapEntrySize + 1 + sovMapsproto2(uint64(mapEntrySize))
		}
	}
	if len(m.Sint32Map) > 0 {
		for k, v := range m.Sint32Map {
			_ = k
			_ = v
			mapEntrySize := 1 + sozMapsproto2(uint64(k)) + 1 + sozMapsproto2(uint64(v))
			n += mapEntrySize + 1 + sovMapsproto2(uint64(mapEntrySize))
		}
	}
	if len(m.Sint64Map) > 0 {
		for k, v := range m.Sint64Map {
			_ = k
			_ = v
			mapEntrySize := 1 + sozMapsproto2(uint64(k)) + 1 + sozMapsproto2(uint64(v))
			n += mapEntrySize + 1 + sovMapsproto2(uint64(mapEntrySize))
		}
	}
	if len(m.Fixed32Map) > 0 {
		for k, v := range m.Fixed32Map {
			_ = k
			_ = v
			mapEntrySize := 1 + 4 + 1 + 4
			n += mapEntrySize + 1 + sovMapsproto2(uint64(mapEntrySize))
		}
	}
	if len(m.Sfixed32Map) > 0 {
		for k, v := range m.Sfixed32Map {
			_ = k
			_ = v
			mapEntrySize := 1 + 4 + 1 + 4
			n += mapEntrySize + 1 + sovMapsproto2(uint64(mapEntrySize))
		}
	}
	if len(m.Fixed64Map) > 0 {
		for k, v := range m.Fixed64Map {
			_ = k
			_ = v
			mapEntrySize := 1 + 8 + 1 + 8
			n += mapEntrySize + 1 + sovMapsproto2(uint64(mapEntrySize))
		}
	}
	if len(m.Sfixed64Map) > 0 {
		for k, v := range m.Sfixed64Map {
			_ = k
			_ = v
			mapEntrySize := 1 + 8 + 1 + 8
			n += mapEntrySize + 1 + sovMapsproto2(uint64(mapEntrySize))
		}
	}
	if len(m.BoolMap) > 0 {
		for k, v := range m.BoolMap {
			_ = k
			_ = v
			mapEntrySize := 1 + 1 + 1 + 1
			n += mapEntrySize + 1 + sovMapsproto2(uint64(mapEntrySize))
		}
	}
	if len(m.StringMap) > 0 {
		for k, v := range m.StringMap {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovMapsproto2(uint64(len(k))) + 1 + len(v) + sovMapsproto2(uint64(len(v)))
			n += mapEntrySize + 1 + sovMapsproto2(uint64(mapEntrySize))
		}
	}
	if len(m.StringToBytesMap) > 0 {
		for k, v := range m.StringToBytesMap {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = 1 + len(v) + sovMapsproto2(uint64(len(v)))
			}
			mapEntrySize := 1 + len(k) + sovMapsproto2(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovMapsproto2(uint64(mapEntrySize))
		}
	}
	if len(m.StringToEnumMap) > 0 {
		for k, v := range m.StringToEnumMap {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovMapsproto2(uint64(len(k))) + 1 + sovMapsproto2(uint64(v))
			n += mapEntrySize + 2 + sovMapsproto2(uint64(mapEntrySize))
		}
	}
	if len(m.StringToMsgMap) > 0 {
		for k, v := range m.StringToMsgMap {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovMapsproto2(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovMapsproto2(uint64(len(k))) + l
			n += mapEntrySize + 2 + sovMapsproto2(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AllMapsOrdered) Size() (n int) {
	var l int
	_ = l
	if len(m.StringToDoubleMap) > 0 {
		for k, v := range m.StringToDoubleMap {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovMapsproto2(uint64(len(k))) + 1 + 8
			n += mapEntrySize + 1 + sovMapsproto2(uint64(mapEntrySize))
		}
	}
	if len(m.StringToFloatMap) > 0 {
		for k, v := range m.StringToFloatMap {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovMapsproto2(uint64(len(k))) + 1 + 4
			n += mapEntrySize + 1 + sovMapsproto2(uint64(mapEntrySize))
		}
	}
	if len(m.Int32Map) > 0 {
		for k, v := range m.Int32Map {
			_ = k
			_ = v
			mapEntrySize := 1 + sovMapsproto2(uint64(k)) + 1 + sovMapsproto2(uint64(v))
			n += mapEntrySize + 1 + sovMapsproto2(uint64(mapEntrySize))
		}
	}
	if len(m.Int64Map) > 0 {
		for k, v := range m.Int64Map {
			_ = k
			_ = v
			mapEntrySize := 1 + sovMapsproto2(uint64(k)) + 1 + sovMapsproto2(uint64(v))
			n += mapEntrySize + 1 + sovMapsproto2(uint64(mapEntrySize))
		}
	}
	if len(m.Uint32Map) > 0 {
		for k, v := range m.Uint32Map {
			_ = k
			_ = v
			mapEntrySize := 1 + sovMapsproto2(uint64(k)) + 1 + sovMapsproto2(uint64(v))
			n += mapEntrySize + 1 + sovMapsproto2(uint64(mapEntrySize))
		}
	}
	if len(m.Uint64Map) > 0 {
		for k, v := range m.Uint64Map {
			_ = k
			_ = v
			mapEntrySize := 1 + sovMapsproto2(uint64(k)) + 1 + sovMapsproto2(uint64(v))
			n += mapEntrySize + 1 + sovMapsproto2(uint64(mapEntrySize))
		}
	}
	if len(m.Sint32Map) > 0 {
		for k, v := range m.Sint32Map {
			_ = k
			_ = v
			mapEntrySize := 1 + sozMapsproto2(uint64(k)) + 1 + sozMapsproto2(uint64(v))
			n += mapEntrySize + 1 + sovMapsproto2(uint64(mapEntrySize))
		}
	}
	if len(m.Sint64Map) > 0 {
		for k, v := range m.Sint64Map {
			_ = k
			_ = v
			mapEntrySize := 1 + sozMapsproto2(uint64(k)) + 1 + sozMapsproto2(uint64(v))
			n += mapEntrySize + 1 + sovMapsproto2(uint64(mapEntrySize))
		}
	}
	if len(m.Fixed32Map) > 0 {
		for k, v := range m.Fixed32Map {
			_ = k
			_ = v
			mapEntrySize := 1 + 4 + 1 + 4
			n += mapEntrySize + 1 + sovMapsproto2(uint64(mapEntrySize))
		}
	}
	if len(m.Sfixed32Map) > 0 {
		for k, v := range m.Sfixed32Map {
			_ = k
			_ = v
			mapEntrySize := 1 + 4 + 1 + 4
			n += mapEntrySize + 1 + sovMapsproto2(uint64(mapEntrySize))
		}
	}
	if len(m.Fixed64Map) > 0 {
		for k, v := range m.Fixed64Map {
			_ = k
			_ = v
			mapEntrySize := 1 + 8 + 1 + 8
			n += mapEntrySize + 1 + sovMapsproto2(uint64(mapEntrySize))
		}
	}
	if len(m.Sfixed64Map) > 0 {
		for k, v := range m.Sfixed64Map {
			_ = k
			_ = v
			mapEntrySize := 1 + 8 + 1 + 8
			n += mapEntrySize + 1 + sovMapsproto2(uint64(mapEntrySize))
		}
	}
	if len(m.BoolMap) > 0 {
		for k, v := range m.BoolMap {
			_ = k
			_ = v
			mapEntrySize := 1 + 1 + 1 + 1
			n += mapEntrySize + 1 + sovMapsproto2(uint64(mapEntrySize))
		}
	}
	if len(m.StringMap) > 0 {
		for k, v := range m.StringMap {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovMapsproto2(uint64(len(k))) + 1 + len(v) + sovMapsproto2(uint64(len(v)))
			n += mapEntrySize + 1 + sovMapsproto2(uint64(mapEntrySize))
		}
	}
	if len(m.StringToBytesMap) > 0 {
		for k, v := range m.StringToBytesMap {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = 1 + len(v) + sovMapsproto2(uint64(len(v)))
			}
			mapEntrySize := 1 + len(k) + sovMapsproto2(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovMapsproto2(uint64(mapEntrySize))
		}
	}
	if len(m.StringToEnumMap) > 0 {
		for k, v := range m.StringToEnumMap {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovMapsproto2(uint64(len(k))) + 1 + sovMapsproto2(uint64(v))
			n += mapEntrySize + 2 + sovMapsproto2(uint64(mapEntrySize))
		}
	}
	if len(m.StringToMsgMap) > 0 {
		for k, v := range m.StringToMsgMap {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovMapsproto2(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovMapsproto2(uint64(len(k))) + l
			n += mapEntrySize + 2 + sovMapsproto2(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovMapsproto2(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMapsproto2(x uint64) (n int) {
	return sovMapsproto2(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *FloatingPoint) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FloatingPoint{`,
		`F:` + valueToStringMapsproto2(this.F) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AllMaps) String() string {
	if this == nil {
		return "nil"
	}
	keysForStringToDoubleMap := make([]string, 0, len(this.StringToDoubleMap))
	for k := range this.StringToDoubleMap {
		keysForStringToDoubleMap = append(keysForStringToDoubleMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForStringToDoubleMap)
	mapStringForStringToDoubleMap := "map[string]float64{"
	for _, k := range keysForStringToDoubleMap {
		mapStringForStringToDoubleMap += fmt.Sprintf("%v: %v,", k, this.StringToDoubleMap[k])
	}
	mapStringForStringToDoubleMap += "}"
	keysForStringToFloatMap := make([]string, 0, len(this.StringToFloatMap))
	for k := range this.StringToFloatMap {
		keysForStringToFloatMap = append(keysForStringToFloatMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForStringToFloatMap)
	mapStringForStringToFloatMap := "map[string]float32{"
	for _, k := range keysForStringToFloatMap {
		mapStringForStringToFloatMap += fmt.Sprintf("%v: %v,", k, this.StringToFloatMap[k])
	}
	mapStringForStringToFloatMap += "}"
	keysForInt32Map := make([]int32, 0, len(this.Int32Map))
	for k := range this.Int32Map {
		keysForInt32Map = append(keysForInt32Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Int32s(keysForInt32Map)
	mapStringForInt32Map := "map[int32]int32{"
	for _, k := range keysForInt32Map {
		mapStringForInt32Map += fmt.Sprintf("%v: %v,", k, this.Int32Map[k])
	}
	mapStringForInt32Map += "}"
	keysForInt64Map := make([]int64, 0, len(this.Int64Map))
	for k := range this.Int64Map {
		keysForInt64Map = append(keysForInt64Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Int64s(keysForInt64Map)
	mapStringForInt64Map := "map[int64]int64{"
	for _, k := range keysForInt64Map {
		mapStringForInt64Map += fmt.Sprintf("%v: %v,", k, this.Int64Map[k])
	}
	mapStringForInt64Map += "}"
	keysForUint32Map := make([]uint32, 0, len(this.Uint32Map))
	for k := range this.Uint32Map {
		keysForUint32Map = append(keysForUint32Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint32s(keysForUint32Map)
	mapStringForUint32Map := "map[uint32]uint32{"
	for _, k := range keysForUint32Map {
		mapStringForUint32Map += fmt.Sprintf("%v: %v,", k, this.Uint32Map[k])
	}
	mapStringForUint32Map += "}"
	keysForUint64Map := make([]uint64, 0, len(this.Uint64Map))
	for k := range this.Uint64Map {
		keysForUint64Map = append(keysForUint64Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint64s(keysForUint64Map)
	mapStringForUint64Map := "map[uint64]uint64{"
	for _, k := range keysForUint64Map {
		mapStringForUint64Map += fmt.Sprintf("%v: %v,", k, this.Uint64Map[k])
	}
	mapStringForUint64Map += "}"
	keysForSint32Map := make([]int32, 0, len(this.Sint32Map))
	for k := range this.Sint32Map {
		keysForSint32Map = append(keysForSint32Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Int32s(keysForSint32Map)
	mapStringForSint32Map := "map[int32]int32{"
	for _, k := range keysForSint32Map {
		mapStringForSint32Map += fmt.Sprintf("%v: %v,", k, this.Sint32Map[k])
	}
	mapStringForSint32Map += "}"
	keysForSint64Map := make([]int64, 0, len(this.Sint64Map))
	for k := range this.Sint64Map {
		keysForSint64Map = append(keysForSint64Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Int64s(keysForSint64Map)
	mapStringForSint64Map := "map[int64]int64{"
	for _, k := range keysForSint64Map {
		mapStringForSint64Map += fmt.Sprintf("%v: %v,", k, this.Sint64Map[k])
	}
	mapStringForSint64Map += "}"
	keysForFixed32Map := make([]uint32, 0, len(this.Fixed32Map))
	for k := range this.Fixed32Map {
		keysForFixed32Map = append(keysForFixed32Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint32s(keysForFixed32Map)
	mapStringForFixed32Map := "map[uint32]uint32{"
	for _, k := range keysForFixed32Map {
		mapStringForFixed32Map += fmt.Sprintf("%v: %v,", k, this.Fixed32Map[k])
	}
	mapStringForFixed32Map += "}"
	keysForSfixed32Map := make([]int32, 0, len(this.Sfixed32Map))
	for k := range this.Sfixed32Map {
		keysForSfixed32Map = append(keysForSfixed32Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Int32s(keysForSfixed32Map)
	mapStringForSfixed32Map := "map[int32]int32{"
	for _, k := range keysForSfixed32Map {
		mapStringForSfixed32Map += fmt.Sprintf("%v: %v,", k, this.Sfixed32Map[k])
	}
	mapStringForSfixed32Map += "}"
	keysForFixed64Map := make([]uint64, 0, len(this.Fixed64Map))
	for k := range this.Fixed64Map {
		keysForFixed64Map = append(keysForFixed64Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint64s(keysForFixed64Map)
	mapStringForFixed64Map := "map[uint64]uint64{"
	for _, k := range keysForFixed64Map {
		mapStringForFixed64Map += fmt.Sprintf("%v: %v,", k, this.Fixed64Map[k])
	}
	mapStringForFixed64Map += "}"
	keysForSfixed64Map := make([]int64, 0, len(this.Sfixed64Map))
	for k := range this.Sfixed64Map {
		keysForSfixed64Map = append(keysForSfixed64Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Int64s(keysForSfixed64Map)
	mapStringForSfixed64Map := "map[int64]int64{"
	for _, k := range keysForSfixed64Map {
		mapStringForSfixed64Map += fmt.Sprintf("%v: %v,", k, this.Sfixed64Map[k])
	}
	mapStringForSfixed64Map += "}"
	keysForBoolMap := make([]bool, 0, len(this.BoolMap))
	for k := range this.BoolMap {
		keysForBoolMap = append(keysForBoolMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Bools(keysForBoolMap)
	mapStringForBoolMap := "map[bool]bool{"
	for _, k := range keysForBoolMap {
		mapStringForBoolMap += fmt.Sprintf("%v: %v,", k, this.BoolMap[k])
	}
	mapStringForBoolMap += "}"
	keysForStringMap := make([]string, 0, len(this.StringMap))
	for k := range this.StringMap {
		keysForStringMap = append(keysForStringMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForStringMap)
	mapStringForStringMap := "map[string]string{"
	for _, k := range keysForStringMap {
		mapStringForStringMap += fmt.Sprintf("%v: %v,", k, this.StringMap[k])
	}
	mapStringForStringMap += "}"
	keysForStringToBytesMap := make([]string, 0, len(this.StringToBytesMap))
	for k := range this.StringToBytesMap {
		keysForStringToBytesMap = append(keysForStringToBytesMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForStringToBytesMap)
	mapStringForStringToBytesMap := "map[string][]byte{"
	for _, k := range keysForStringToBytesMap {
		mapStringForStringToBytesMap += fmt.Sprintf("%v: %v,", k, this.StringToBytesMap[k])
	}
	mapStringForStringToBytesMap += "}"
	keysForStringToEnumMap := make([]string, 0, len(this.StringToEnumMap))
	for k := range this.StringToEnumMap {
		keysForStringToEnumMap = append(keysForStringToEnumMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForStringToEnumMap)
	mapStringForStringToEnumMap := "map[string]MapEnum{"
	for _, k := range keysForStringToEnumMap {
		mapStringForStringToEnumMap += fmt.Sprintf("%v: %v,", k, this.StringToEnumMap[k])
	}
	mapStringForStringToEnumMap += "}"
	keysForStringToMsgMap := make([]string, 0, len(this.StringToMsgMap))
	for k := range this.StringToMsgMap {
		keysForStringToMsgMap = append(keysForStringToMsgMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForStringToMsgMap)
	mapStringForStringToMsgMap := "map[string]*FloatingPoint{"
	for _, k := range keysForStringToMsgMap {
		mapStringForStringToMsgMap += fmt.Sprintf("%v: %v,", k, this.StringToMsgMap[k])
	}
	mapStringForStringToMsgMap += "}"
	s := strings.Join([]string{`&AllMaps{`,
		`StringToDoubleMap:` + mapStringForStringToDoubleMap + `,`,
		`StringToFloatMap:` + mapStringForStringToFloatMap + `,`,
		`Int32Map:` + mapStringForInt32Map + `,`,
		`Int64Map:` + mapStringForInt64Map + `,`,
		`Uint32Map:` + mapStringForUint32Map + `,`,
		`Uint64Map:` + mapStringForUint64Map + `,`,
		`Sint32Map:` + mapStringForSint32Map + `,`,
		`Sint64Map:` + mapStringForSint64Map + `,`,
		`Fixed32Map:` + mapStringForFixed32Map + `,`,
		`Sfixed32Map:` + mapStringForSfixed32Map + `,`,
		`Fixed64Map:` + mapStringForFixed64Map + `,`,
		`Sfixed64Map:` + mapStringForSfixed64Map + `,`,
		`BoolMap:` + mapStringForBoolMap + `,`,
		`StringMap:` + mapStringForStringMap + `,`,
		`StringToBytesMap:` + mapStringForStringToBytesMap + `,`,
		`StringToEnumMap:` + mapStringForStringToEnumMap + `,`,
		`StringToMsgMap:` + mapStringForStringToMsgMap + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AllMapsOrdered) String() string {
	if this == nil {
		return "nil"
	}
	keysForStringToDoubleMap := make([]string, 0, len(this.StringToDoubleMap))
	for k := range this.StringToDoubleMap {
		keysForStringToDoubleMap = append(keysForStringToDoubleMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForStringToDoubleMap)
	mapStringForStringToDoubleMap := "map[string]float64{"
	for _, k := range keysForStringToDoubleMap {
		mapStringForStringToDoubleMap += fmt.Sprintf("%v: %v,", k, this.StringToDoubleMap[k])
	}
	mapStringForStringToDoubleMap += "}"
	keysForStringToFloatMap := make([]string, 0, len(this.StringToFloatMap))
	for k := range this.StringToFloatMap {
		keysForStringToFloatMap = append(keysForStringToFloatMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForStringToFloatMap)
	mapStringForStringToFloatMap := "map[string]float32{"
	for _, k := range keysForStringToFloatMap {
		mapStringForStringToFloatMap += fmt.Sprintf("%v: %v,", k, this.StringToFloatMap[k])
	}
	mapStringForStringToFloatMap += "}"
	keysForInt32Map := make([]int32, 0, len(this.Int32Map))
	for k := range this.Int32Map {
		keysForInt32Map = append(keysForInt32Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Int32s(keysForInt32Map)
	mapStringForInt32Map := "map[int32]int32{"
	for _, k := range keysForInt32Map {
		mapStringForInt32Map += fmt.Sprintf("%v: %v,", k, this.Int32Map[k])
	}
	mapStringForInt32Map += "}"
	keysForInt64Map := make([]int64, 0, len(this.Int64Map))
	for k := range this.Int64Map {
		keysForInt64Map = append(keysForInt64Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Int64s(keysForInt64Map)
	mapStringForInt64Map := "map[int64]int64{"
	for _, k := range keysForInt64Map {
		mapStringForInt64Map += fmt.Sprintf("%v: %v,", k, this.Int64Map[k])
	}
	mapStringForInt64Map += "}"
	keysForUint32Map := make([]uint32, 0, len(this.Uint32Map))
	for k := range this.Uint32Map {
		keysForUint32Map = append(keysForUint32Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint32s(keysForUint32Map)
	mapStringForUint32Map := "map[uint32]uint32{"
	for _, k := range keysForUint32Map {
		mapStringForUint32Map += fmt.Sprintf("%v: %v,", k, this.Uint32Map[k])
	}
	mapStringForUint32Map += "}"
	keysForUint64Map := make([]uint64, 0, len(this.Uint64Map))
	for k := range this.Uint64Map {
		keysForUint64Map = append(keysForUint64Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint64s(keysForUint64Map)
	mapStringForUint64Map := "map[uint64]uint64{"
	for _, k := range keysForUint64Map {
		mapStringForUint64Map += fmt.Sprintf("%v: %v,", k, this.Uint64Map[k])
	}
	mapStringForUint64Map += "}"
	keysForSint32Map := make([]int32, 0, len(this.Sint32Map))
	for k := range this.Sint32Map {
		keysForSint32Map = append(keysForSint32Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Int32s(keysForSint32Map)
	mapStringForSint32Map := "map[int32]int32{"
	for _, k := range keysForSint32Map {
		mapStringForSint32Map += fmt.Sprintf("%v: %v,", k, this.Sint32Map[k])
	}
	mapStringForSint32Map += "}"
	keysForSint64Map := make([]int64, 0, len(this.Sint64Map))
	for k := range this.Sint64Map {
		keysForSint64Map = append(keysForSint64Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Int64s(keysForSint64Map)
	mapStringForSint64Map := "map[int64]int64{"
	for _, k := range keysForSint64Map {
		mapStringForSint64Map += fmt.Sprintf("%v: %v,", k, this.Sint64Map[k])
	}
	mapStringForSint64Map += "}"
	keysForFixed32Map := make([]uint32, 0, len(this.Fixed32Map))
	for k := range this.Fixed32Map {
		keysForFixed32Map = append(keysForFixed32Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint32s(keysForFixed32Map)
	mapStringForFixed32Map := "map[uint32]uint32{"
	for _, k := range keysForFixed32Map {
		mapStringForFixed32Map += fmt.Sprintf("%v: %v,", k, this.Fixed32Map[k])
	}
	mapStringForFixed32Map += "}"
	keysForSfixed32Map := make([]int32, 0, len(this.Sfixed32Map))
	for k := range this.Sfixed32Map {
		keysForSfixed32Map = append(keysForSfixed32Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Int32s(keysForSfixed32Map)
	mapStringForSfixed32Map := "map[int32]int32{"
	for _, k := range keysForSfixed32Map {
		mapStringForSfixed32Map += fmt.Sprintf("%v: %v,", k, this.Sfixed32Map[k])
	}
	mapStringForSfixed32Map += "}"
	keysForFixed64Map := make([]uint64, 0, len(this.Fixed64Map))
	for k := range this.Fixed64Map {
		keysForFixed64Map = append(keysForFixed64Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint64s(keysForFixed64Map)
	mapStringForFixed64Map := "map[uint64]uint64{"
	for _, k := range keysForFixed64Map {
		mapStringForFixed64Map += fmt.Sprintf("%v: %v,", k, this.Fixed64Map[k])
	}
	mapStringForFixed64Map += "}"
	keysForSfixed64Map := make([]int64, 0, len(this.Sfixed64Map))
	for k := range this.Sfixed64Map {
		keysForSfixed64Map = append(keysForSfixed64Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Int64s(keysForSfixed64Map)
	mapStringForSfixed64Map := "map[int64]int64{"
	for _, k := range keysForSfixed64Map {
		mapStringForSfixed64Map += fmt.Sprintf("%v: %v,", k, this.Sfixed64Map[k])
	}
	mapStringForSfixed64Map += "}"
	keysForBoolMap := make([]bool, 0, len(this.BoolMap))
	for k := range this.BoolMap {
		keysForBoolMap = append(keysForBoolMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Bools(keysForBoolMap)
	mapStringForBoolMap := "map[bool]bool{"
	for _, k := range keysForBoolMap {
		mapStringForBoolMap += fmt.Sprintf("%v: %v,", k, this.BoolMap[k])
	}
	mapStringForBoolMap += "}"
	keysForStringMap := make([]string, 0, len(this.StringMap))
	for k := range this.StringMap {
		keysForStringMap = append(keysForStringMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForStringMap)
	mapStringForStringMap := "map[string]string{"
	for _, k := range keysForStringMap {
		mapStringForStringMap += fmt.Sprintf("%v: %v,", k, this.StringMap[k])
	}
	mapStringForStringMap += "}"
	keysForStringToBytesMap := make([]string, 0, len(this.StringToBytesMap))
	for k := range this.StringToBytesMap {
		keysForStringToBytesMap = append(keysForStringToBytesMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForStringToBytesMap)
	mapStringForStringToBytesMap := "map[string][]byte{"
	for _, k := range keysForStringToBytesMap {
		mapStringForStringToBytesMap += fmt.Sprintf("%v: %v,", k, this.StringToBytesMap[k])
	}
	mapStringForStringToBytesMap += "}"
	keysForStringToEnumMap := make([]string, 0, len(this.StringToEnumMap))
	for k := range this.StringToEnumMap {
		keysForStringToEnumMap = append(keysForStringToEnumMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForStringToEnumMap)
	mapStringForStringToEnumMap := "map[string]MapEnum{"
	for _, k := range keysForStringToEnumMap {
		mapStringForStringToEnumMap += fmt.Sprintf("%v: %v,", k, this.StringToEnumMap[k])
	}
	mapStringForStringToEnumMap += "}"
	keysForStringToMsgMap := make([]string, 0, len(this.StringToMsgMap))
	for k := range this.StringToMsgMap {
		keysForStringToMsgMap = append(keysForStringToMsgMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForStringToMsgMap)
	mapStringForStringToMsgMap := "map[string]*FloatingPoint{"
	for _, k := range keysForStringToMsgMap {
		mapStringForStringToMsgMap += fmt.Sprintf("%v: %v,", k, this.StringToMsgMap[k])
	}
	mapStringForStringToMsgMap += "}"
	s := strings.Join([]string{`&AllMapsOrdered{`,
		`StringToDoubleMap:` + mapStringForStringToDoubleMap + `,`,
		`StringToFloatMap:` + mapStringForStringToFloatMap + `,`,
		`Int32Map:` + mapStringForInt32Map + `,`,
		`Int64Map:` + mapStringForInt64Map + `,`,
		`Uint32Map:` + mapStringForUint32Map + `,`,
		`Uint64Map:` + mapStringForUint64Map + `,`,
		`Sint32Map:` + mapStringForSint32Map + `,`,
		`Sint64Map:` + mapStringForSint64Map + `,`,
		`Fixed32Map:` + mapStringForFixed32Map + `,`,
		`Sfixed32Map:` + mapStringForSfixed32Map + `,`,
		`Fixed64Map:` + mapStringForFixed64Map + `,`,
		`Sfixed64Map:` + mapStringForSfixed64Map + `,`,
		`BoolMap:` + mapStringForBoolMap + `,`,
		`StringMap:` + mapStringForStringMap + `,`,
		`StringToBytesMap:` + mapStringForStringToBytesMap + `,`,
		`StringToEnumMap:` + mapStringForStringToEnumMap + `,`,
		`StringToMsgMap:` + mapStringForStringToMsgMap + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringMapsproto2(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *FloatingPoint) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapsproto2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FloatingPoint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FloatingPoint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field F", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(data[iNdEx-8])
			v |= uint64(data[iNdEx-7]) << 8
			v |= uint64(data[iNdEx-6]) << 16
			v |= uint64(data[iNdEx-5]) << 24
			v |= uint64(data[iNdEx-4]) << 32
			v |= uint64(data[iNdEx-3]) << 40
			v |= uint64(data[iNdEx-2]) << 48
			v |= uint64(data[iNdEx-1]) << 56
			v2 := float64(math.Float64frombits(v))
			m.F = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipMapsproto2(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMapsproto2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AllMaps) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapsproto2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllMaps: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllMaps: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StringToDoubleMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapsproto2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapsproto2
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapsproto2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapsproto2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthMapsproto2
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(data[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			if m.StringToDoubleMap == nil {
				m.StringToDoubleMap = make(map[string]float64)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMapsproto2
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var mapvaluetemp uint64
				if (iNdEx + 8) > l {
					return io.ErrUnexpectedEOF
				}
				iNdEx += 8
				mapvaluetemp = uint64(data[iNdEx-8])
				mapvaluetemp |= uint64(data[iNdEx-7]) << 8
				mapvaluetemp |= uint64(data[iNdEx-6]) << 16
				mapvaluetemp |= uint64(data[iNdEx-5]) << 24
				mapvaluetemp |= uint64(data[iNdEx-4]) << 32
				mapvaluetemp |= uint64(data[iNdEx-3]) << 40
				mapvaluetemp |= uint64(data[iNdEx-2]) << 48
				mapvaluetemp |= uint64(data[iNdEx-1]) << 56
				mapvalue := math.Float64frombits(mapvaluetemp)
				m.StringToDoubleMap[mapkey] = mapvalue
			} else {
				var mapvalue float64
				m.StringToDoubleMap[mapkey] = mapvalue
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StringToFloatMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapsproto2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapsproto2
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapsproto2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapsproto2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthMapsproto2
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(data[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			if m.StringToFloatMap == nil {
				m.StringToFloatMap = make(map[string]float32)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMapsproto2
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var mapvaluetemp uint32
				if (iNdEx + 4) > l {
					return io.ErrUnexpectedEOF
				}
				iNdEx += 4
				mapvaluetemp = uint32(data[iNdEx-4])
				mapvaluetemp |= uint32(data[iNdEx-3]) << 8
				mapvaluetemp |= uint32(data[iNdEx-2]) << 16
				mapvaluetemp |= uint32(data[iNdEx-1]) << 24
				mapvalue := math.Float32frombits(mapvaluetemp)
				m.StringToFloatMap[mapkey] = mapvalue
			} else {
				var mapvalue float32
				m.StringToFloatMap[mapkey] = mapvalue
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Int32Map", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapsproto2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapsproto2
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapsproto2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var mapkey int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapsproto2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				mapkey |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if m.Int32Map == nil {
				m.Int32Map = make(map[int32]int32)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMapsproto2
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var mapvalue int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMapsproto2
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					mapvalue |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Int32Map[mapkey] = mapvalue
			} else {
				var mapvalue int32
				m.Int32Map[mapkey] = mapvalue
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Int64Map", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapsproto2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapsproto2
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapsproto2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var mapkey int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapsproto2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				mapkey |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if m.Int64Map == nil {
				m.Int64Map = make(map[int64]int64)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMapsproto2
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var mapvalue int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMapsproto2
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					mapvalue |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Int64Map[mapkey] = mapvalue
			} else {
				var mapvalue int64
				m.Int64Map[mapkey] = mapvalue
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uint32Map", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapsproto2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapsproto2
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapsproto2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var mapkey uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapsproto2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				mapkey |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if m.Uint32Map == nil {
				m.Uint32Map = make(map[uint32]uint32)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMapsproto2
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var mapvalue uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMapsproto2
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					mapvalue |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Uint32Map[mapkey] = mapvalue
			} else {
				var mapvalue uint32
				m.Uint32Map[mapkey] = mapvalue
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uint64Map", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapsproto2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapsproto2
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapsproto2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var mapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapsproto2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				mapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if m.Uint64Map == nil {
				m.Uint64Map = make(map[uint64]uint64)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMapsproto2
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var mapvalue uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMapsproto2
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					mapvalue |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Uint64Map[mapkey] = mapvalue
			} else {
				var mapvalue uint64
				m.Uint64Map[mapkey] = mapvalue
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sint32Map", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapsproto2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapsproto2
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapsproto2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var mapkeytemp int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapsproto2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				mapkeytemp |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			mapkeytemp = int32((uint32(mapkeytemp) >> 1) ^ uint32(((mapkeytemp&1)<<31)>>31))
			mapkey := int32(mapkeytemp)
			if m.Sint32Map == nil {
				m.Sint32Map = make(map[int32]int32)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMapsproto2
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var mapvaluetemp int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMapsproto2
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					mapvaluetemp |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				mapvaluetemp = int32((uint32(mapvaluetemp) >> 1) ^ uint32(((mapvaluetemp&1)<<31)>>31))
				mapvalue := int32(mapvaluetemp)
				m.Sint32Map[mapkey] = mapvalue
			} else {
				var mapvalue int32
				m.Sint32Map[mapkey] = mapvalue
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sint64Map", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapsproto2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapsproto2
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapsproto2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var mapkeytemp uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapsproto2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				mapkeytemp |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			mapkeytemp = (mapkeytemp >> 1) ^ uint64((int64(mapkeytemp&1)<<63)>>63)
			mapkey := int64(mapkeytemp)
			if m.Sint64Map == nil {
				m.Sint64Map = make(map[int64]int64)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMapsproto2
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var mapvaluetemp uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMapsproto2
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					mapvaluetemp |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				mapvaluetemp = (mapvaluetemp >> 1) ^ uint64((int64(mapvaluetemp&1)<<63)>>63)
				mapvalue := int64(mapvaluetemp)
				m.Sint64Map[mapkey] = mapvalue
			} else {
				var mapvalue int64
				m.Sint64Map[mapkey] = mapvalue
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fixed32Map", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapsproto2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapsproto2
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapsproto2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var mapkey uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			mapkey = uint32(data[iNdEx-4])
			mapkey |= uint32(data[iNdEx-3]) << 8
			mapkey |= uint32(data[iNdEx-2]) << 16
			mapkey |= uint32(data[iNdEx-1]) << 24
			if m.Fixed32Map == nil {
				m.Fixed32Map = make(map[uint32]uint32)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMapsproto2
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var mapvalue uint32
				if (iNdEx + 4) > l {
					return io.ErrUnexpectedEOF
				}
				iNdEx += 4
				mapvalue = uint32(data[iNdEx-4])
				mapvalue |= uint32(data[iNdEx-3]) << 8
				mapvalue |= uint32(data[iNdEx-2]) << 16
				mapvalue |= uint32(data[iNdEx-1]) << 24
				m.Fixed32Map[mapkey] = mapvalue
			} else {
				var mapvalue uint32
				m.Fixed32Map[mapkey] = mapvalue
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sfixed32Map", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapsproto2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapsproto2
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapsproto2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var mapkey int32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			mapkey = int32(data[iNdEx-4])
			mapkey |= int32(data[iNdEx-3]) << 8
			mapkey |= int32(data[iNdEx-2]) << 16
			mapkey |= int32(data[iNdEx-1]) << 24
			if m.Sfixed32Map == nil {
				m.Sfixed32Map = make(map[int32]int32)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMapsproto2
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var mapvalue int32
				if (iNdEx + 4) > l {
					return io.ErrUnexpectedEOF
				}
				iNdEx += 4
				mapvalue = int32(data[iNdEx-4])
				mapvalue |= int32(data[iNdEx-3]) << 8
				mapvalue |= int32(data[iNdEx-2]) << 16
				mapvalue |= int32(data[iNdEx-1]) << 24
				m.Sfixed32Map[mapkey] = mapvalue
			} else {
				var mapvalue int32
				m.Sfixed32Map[mapkey] = mapvalue
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fixed64Map", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapsproto2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapsproto2
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapsproto2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var mapkey uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			mapkey = uint64(data[iNdEx-8])
			mapkey |= uint64(data[iNdEx-7]) << 8
			mapkey |= uint64(data[iNdEx-6]) << 16
			mapkey |= uint64(data[iNdEx-5]) << 24
			mapkey |= uint64(data[iNdEx-4]) << 32
			mapkey |= uint64(data[iNdEx-3]) << 40
			mapkey |= uint64(data[iNdEx-2]) << 48
			mapkey |= uint64(data[iNdEx-1]) << 56
			if m.Fixed64Map == nil {
				m.Fixed64Map = make(map[uint64]uint64)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMapsproto2
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var mapvalue uint64
				if (iNdEx + 8) > l {
					return io.ErrUnexpectedEOF
				}
				iNdEx += 8
				mapvalue = uint64(data[iNdEx-8])
				mapvalue |= uint64(data[iNdEx-7]) << 8
				mapvalue |= uint64(data[iNdEx-6]) << 16
				mapvalue |= uint64(data[iNdEx-5]) << 24
				mapvalue |= uint64(data[iNdEx-4]) << 32
				mapvalue |= uint64(data[iNdEx-3]) << 40
				mapvalue |= uint64(data[iNdEx-2]) << 48
				mapvalue |= uint64(data[iNdEx-1]) << 56
				m.Fixed64Map[mapkey] = mapvalue
			} else {
				var mapvalue uint64
				m.Fixed64Map[mapkey] = mapvalue
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sfixed64Map", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapsproto2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapsproto2
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapsproto2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var mapkey int64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			mapkey = int64(data[iNdEx-8])
			mapkey |= int64(data[iNdEx-7]) << 8
			mapkey |= int64(data[iNdEx-6]) << 16
			mapkey |= int64(data[iNdEx-5]) << 24
			mapkey |= int64(data[iNdEx-4]) << 32
			mapkey |= int64(data[iNdEx-3]) << 40
			mapkey |= int64(data[iNdEx-2]) << 48
			mapkey |= int64(data[iNdEx-1]) << 56
			if m.Sfixed64Map == nil {
				m.Sfixed64Map = make(map[int64]int64)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMapsproto2
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var mapvalue int64
				if (iNdEx + 8) > l {
					return io.ErrUnexpectedEOF
				}
				iNdEx += 8
				mapvalue = int64(data[iNdEx-8])
				mapvalue |= int64(data[iNdEx-7]) << 8
				mapvalue |= int64(data[iNdEx-6]) << 16
				mapvalue |= int64(data[iNdEx-5]) << 24
				mapvalue |= int64(data[iNdEx-4]) << 32
				mapvalue |= int64(data[iNdEx-3]) << 40
				mapvalue |= int64(data[iNdEx-2]) << 48
				mapvalue |= int64(data[iNdEx-1]) << 56
				m.Sfixed64Map[mapkey] = mapvalue
			} else {
				var mapvalue int64
				m.Sfixed64Map[mapkey] = mapvalue
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoolMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapsproto2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapsproto2
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapsproto2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var mapkeytemp int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapsproto2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				mapkeytemp |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			mapkey := bool(mapkeytemp != 0)
			if m.BoolMap == nil {
				m.BoolMap = make(map[bool]bool)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMapsproto2
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var mapvaluetemp int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMapsproto2
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					mapvaluetemp |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				mapvalue := bool(mapvaluetemp != 0)
				m.BoolMap[mapkey] = mapvalue
			} else {
				var mapvalue bool
				m.BoolMap[mapkey] = mapvalue
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StringMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapsproto2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapsproto2
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapsproto2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapsproto2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthMapsproto2
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(data[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			if m.StringMap == nil {
				m.StringMap = make(map[string]string)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMapsproto2
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var stringLenmapvalue uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMapsproto2
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					stringLenmapvalue |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLenmapvalue := int(stringLenmapvalue)
				if intStringLenmapvalue < 0 {
					return ErrInvalidLengthMapsproto2
				}
				postStringIndexmapvalue := iNdEx + intStringLenmapvalue
				if postStringIndexmapvalue > l {
					return io.ErrUnexpectedEOF
				}
				mapvalue := string(data[iNdEx:postStringIndexmapvalue])
				iNdEx = postStringIndexmapvalue
				m.StringMap[mapkey] = mapvalue
			} else {
				var mapvalue string
				m.StringMap[mapkey] = mapvalue
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StringToBytesMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapsproto2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapsproto2
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapsproto2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapsproto2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthMapsproto2
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(data[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			if m.StringToBytesMap == nil {
				m.StringToBytesMap = make(map[string][]byte)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMapsproto2
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var mapbyteLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMapsproto2
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					mapbyteLen |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intMapbyteLen := int(mapbyteLen)
				if intMapbyteLen < 0 {
					return ErrInvalidLengthMapsproto2
				}
				postbytesIndex := iNdEx + intMapbyteLen
				if postbytesIndex > l {
					return io.ErrUnexpectedEOF
				}
				mapvalue := make([]byte, mapbyteLen)
				copy(mapvalue, data[iNdEx:postbytesIndex])
				iNdEx = postbytesIndex
				m.StringToBytesMap[mapkey] = mapvalue
			} else {
				var mapvalue []byte
				m.StringToBytesMap[mapkey] = mapvalue
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StringToEnumMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapsproto2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapsproto2
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapsproto2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapsproto2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthMapsproto2
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(data[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			if m.StringToEnumMap == nil {
				m.StringToEnumMap = make(map[string]MapEnum)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMapsproto2
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var mapvalue MapEnum
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMapsproto2
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					mapvalue |= (MapEnum(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.StringToEnumMap[mapkey] = mapvalue
			} else {
				var mapvalue MapEnum
				m.StringToEnumMap[mapkey] = mapvalue
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StringToMsgMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapsproto2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapsproto2
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapsproto2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapsproto2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthMapsproto2
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(data[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			if m.StringToMsgMap == nil {
				m.StringToMsgMap = make(map[string]*FloatingPoint)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMapsproto2
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var mapmsglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMapsproto2
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					mapmsglen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if mapmsglen < 0 {
					return ErrInvalidLengthMapsproto2
				}
				postmsgIndex := iNdEx + mapmsglen
				if mapmsglen < 0 {
					return ErrInvalidLengthMapsproto2
				}
				if postmsgIndex > l {
					return io.ErrUnexpectedEOF
				}
				mapvalue := &FloatingPoint{}
				if err := mapvalue.Unmarshal(data[iNdEx:postmsgIndex]); err != nil {
					return err
				}
				iNdEx = postmsgIndex
				m.StringToMsgMap[mapkey] = mapvalue
			} else {
				var mapvalue *FloatingPoint
				m.StringToMsgMap[mapkey] = mapvalue
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMapsproto2(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMapsproto2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AllMapsOrdered) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapsproto2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllMapsOrdered: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllMapsOrdered: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StringToDoubleMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapsproto2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapsproto2
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapsproto2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapsproto2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthMapsproto2
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(data[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			if m.StringToDoubleMap == nil {
				m.StringToDoubleMap = make(map[string]float64)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMapsproto2
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var mapvaluetemp uint64
				if (iNdEx + 8) > l {
					return io.ErrUnexpectedEOF
				}
				iNdEx += 8
				mapvaluetemp = uint64(data[iNdEx-8])
				mapvaluetemp |= uint64(data[iNdEx-7]) << 8
				mapvaluetemp |= uint64(data[iNdEx-6]) << 16
				mapvaluetemp |= uint64(data[iNdEx-5]) << 24
				mapvaluetemp |= uint64(data[iNdEx-4]) << 32
				mapvaluetemp |= uint64(data[iNdEx-3]) << 40
				mapvaluetemp |= uint64(data[iNdEx-2]) << 48
				mapvaluetemp |= uint64(data[iNdEx-1]) << 56
				mapvalue := math.Float64frombits(mapvaluetemp)
				m.StringToDoubleMap[mapkey] = mapvalue
			} else {
				var mapvalue float64
				m.StringToDoubleMap[mapkey] = mapvalue
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StringToFloatMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapsproto2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapsproto2
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapsproto2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapsproto2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthMapsproto2
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(data[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			if m.StringToFloatMap == nil {
				m.StringToFloatMap = make(map[string]float32)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMapsproto2
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var mapvaluetemp uint32
				if (iNdEx + 4) > l {
					return io.ErrUnexpectedEOF
				}
				iNdEx += 4
				mapvaluetemp = uint32(data[iNdEx-4])
				mapvaluetemp |= uint32(data[iNdEx-3]) << 8
				mapvaluetemp |= uint32(data[iNdEx-2]) << 16
				mapvaluetemp |= uint32(data[iNdEx-1]) << 24
				mapvalue := math.Float32frombits(mapvaluetemp)
				m.StringToFloatMap[mapkey] = mapvalue
			} else {
				var mapvalue float32
				m.StringToFloatMap[mapkey] = mapvalue
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Int32Map", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapsproto2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapsproto2
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapsproto2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var mapkey int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapsproto2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				mapkey |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if m.Int32Map == nil {
				m.Int32Map = make(map[int32]int32)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMapsproto2
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var mapvalue int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMapsproto2
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					mapvalue |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Int32Map[mapkey] = mapvalue
			} else {
				var mapvalue int32
				m.Int32Map[mapkey] = mapvalue
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Int64Map", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapsproto2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapsproto2
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapsproto2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var mapkey int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapsproto2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				mapkey |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if m.Int64Map == nil {
				m.Int64Map = make(map[int64]int64)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMapsproto2
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var mapvalue int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMapsproto2
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					mapvalue |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Int64Map[mapkey] = mapvalue
			} else {
				var mapvalue int64
				m.Int64Map[mapkey] = mapvalue
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uint32Map", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapsproto2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapsproto2
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapsproto2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var mapkey uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapsproto2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				mapkey |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if m.Uint32Map == nil {
				m.Uint32Map = make(map[uint32]uint32)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMapsproto2
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var mapvalue uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMapsproto2
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					mapvalue |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Uint32Map[mapkey] = mapvalue
			} else {
				var mapvalue uint32
				m.Uint32Map[mapkey] = mapvalue
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uint64Map", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapsproto2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapsproto2
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapsproto2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var mapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapsproto2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				mapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if m.Uint64Map == nil {
				m.Uint64Map = make(map[uint64]uint64)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMapsproto2
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var mapvalue uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMapsproto2
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					mapvalue |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Uint64Map[mapkey] = mapvalue
			} else {
				var mapvalue uint64
				m.Uint64Map[mapkey] = mapvalue
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sint32Map", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapsproto2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapsproto2
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapsproto2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var mapkeytemp int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapsproto2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				mapkeytemp |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			mapkeytemp = int32((uint32(mapkeytemp) >> 1) ^ uint32(((mapkeytemp&1)<<31)>>31))
			mapkey := int32(mapkeytemp)
			if m.Sint32Map == nil {
				m.Sint32Map = make(map[int32]int32)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMapsproto2
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var mapvaluetemp int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMapsproto2
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					mapvaluetemp |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				mapvaluetemp = int32((uint32(mapvaluetemp) >> 1) ^ uint32(((mapvaluetemp&1)<<31)>>31))
				mapvalue := int32(mapvaluetemp)
				m.Sint32Map[mapkey] = mapvalue
			} else {
				var mapvalue int32
				m.Sint32Map[mapkey] = mapvalue
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sint64Map", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapsproto2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapsproto2
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapsproto2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var mapkeytemp uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapsproto2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				mapkeytemp |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			mapkeytemp = (mapkeytemp >> 1) ^ uint64((int64(mapkeytemp&1)<<63)>>63)
			mapkey := int64(mapkeytemp)
			if m.Sint64Map == nil {
				m.Sint64Map = make(map[int64]int64)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMapsproto2
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var mapvaluetemp uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMapsproto2
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					mapvaluetemp |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				mapvaluetemp = (mapvaluetemp >> 1) ^ uint64((int64(mapvaluetemp&1)<<63)>>63)
				mapvalue := int64(mapvaluetemp)
				m.Sint64Map[mapkey] = mapvalue
			} else {
				var mapvalue int64
				m.Sint64Map[mapkey] = mapvalue
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fixed32Map", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapsproto2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapsproto2
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapsproto2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var mapkey uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			mapkey = uint32(data[iNdEx-4])
			mapkey |= uint32(data[iNdEx-3]) << 8
			mapkey |= uint32(data[iNdEx-2]) << 16
			mapkey |= uint32(data[iNdEx-1]) << 24
			if m.Fixed32Map == nil {
				m.Fixed32Map = make(map[uint32]uint32)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMapsproto2
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var mapvalue uint32
				if (iNdEx + 4) > l {
					return io.ErrUnexpectedEOF
				}
				iNdEx += 4
				mapvalue = uint32(data[iNdEx-4])
				mapvalue |= uint32(data[iNdEx-3]) << 8
				mapvalue |= uint32(data[iNdEx-2]) << 16
				mapvalue |= uint32(data[iNdEx-1]) << 24
				m.Fixed32Map[mapkey] = mapvalue
			} else {
				var mapvalue uint32
				m.Fixed32Map[mapkey] = mapvalue
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sfixed32Map", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapsproto2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapsproto2
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapsproto2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var mapkey int32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			mapkey = int32(data[iNdEx-4])
			mapkey |= int32(data[iNdEx-3]) << 8
			mapkey |= int32(data[iNdEx-2]) << 16
			mapkey |= int32(data[iNdEx-1]) << 24
			if m.Sfixed32Map == nil {
				m.Sfixed32Map = make(map[int32]int32)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMapsproto2
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var mapvalue int32
				if (iNdEx + 4) > l {
					return io.ErrUnexpectedEOF
				}
				iNdEx += 4
				mapvalue = int32(data[iNdEx-4])
				mapvalue |= int32(data[iNdEx-3]) << 8
				mapvalue |= int32(data[iNdEx-2]) << 16
				mapvalue |= int32(data[iNdEx-1]) << 24
				m.Sfixed32Map[mapkey] = mapvalue
			} else {
				var mapvalue int32
				m.Sfixed32Map[mapkey] = mapvalue
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fixed64Map", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapsproto2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapsproto2
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapsproto2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var mapkey uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			mapkey = uint64(data[iNdEx-8])
			mapkey |= uint64(data[iNdEx-7]) << 8
			mapkey |= uint64(data[iNdEx-6]) << 16
			mapkey |= uint64(data[iNdEx-5]) << 24
			mapkey |= uint64(data[iNdEx-4]) << 32
			mapkey |= uint64(data[iNdEx-3]) << 40
			mapkey |= uint64(data[iNdEx-2]) << 48
			mapkey |= uint64(data[iNdEx-1]) << 56
			if m.Fixed64Map == nil {
				m.Fixed64Map = make(map[uint64]uint64)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMapsproto2
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var mapvalue uint64
				if (iNdEx + 8) > l {
					return io.ErrUnexpectedEOF
				}
				iNdEx += 8
				mapvalue = uint64(data[iNdEx-8])
				mapvalue |= uint64(data[iNdEx-7]) << 8
				mapvalue |= uint64(data[iNdEx-6]) << 16
				mapvalue |= uint64(data[iNdEx-5]) << 24
				mapvalue |= uint64(data[iNdEx-4]) << 32
				mapvalue |= uint64(data[iNdEx-3]) << 40
				mapvalue |= uint64(data[iNdEx-2]) << 48
				mapvalue |= uint64(data[iNdEx-1]) << 56
				m.Fixed64Map[mapkey] = mapvalue
			} else {
				var mapvalue uint64
				m.Fixed64Map[mapkey] = mapvalue
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sfixed64Map", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapsproto2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapsproto2
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapsproto2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var mapkey int64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			mapkey = int64(data[iNdEx-8])
			mapkey |= int64(data[iNdEx-7]) << 8
			mapkey |= int64(data[iNdEx-6]) << 16
			mapkey |= int64(data[iNdEx-5]) << 24
			mapkey |= int64(data[iNdEx-4]) << 32
			mapkey |= int64(data[iNdEx-3]) << 40
			mapkey |= int64(data[iNdEx-2]) << 48
			mapkey |= int64(data[iNdEx-1]) << 56
			if m.Sfixed64Map == nil {
				m.Sfixed64Map = make(map[int64]int64)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMapsproto2
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var mapvalue int64
				if (iNdEx + 8) > l {
					return io.ErrUnexpectedEOF
				}
				iNdEx += 8
				mapvalue = int64(data[iNdEx-8])
				mapvalue |= int64(data[iNdEx-7]) << 8
				mapvalue |= int64(data[iNdEx-6]) << 16
				mapvalue |= int64(data[iNdEx-5]) << 24
				mapvalue |= int64(data[iNdEx-4]) << 32
				mapvalue |= int64(data[iNdEx-3]) << 40
				mapvalue |= int64(data[iNdEx-2]) << 48
				mapvalue |= int64(data[iNdEx-1]) << 56
				m.Sfixed64Map[mapkey] = mapvalue
			} else {
				var mapvalue int64
				m.Sfixed64Map[mapkey] = mapvalue
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoolMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapsproto2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapsproto2
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapsproto2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var mapkeytemp int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapsproto2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				mapkeytemp |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			mapkey := bool(mapkeytemp != 0)
			if m.BoolMap == nil {
				m.BoolMap = make(map[bool]bool)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMapsproto2
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var mapvaluetemp int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMapsproto2
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					mapvaluetemp |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				mapvalue := bool(mapvaluetemp != 0)
				m.BoolMap[mapkey] = mapvalue
			} else {
				var mapvalue bool
				m.BoolMap[mapkey] = mapvalue
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StringMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapsproto2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapsproto2
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapsproto2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapsproto2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthMapsproto2
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(data[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			if m.StringMap == nil {
				m.StringMap = make(map[string]string)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMapsproto2
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var stringLenmapvalue uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMapsproto2
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					stringLenmapvalue |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLenmapvalue := int(stringLenmapvalue)
				if intStringLenmapvalue < 0 {
					return ErrInvalidLengthMapsproto2
				}
				postStringIndexmapvalue := iNdEx + intStringLenmapvalue
				if postStringIndexmapvalue > l {
					return io.ErrUnexpectedEOF
				}
				mapvalue := string(data[iNdEx:postStringIndexmapvalue])
				iNdEx = postStringIndexmapvalue
				m.StringMap[mapkey] = mapvalue
			} else {
				var mapvalue string
				m.StringMap[mapkey] = mapvalue
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StringToBytesMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapsproto2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapsproto2
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapsproto2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapsproto2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthMapsproto2
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(data[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			if m.StringToBytesMap == nil {
				m.StringToBytesMap = make(map[string][]byte)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMapsproto2
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var mapbyteLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMapsproto2
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					mapbyteLen |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intMapbyteLen := int(mapbyteLen)
				if intMapbyteLen < 0 {
					return ErrInvalidLengthMapsproto2
				}
				postbytesIndex := iNdEx + intMapbyteLen
				if postbytesIndex > l {
					return io.ErrUnexpectedEOF
				}
				mapvalue := make([]byte, mapbyteLen)
				copy(mapvalue, data[iNdEx:postbytesIndex])
				iNdEx = postbytesIndex
				m.StringToBytesMap[mapkey] = mapvalue
			} else {
				var mapvalue []byte
				m.StringToBytesMap[mapkey] = mapvalue
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StringToEnumMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapsproto2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapsproto2
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapsproto2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapsproto2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthMapsproto2
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(data[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			if m.StringToEnumMap == nil {
				m.StringToEnumMap = make(map[string]MapEnum)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMapsproto2
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var mapvalue MapEnum
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMapsproto2
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					mapvalue |= (MapEnum(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.StringToEnumMap[mapkey] = mapvalue
			} else {
				var mapvalue MapEnum
				m.StringToEnumMap[mapkey] = mapvalue
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StringToMsgMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapsproto2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapsproto2
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapsproto2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapsproto2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthMapsproto2
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(data[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			if m.StringToMsgMap == nil {
				m.StringToMsgMap = make(map[string]*FloatingPoint)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMapsproto2
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var mapmsglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMapsproto2
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					mapmsglen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if mapmsglen < 0 {
					return ErrInvalidLengthMapsproto2
				}
				postmsgIndex := iNdEx + mapmsglen
				if mapmsglen < 0 {
					return ErrInvalidLengthMapsproto2
				}
				if postmsgIndex > l {
					return io.ErrUnexpectedEOF
				}
				mapvalue := &FloatingPoint{}
				if err := mapvalue.Unmarshal(data[iNdEx:postmsgIndex]); err != nil {
					return err
				}
				iNdEx = postmsgIndex
				m.StringToMsgMap[mapkey] = mapvalue
			} else {
				var mapvalue *FloatingPoint
				m.StringToMsgMap[mapkey] = mapvalue
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMapsproto2(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMapsproto2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMapsproto2(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMapsproto2
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMapsproto2
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMapsproto2
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMapsproto2
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMapsproto2
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMapsproto2(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMapsproto2 = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMapsproto2   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("combos/unmarshaler/mapsproto2.proto", fileDescriptorMapsproto2) }

var fileDescriptorMapsproto2 = []byte{
	// 989 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xec, 0x96, 0xcd, 0x8f, 0xdb, 0x44,
	0x18, 0xc6, 0x3d, 0xc9, 0xe6, 0x6b, 0xf2, 0xe5, 0x4c, 0x17, 0x14, 0x45, 0x62, 0x68, 0x53, 0x90,
	0xd2, 0x14, 0x92, 0x12, 0x10, 0x42, 0x5b, 0xa8, 0xb4, 0xe9, 0xa6, 0x04, 0x95, 0x94, 0x6a, 0xc3,
	0xb7, 0xb4, 0x12, 0x49, 0xd7, 0x49, 0x23, 0x92, 0x38, 0x8a, 0x6d, 0xc4, 0xde, 0xfa, 0x67, 0x70,
	0xe5, 0xc6, 0x91, 0x23, 0x47, 0x8e, 0x3d, 0xf6, 0xd8, 0x03, 0x87, 0xc6, 0x5c, 0x7a, 0xec, 0x71,
	0x8f, 0xc8, 0x33, 0xb6, 0x33, 0xb6, 0x5f, 0xdb, 0xe1, 0xd6, 0x43, 0x4e, 0xce, 0x3b, 0x7e, 0x9f,
	0xdf, 0x3c, 0x8e, 0x3d, 0xaf, 0x1e, 0x7c, 0xfd, 0x91, 0xba, 0x18, 0xab, 0x5a, 0xdb, 0x58, 0x2e,
	0x46, 0x6b, 0xed, 0xf1, 0x68, 0xae, 0xac, 0xdb, 0x8b, 0xd1, 0x4a, 0x5b, 0xad, 0x55, 0x5d, 0xed,
	0xb4, 0xd8, 0x85, 0xe4, 0xed, 0xca, 0xba, 0x51, 0x7b, 0x7f, 0x3a, 0xd3, 0x1f, 0x1b, 0xe3, 0xd6,
	0x23, 0x75, 0xd1, 0x9e, 0xaa, 0x53, 0xb5, 0xcd, 0x6e, 0x8e, 0x8d, 0x09, 0xab, 0x58, 0xc1, 0x7e,
	0x71, 0x6d, 0xfd, 0x2d, 0x5c, 0xbc, 0x37, 0x57, 0x47, 0xfa, 0x6c, 0x39, 0x7d, 0xa8, 0xce, 0x96,
	0x3a, 0x29, 0x60, 0x34, 0xa9, 0xa2, 0xab, 0xa8, 0x81, 0x4e, 0xd1, 0xa4, 0xfe, 0x9c, 0xe0, 0xcc,
	0xf1, 0x7c, 0x3e, 0x18, 0xad, 0x34, 0xf2, 0x03, 0xae, 0x0c, 0xf5, 0xf5, 0x6c, 0x39, 0xfd, 0x5a,
	0x3d, 0x51, 0x8d, 0xf1, 0x5c, 0x19, 0x8c, 0x56, 0x55, 0x74, 0x35, 0xd9, 0xc8, 0x77, 0x6e, 0xb6,
	0x04, 0x0b, 0x2d, 0x5b, 0xd0, 0x0a, 0x74, 0xf7, 0x96, 0xfa, 0xfa, 0xe2, 0xb4, 0xa2, 0xf9, 0xd7,
	0xc9, 0xb7, 0x58, 0x76, 0x9a, 0x99, 0x1b, 0x8b, 0x9c, 0x60, 0xe4, 0x66, 0x24, 0xd9, 0x69, 0xe6,
	0x60, 0x59, 0xf3, 0x2d, 0x93, 0x3b, 0x38, 0xfb, 0xc5, 0x52, 0xff, 0xb0, 0x63, 0xf1, 0x92, 0x8c,
	0x57, 0x07, 0x79, 0x4e, 0x13, 0xe7, 0x64, 0x67, 0x76, 0x69, 0xeb, 0x3f, 0xfe, 0xc8, 0xd2, 0x1f,
	0x44, 0xeb, 0x59, 0xd3, 0x56, 0xcf, 0x4a, 0x72, 0x8c, 0x73, 0xdf, 0x38, 0xb0, 0x6a, 0x8a, 0x01,
	0xae, 0x83, 0x00, 0xb7, 0x8b, 0x13, 0x72, 0x86, 0x6b, 0xc1, 0x46, 0x70, 0x0f, 0xe9, 0x18, 0x84,
	0x60, 0x82, 0x21, 0x5c, 0x17, 0x43, 0xd7, 0x45, 0x26, 0x02, 0x31, 0xf4, 0xb9, 0xd0, 0x44, 0x17,
	0x43, 0xd7, 0x45, 0x36, 0x06, 0x21, 0xba, 0xd0, 0x5c, 0x17, 0x27, 0x18, 0xdf, 0x9b, 0xfd, 0xaa,
	0x9c, 0x73, 0x1b, 0x39, 0xc6, 0x78, 0x07, 0x64, 0x6c, 0xdb, 0x38, 0x04, 0x4f, 0xdc, 0x05, 0xf2,
	0x39, 0xce, 0x0f, 0xb7, 0x65, 0x15, 0x33, 0xcc, 0xbb, 0xb0, 0x95, 0x89, 0x8f, 0x93, 0xd7, 0x04,
	0x90, 0x63, 0x87, 0x3f, 0x52, 0x3e, 0xce, 0x8e, 0xf0, 0x4c, 0xdc, 0x0e, 0x7f, 0x28, 0xd7, 0x0e,
	0xc7, 0x14, 0x62, 0xed, 0x08, 0x1c, 0xdb, 0x0e, 0x07, 0xdd, 0xc6, 0x99, 0xae, 0xaa, 0x5a, 0x9d,
	0xd5, 0x22, 0x83, 0x5c, 0x03, 0x21, 0x76, 0x0f, 0x07, 0x64, 0xc6, 0xbc, 0x62, 0x6f, 0x87, 0x7d,
	0xfa, 0x96, 0xbc, 0x14, 0xf5, 0x76, 0x9c, 0x2e, 0xe7, 0xed, 0x38, 0xb5, 0x78, 0x02, 0xbb, 0x17,
	0xba, 0xa2, 0x59, 0xa4, 0xf2, 0x0e, 0x27, 0xd0, 0x69, 0xf6, 0x9d, 0x40, 0x67, 0x99, 0x0c, 0x71,
	0xd9, 0x69, 0xed, 0x2d, 0x8d, 0x85, 0x85, 0x95, 0x19, 0xf6, 0x46, 0x24, 0xd6, 0xee, 0xe5, 0xd4,
	0xb2, 0xe6, 0x5d, 0x25, 0x0f, 0x71, 0xc9, 0x69, 0x1c, 0x68, 0xec, 0xa1, 0x2b, 0x8c, 0xd9, 0x88,
	0x64, 0xf2, 0x56, 0x8e, 0x2c, 0x69, 0x9e, 0xc5, 0xda, 0x09, 0x7e, 0x13, 0x9e, 0x56, 0x44, 0xc6,
	0xc9, 0x9f, 0x95, 0x0b, 0x36, 0x11, 0x73, 0xa7, 0xd6, 0x4f, 0x72, 0x88, 0x53, 0xbf, 0x8c, 0xe6,
	0x86, 0x52, 0x4d, 0xb0, 0x29, 0xc9, 0x8b, 0xa3, 0xc4, 0x27, 0xa8, 0x76, 0x17, 0xbf, 0x01, 0x4e,
	0xa6, 0x38, 0x48, 0x42, 0x84, 0xdc, 0xc6, 0x45, 0xcf, 0x38, 0x12, 0xc5, 0x29, 0x40, 0x9c, 0x0a,
	0x8a, 0xb7, 0x1f, 0x99, 0x28, 0x4e, 0x02, 0xe2, 0xa4, 0x28, 0xfe, 0x14, 0x97, 0xbc, 0x73, 0x48,
	0x54, 0x17, 0x01, 0x75, 0x11, 0x50, 0xc3, 0x7b, 0x1f, 0x00, 0xea, 0x03, 0x9f, 0x7a, 0x18, 0xba,
	0x77, 0x05, 0x50, 0x57, 0x00, 0x35, 0xbc, 0x37, 0x01, 0xd4, 0x44, 0x54, 0x7f, 0x86, 0xcb, 0xbe,
	0x91, 0x23, 0xca, 0x33, 0x80, 0x3c, 0x23, 0xca, 0xef, 0x60, 0xd9, 0x3f, 0x6a, 0x44, 0x7d, 0x19,
	0xd0, 0x97, 0xa1, 0xed, 0x61, 0xf7, 0x69, 0x40, 0x9e, 0x06, 0xb7, 0x87, 0xf5, 0x32, 0xa0, 0x97,
	0x45, 0xfd, 0x11, 0x2e, 0x88, 0x53, 0x45, 0xd4, 0x66, 0x01, 0x6d, 0xd6, 0xff, 0xbf, 0x7b, 0x46,
	0x4a, 0xdc, 0x97, 0x9e, 0x0b, 0x39, 0x2e, 0x9e, 0x31, 0x12, 0x07, 0x29, 0x88, 0x90, 0xef, 0xf1,
	0x21, 0x34, 0x34, 0x00, 0x46, 0x53, 0x64, 0x94, 0x3a, 0x87, 0x9e, 0x61, 0xc1, 0x74, 0xc6, 0x42,
	0x24, 0x9f, 0xe1, 0x2b, 0xc0, 0xe8, 0x00, 0xc0, 0xb7, 0x44, 0x70, 0xbe, 0x53, 0xf3, 0x80, 0x3d,
	0xe9, 0x4a, 0xc0, 0xd7, 0xff, 0xb9, 0x82, 0x4b, 0xf6, 0x88, 0xfa, 0x6a, 0x7d, 0xae, 0xac, 0x95,
	0x73, 0xf2, 0x53, 0x78, 0xc2, 0xea, 0x40, 0xa3, 0xcd, 0xd6, 0xfd, 0x8f, 0xa0, 0x75, 0x16, 0x1a,
	0xb4, 0x3e, 0xd8, 0x65, 0x83, 0xb8, 0xbc, 0xd5, 0x0b, 0xe4, 0xad, 0x1b, 0x51, 0xd8, 0xb0, 0xd8,
	0xd5, 0x0b, 0xc4, 0xae, 0x38, 0x0c, 0x98, 0xbe, 0xfa, 0xc1, 0xf4, 0xd5, 0x8c, 0xe2, 0x84, 0x87,
	0xb0, 0x7e, 0x30, 0x84, 0xc5, 0x92, 0xe0, 0x2c, 0xd6, 0x0f, 0x66, 0xb1, 0x48, 0x52, 0x78, 0x24,
	0xeb, 0x07, 0x23, 0x59, 0x2c, 0x09, 0x4e, 0x66, 0xf7, 0x81, 0x64, 0x76, 0x33, 0x0a, 0x15, 0x15,
	0xd0, 0x1e, 0x40, 0x01, 0xed, 0xbd, 0x48, 0x63, 0x91, 0x39, 0xed, 0x3e, 0x90, 0xd3, 0xe2, 0xcd,
	0x85, 0xc4, 0xb5, 0x07, 0x50, 0x5c, 0xdb, 0xc1, 0x5c, 0x58, 0x6a, 0xeb, 0xfa, 0x53, 0x5b, 0x23,
	0x8a, 0x05, 0x87, 0xb7, 0x7e, 0x30, 0xbc, 0x35, 0xe3, 0xcf, 0x22, 0x94, 0xe1, 0xce, 0x42, 0x33,
	0xdc, 0x4e, 0x87, 0x3b, 0x2e, 0xca, 0xfd, 0x18, 0x16, 0xe5, 0x6e, 0xed, 0x42, 0x8f, 0x4e, 0x74,
	0xdf, 0x85, 0x24, 0xba, 0xf6, 0x2e, 0xe8, 0x7d, 0xb0, 0xdb, 0x07, 0xbb, 0x7d, 0xb0, 0xdb, 0x07,
	0xbb, 0xd7, 0x23, 0xd8, 0x1d, 0x1d, 0xfc, 0xf6, 0xfb, 0xdb, 0xa8, 0x79, 0x0d, 0x67, 0xec, 0xad,
	0x49, 0x1a, 0x27, 0x06, 0xc7, 0xb2, 0xc4, 0xae, 0x5d, 0x19, 0xb1, 0xeb, 0x5d, 0x39, 0xd1, 0xfd,
	0xf2, 0xe9, 0x86, 0x4a, 0xcf, 0x36, 0x54, 0x7a, 0xbe, 0xa1, 0xd2, 0x8b, 0x0d, 0x45, 0x2f, 0x37,
	0x14, 0xbd, 0xda, 0x50, 0x74, 0xb9, 0xa1, 0xe8, 0x89, 0x49, 0xd1, 0x1f, 0x26, 0x45, 0x7f, 0x9a,
	0x14, 0xfd, 0x65, 0x52, 0xf4, 0xb7, 0x49, 0xd1, 0x53, 0x93, 0x4a, 0xcf, 0x4c, 0x8a, 0x5e, 0x98,
	0x14, 0xbd, 0x34, 0xa9, 0xf4, 0xca, 0xa4, 0xe8, 0xd2, 0xa4, 0xd2, 0x93, 0x7f, 0xa9, 0xf4, 0x5f,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x7f, 0x9b, 0x8a, 0x9e, 0x2b, 0x14, 0x00, 0x00,
}
